---
title: "Sandbox"
author: "G9"
format: 
  html:
    mainfont: system-ui
    fontsize: medium
    code-block-border-left: "#63B9A0"
    code-overflow: wrap
    highlight-style: solarized
    page-layout: full
    number-sections: true
    title-block-banner: true
    fig-align: center
    reader-mode: true
---

## Install and launching R packages

```{r init, results='hide', message=FALSE}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

## Read data and compress in RDS file

This section of code is used to compress the file so that it will not load too slowly when it is uploaded to the website. I've already built the RDS files in the RDS folder, so you don't need to run this script.

```{r read data, warning=FALSE, message=FALSE}
T2.3 <- read_csv("data/T2-3.csv")
saveRDS(T2.3, file = "RDS/T2-3.rds")

T2.6 <- read_csv("data/T2-6.csv")
saveRDS(T2.6, file = "RDS/T2-6.rds")

T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")

T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")

T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")

T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")

T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")

T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")

T5.1 <- read_csv("data/T5-1.csv")
saveRDS(T5.1, file = "RDS/T5-1.rds")

T5.2 <- read_csv("data/T5-2.csv")
saveRDS(T5.2, file = "RDS/T5-2.rds")

T5.3 <- read_csv("data/T5-3.csv")
saveRDS(T5.3, file = "RDS/T5-3.rds")

T5.4 <- read_csv("data/T5-4.csv")
saveRDS(T5.4, file = "RDS/T5-4.rds")

T5.5 <- read_csv("data/T5-5.csv")
saveRDS(T5.4, file = "RDS/T5-5.rds")
```

### Data table

T2.3 : Peak System Demand

```{r T2.3, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T2.3, 5))
```

T2.6 : Market Share of Electricity Generation

```{r T2.6, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T2.6, 5))
```

T3.4 : Total Household Electricity Consumption by Dwelling Type

```{r T3.4, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T3.4, 5))
```

T3.5 : Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type

```{r T3.5, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T3.5, 5))
```

T3.6 : Market Share for Natural Gas Retail

```{r T3.6, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T3.6, 5))
```

T3.7 : Natural Gas Consumption by Sub-Sector

```{r T3.7, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T3.7, 5))
```

T3.8 : Total Household Town Gas Consumption by Dwelling Type

```{r T3.8, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T3.8, 5))
```

T3.9 : Average Monthly Household Town Gas Consumption by Planning Area & Dwelling Type

```{r T3.9, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T3.9, 5))
```

**T5.1 : Electricity and Gas Tariffs**

```{r T5.1, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T5.1, 5))
```

**T5.2 : Monthly Electricity Tariffs (Low Tension Tariffs)**

```{r T5.2, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T5.2, 5))
```

**T5.3 : Annual Electricity Tariffs by Components (Low Tension Tariffs)**

```{r T5.3, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T5.3, 5))
```

**T5.4 : Average Monthly Uniform Singapore Energy Prices (USEP)**

```{r T5.4, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T5.4, 5))
```

**T5.5 : Monthly Town Gas Tariffs**

```{r T5.5, echo=FALSE}
#| fig-width: 10
knitr::kable(head(T5.5, 5))
```

**Code for load data**

```{r}
## Read compressed data file
T2.3 <- readRDS(file = "RDS/T2-3.rds") # Peak System Demand
#T2.6 <- readRDS(file = "RDS/T2-6.rds") # Market Share of Electricity Generation
T3.4 <- readRDS(file = "RDS/T3-4.rds") # Total Household Electricity Consumption by Dwelling Type
T3.5 <- readRDS(file = "RDS/T3-5.rds") # Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
#T3.6 <- readRDS(file = "RDS/T3-6.rds") # Market Share for Natural Gas Retail
#T3.7 <- readRDS(file = "RDS/T3-7.rds") # Natural Gas Consumption by Sub-Sector
#T3.8 <- readRDS(file = "RDS/T3-8.rds") # Total Household Town Gas Consumption by Dwelling Type
#T3.9 <- readRDS(file = "RDS/T3-9.rds") # Average Monthly Household Town Gas Consumption by Planning Area & Dwelling Type
#T5.1 <- readRDS(file = "RDS/T5-1.rds") # Electricity and Gas Tariffs
#T5.2 <- readRDS(file = "RDS/T5-2.rds") # Monthly Electricity Tariffs (Low Tension Tariffs)
#T5.3 <- readRDS(file = "RDS/T5-3.rds") # Annual Electricity Tariffs by Components (Low Tension Tariffs)
#T5.4 <- readRDS(file = "RDS/T5-4.rds") # Average Monthly Uniform Singapore Energy Prices (USEP)
#T5.5 <- readRDS(file = "RDS/T5-5.rds") # Monthly Town Gas Tariffs
```

## Shiny

### Skeleton

```{r skeleton, warning = FALSE, message=FALSE}
# call library used
library(shiny)
library(shinythemes)

## Set up parameter


ui = fluidPage(
  theme = shinytheme("slate"),
  headerPanel(title = "Singapore Energy Consumption"),
  
  navlistPanel(
    widths = c(3, 9),
     
    tabPanel("OVERVIEW",tabName = "overview",icon = icon("chalkboard-user"),
             navbarPage("OVERVIEW", 
                        tabPanel("Introduction"),
                        tabPanel("Boxplot"),
                        tabPanel("Geofacet"),
                        tabPanel("Lineplot"),
                        tabPanel("Barchart")
             )
    ),
      
    # ========================== CLUSTERING ========================== #
    
    tabPanel("CLUSTERING", tabName = "clustering", icon = icon("circle-nodes"),
             navbarPage("CLUSTERING", 
                        tabPanel("Hierachical Clustering"),
                        tabPanel("DTW"),
                        tabPanel("Time Series Clustering")
             )
    ),
    
    # ========================== INFERENTIAL ========================== #     
    
    tabPanel("INFERENTIAL STATISTICS", tabName = "inferential", icon = icon("magnifying-glass-chart"),
             navbarPage("INFERENTIAL STATISTICS", 
                        tabPanel("ANOVA"),
                        tabPanel("Correlation Analysis")
             )
    ),
    
    # ========================== TIME SERIES ========================== #     
    
    tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
             navbarPage("TIME SERIES FORECASTING",
                        tabPanel("Trend Prediction"),
                        tabPanel("Slope Graph")
             )
    ),
    
    # =============================== DATA =============================== #     
    
    tabPanel("DATA", tabName = "data", icon = icon("table"),
             navbarPage("DATA" )),
    # =============================== ABOUT =============================== #    
    
    tabPanel("ABOUT", tabName = "about", icon = icon("info")),
    # ============================== CO.MMON USER INPUT =============================== #    
    tabPanel(wellPanel(
      sliderInput("slider_time", "Select date range",min = as.Date("2021-02-24"), 
                  max = as.Date("2021-04-24"), 
                  value =  c(as.Date("2021-02-24"),as.Date("2021-03-03") )),
      
      dateRangeInput("daterange", "Input date range", 
                     start = as.Date("2021-02-24"),end = as.Date("2021-03-03") )
    ))
  )
)

server = function(input, output, session) {
  
}

shinyApp(ui , server )
```

### Data tab : data table page

```{r DataTable, warning=FALSE, message=FALSE}
library(shiny)
library(shinythemes)

## Set up parameter
tables <- c("Peak System Demand" = "T2.3",
            "Market Share of Electricity Generation" = "T2.6",
            "Total Household Electricity Consumption by Dwelling Type" = "T3.4",
            "Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type" = "T3.5",
            "Market Share for Natural Gas Retail" = "T3.6",
            "Natural Gas Consumption by Sub-Sector" = "T3.7",
            "Total Household Town Gas Consumption by Dwelling Type" = "T3.8",
            "Average Monthly Household Town Gas Consumption by Planning Area & Dwelling Type" = "T3.9",
            "Electricity and Gas Tariffs" = "T5.1",
            "Monthly Electricity Tariffs (Low Tension Tariffs)" = "T5.2",
            "Annual Electricity Tariffs by Components (Low Tension Tariffs)" = "T5.3",
            "Average Monthly Uniform Singapore Energy Prices (USEP)" = "T5.4",
            "Monthly Town Gas Tariffs" = "T5.5")

ui = fluidPage(
  theme = shinytheme("slate"),
  headerPanel(title = "Singapore Energy Consumption"),
  
  navlistPanel(
    widths = c(3, 9),
    
    # ========================== OVERVIEW ========================== #      
    tabPanel("OVERVIEW",tabName = "overview",icon = icon("chalkboard-user")),
    
    # ========================== CLUSTERING ========================== #
    
    tabPanel("CLUSTERING", tabName = "clustering", icon = icon("circle-nodes")),
    
    # ========================== INFERENTIAL ========================== #     
    
    tabPanel("INFERENTIAL STATISTICS", tabName = "inferential", icon = icon("magnifying-glass-chart")),
    
    # ========================== TIME SERIES ========================== #     
    
    tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line")),
    
    # =============================== DATA =============================== #     
    
    tabPanel("DATA", tabName = "data", icon = icon("table"),
             navbarPage("DATA",
                        tabPanel("data table",
                                 fluidPage(
                                   fluidRow(
                                     column(12, wellPanel(
                                       radioButtons("SelectTable",
                                                    label = "Select Data",
                                                    choices = tables,
                                                    selected = "Electricity")
                                     ) ),
                                     column(12, dataTableOutput("table"))
                                   )
                                 ))
             )
    ),
    
    # ******************************* END DATA ******************************* #    
    
    # =============================== ABOUT =============================== #    
    
    tabPanel("ABOUT", tabName = "about", icon = icon("info")),
    
    # ****************************** END ABOUT ****************************** #    
    tabPanel(wellPanel(
      sliderInput("slider_time", "Select date range",min = as.Date("2021-02-24"), 
                  max = as.Date("2021-04-24"), 
                  value =  c(as.Date("2021-02-24"),as.Date("2021-03-03") )),
      
      dateRangeInput("daterange", "Input date range", 
                     start = as.Date("2021-02-24"),end = as.Date("2021-03-03") )
    ))
  )
)

server = function(input, output, session) {
  
  observeEvent((input$SelectTable),{
                if(input$SelectTable == "T2.3") {tabletext <- T2.3}
               if(input$SelectTable == "T2.6")  {tabletext <- T2.6}
               if(input$SelectTable == "T3.4")  {tabletext <- T3.4}
               if(input$SelectTable == "T3.5")  {tabletext <- T3.5}
               if(input$SelectTable == "T3.6")  {tabletext <- T3.6}
               if(input$SelectTable == "T3.7")  {tabletext <- T3.7}
               if(input$SelectTable == "T3.8")  {tabletext <- T3.8}
               if(input$SelectTable == "T3.9")  {tabletext <- T3.9}
               if(input$SelectTable == "T5.1")  {tabletext <- T5.1}
               if(input$SelectTable == "T5.2")  {tabletext <- T5.2}
               if(input$SelectTable == "T5.3")  {tabletext <- T5.3}
               if(input$SelectTable == "T5.4")  {tabletext <- T5.4}
               if(input$SelectTable == "T5.5")  {tabletext <- T5.5}
               output$table <- renderDataTable(tabletext)
               }
  )
}

shinyApp(ui = ui, server = server)
```

### Overview tab : geofacet

```{r geofacet, warning=FALSE, message=FALSE}
library(shiny)
library(shinythemes)
library(geofacet)

# Import data 
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)

# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")

geofacet <- geofacet %>%
  group_by(year, dwelling_type, Description ) %>%
  summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
            medprice = median(kwh_per_acc, na.rm = TRUE))%>%
  ungroup()

# merge table with town name
geofacet_gas_consump <- inner_join(geofacet, area_grid,
                      by = c("Description" = "name"))

common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
  geom_line(aes(color = as.factor(dwelling_type))) +
  # scale_x_date(date_labels = "%b") +
  facet_geo(~Description, grid = common_grid) +
  # labs(title = "Singapore Resale flat price trends") +
  # scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
  theme(plot.title = element_text(size=22),
        axis.text.x = element_text(size = 10, angle = 45),
        axis.text.y = element_text(size = 10),
        strip.text = element_text(size = 10),
        legend.position = "top")
```

```{r geofacetshiny, warning = FALSE, message=FALSE}

# call library used
library(shiny)
library(shinythemes)
library(geofacet)
library(shinyWidgets)

# Import data 
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)

# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")

ui = fluidPage(
  theme = shinytheme("slate"),
  headerPanel(title = "Singapore Energy Consumption"),
  
  navlistPanel(
    widths = c(3, 9),
    tabPanel("OVERVIEW",tabName = "overview",icon = icon("chalkboard-user"),
             navbarPage("OVERVIEW", 
                        tabPanel("Introduction"),
                        tabPanel("Boxplot"),
                        tabPanel("Geofacet",
                                 fluidPage(
                                   fluidRow(
                                     column(12,plotOutput("geo", height = 800))
                                   )
                                 )
                        ),
                        tabPanel("Lineplot"),
                        tabPanel("Barchart")
             )
    ),
    
    # ========================== CLUSTERING ========================== #
    
    tabPanel("CLUSTERING", tabName = "clustering", icon = icon("circle-nodes"),
             navbarPage("CLUSTERING", 
                        tabPanel("Hierachical Clustering"),
                        tabPanel("DTW"),
                        tabPanel("Time Series Clustering")
             )
    ),
    
    # ========================== INFERENTIAL ========================== #     
    
    tabPanel("INFERENTIAL STATISTICS", tabName = "inferential", icon = icon("magnifying-glass-chart"),
             navbarPage("INFERENTIAL STATISTICS", 
                        tabPanel("ANOVA"),
                        tabPanel("Correlation Analysis")
             )
    ),
    
    # ========================== TIME SERIES ========================== #     
    
    tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
             navbarPage("TIME SERIES FORECASTING",
                        tabPanel("Trend Prediction"),
                        tabPanel("Slope Graph")
             )
    ),
    
    # =============================== DATA =============================== #     
    
    tabPanel("DATA", tabName = "data", icon = icon("table"),
             navbarPage("DATA" )),
    # =============================== ABOUT =============================== #    
    
    tabPanel("ABOUT", tabName = "about", icon = icon("info")),
    # ============================== CO.MMON USER INPUT =============================== #    
    tabPanel(wellPanel(
      sliderInput("slider_time", "Select date range",min = as.Date("2021-02-24"), 
                  max = as.Date("2021-04-24"), 
                  value =  c(as.Date("2021-02-24"),as.Date("2021-03-03") )),
      
      dateRangeInput("daterange", "Input date range", 
                     start = as.Date("2021-02-24"),end = as.Date("2021-03-03") )
    ))
  )
)

server = function(input, output, session) {
  
  output$geo <- renderPlot ({
    geofacet <- geofacet %>%
      group_by(year, dwelling_type, Description ) %>%
      summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
                medprice = median(kwh_per_acc, na.rm = TRUE))%>%
      ungroup()
    
    # merge table with town name
    geofacet_gas_consump <- inner_join(geofacet, area_grid,
                                       by = c("Description" = "name"))
    
    common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
    ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
      geom_line(aes(color = as.factor(dwelling_type))) +
      # scale_x_date(date_labels = "%b") +
      facet_geo(~Description, grid = common_grid) +
      labs(title = "Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type") +
      # scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
      theme(plot.title = element_text(size=22),
            axis.text.x = element_text(size = 10, angle = 45),
            axis.text.y = element_text(size = 10),
            strip.text = element_text(size = 10),
            legend.position = "right")
  })
}

shinyApp(ui , server )
```

### Time Series Forecasting

```{r timeseries_library}
packages = c('tidyverse','tidyquant','tsibbledata','tsibble','feasts'
             ,'stats','lubridate','data.table','rmarkdown','knitr')
for (p in packages) {
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

```{r timeseries_data, warning=FALSE, message=FALSE}
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5 
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))

paged_table(arima)
paged_table(arima2)
paged_table(arima3)
```

```{r}
arima_tsbl  = as_tsibble(arima)

head(arima_tsbl)

```

```{r}
full_arima = arima_tsbl %>%
  fill_gaps() %>% 
  # group_by_key() %>% 
  tidyr::fill(peak_system_demand_mw, .direction = "down")

head(full_arima)
```

```{r}
full_arima_mth_agg = full_arima %>%
  # index_by(Date = ~ Date(.)) %>% 
  summarise(
    avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
  )

head(full_arima_mth_agg)
```

Seasonal plot

```{r}
full_arima %>%
   gg_season(peak_system_demand_mw)+
  labs(title = "",
       subtitle = "",
       y = "peak_system_demand_mw")
```

```{r}
full_arima_2019 = full_arima %>%
  filter(year == 2019) %>%
  mutate(quarter= case_when(
      mth >= 1 & mth <= 3 ~ 'Q1'
      , mth >= 4 & mth <= 6 ~ 'Q2'
      , mth >= 7 & mth <= 9 ~ 'Q3'
      , mth >= 10 & mth <= 12 ~ 'Q4')) %>%
    select(year, mth, peak_system_demand_mw, Date) 

full_arima_2019 %>%
   gg_lag(peak_system_demand_mw, geom = "point")+
   labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
       y = "Humidity level")
```

```{r}
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)

head(full_arima_acf)
```

```{r}
full_arima_2019 %>%
  ACF(peak_system_demand_mw) %>%
  autoplot() + labs(title="")
```

```{r}
full_arima_stl=full_arima %>% 
  summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>% 
  model(STL(peak_system_demand_mw ~ season(window = 5))) %>% 
  components()

head(full_arima_stl)
```

```{r}
full_arima_stl %>% 
  summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>% 
  model(STL(peak_system_demand_mw ~ season(window = 5))) %>% 
  components() %>%
  autoplot()+
  labs(title = "",
       y = "peak_system_demand_mw")
```

### Timetk

```{r}
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
             ,'tsibbletalk','tidymodels','earth'
             ,'stats','lubridate','data.table','ggplot2','plotly'
             ,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

```{r}
arima %>%
  ggplot(aes(x = Date, y = peak_system_demand_mw)) +
  geom_line(size = 0.5)+
  labs(title = "") +
  theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
        ,plot.title = element_text(size = 35, color = '#333333')
        ,axis.title = element_text(size = 14, color = '#333333')
        ,axis.title.y = element_text(angle = 0, vjust = .5)
        ) +
    theme_tq() + 
    scale_color_tq()
```

```{r}
arima_ts <- ts(data=arima$peak_system_demand_mw)
plot.ts(arima_ts, plot.type=('single'))                   
```

```{r}
arima_ds = diff(arima_ts, differences = 2)
ggplotly(plot(arima_ds))
```

```{r}
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
```

```{r}
 arima <- T2.3
  arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
  arima_ts <- ts(data=arima$peak_system_demand_mw)
  arima_arima = auto.arima(arima_ts)

  plot(forecast(arima_arima))

```

```{r, warning = FALSE}
full_arima %>%
  gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
```

```{r, warning=FALSE, message=FALSE}
consumption <- read_csv("data/T3-5.csv")
consumption <- consumption %>% 
  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% 
  mutate(year = as.character(year))

energycost <- read_csv("data/T5-3.csv")
energycost <- energycost %>% 
  mutate(year = as.character(year))

#merge
a <- consumption %>% 
  select("year", "kwh_per_acc") %>% 
  group_by(year) %>%
  na.omit() %>%
  summarize(kwh_per_acc=mean(kwh_per_acc))
#b <- b %>% 
#  data.frame(energycost,a) %>% 
#  select("year", "kwh_per_acc", "energy_costs_cent_per_kwh")

consumption %>% 
  group_by(year) %>%
  # filter(year == "2022") %>% 
  ggplot(mapping = aes(x = year, y = kwh_per_acc)) +
  # Make grouped boxplot
  geom_boxplot(aes(fill = as.factor(Region)), color = "grey") +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_fill_viridis_d(option = "C") +
  labs(title = "Average consumption per year by Region", y="kwh per acc", fill = "Region")
```

```{r ANOVA}
set.seed(1234)

ggbetweenstats(
  data = consumption,
  x = Region,
  y = kwh_per_acc,
  # type = "np",
  messages = FALSE
)
```

```{r box plot, message=FALSE, warning=FALSE}
consumption %>%
  mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%
  ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +
  geom_boxplot() +
  stat_summary(fun.y=mean, geom="point", color="red") +
  theme(legend.position="none") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
  ggtitle("Boxplot of consumption per planning area")
```

```{r}
#library(shiny)
#library(shinydashboard)
#library(shinythemes)
#library(shinyWidgets)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(geofacet)
library(treemap)
library(ggstatsplot)
library(ggridges)
```

```{r}
# Clustering
# Filter the required data for clustering

# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards
# exclude region in description
# Exclude Pioneer as data incomplete

clus_data <- T3.5 %>% 
  filter(month != "Annual" & 
           year > 2017 & 
           dwelling_type != "Overall" &
           !str_detect(Description,"Region|Pioneer|Overall"))

# transform dataset

# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m")) 

# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
  arrange(date)

# pivot wider
clus <- clus_data %>%
  pivot_wider(names_from=date, values_from=kwh_per_acc) 

# omit na
clus <- na.omit(clus)
clus %>% relocate(Description, .before = dwelling_type)
```

```{r}
# Clustering
library(dtwclust)


# dendextend
# tsclust
```

```{r}
# topdrinks_matrix <- data.matrix(topdrinks_n)
# 
# topdrinks_d <- dist(normalize(topdrinks_matrix[c(1:12)]), method = "euclidean")
# 
# topdrinks_clust <- hclust(topdrinks_d, method = "average")
# topnum_k <- find_k(topdrinks_clust)
# plot(topnum_k)
```
