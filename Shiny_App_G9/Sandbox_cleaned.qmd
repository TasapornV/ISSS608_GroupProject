---
title: "Sandbox_Cleaned"
author: "Tasaporn Visawameteekul, Law Shiang Row, Khoo Wei Lun"
format: 
  html:
    mainfont: system-ui
    fontsize: medium
    code-block-border-left: "#63B9A0"
    code-overflow: wrap
    highlight-style: solarized
    page-layout: full
    number-sections: true
    title-block-banner: true
    fig-align: center
    reader-mode: true
---

## Install and launching R packages

```{r init, results='hide', message=FALSE}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

## Read data and compress in RDS file

```{r read data, warning=FALSE, message=FALSE}
#library(readr)

# Peak System Demand
T2.3 <- read_csv("data/T2-3.csv")
# Total Household Electricity Consumption by Dwelling Type
T3.4 <- read_csv("data/T3-4.csv")
# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
T3.5 <- read_csv("data/T3-5.csv")
```

### Data table

T2.3 : Peak System Demand

```{r T2.3, echo=FALSE}
#| fig-width: 10
head(T2.3, 5)
```

T3.4 : Total Household Electricity Consumption by Dwelling Type

```{r T3.4, echo=FALSE}
#| fig-width: 10
head(T3.4, 5)
```

T3.5 : Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type

```{r T3.5, echo=FALSE}
#| fig-width: 10
head(T3.5, 5)
```

## 1 Overview

### 1.1 Introduction

```{r 1.1 Introduction, warning=FALSE, message=FALSE}
library(shiny)
library(shinydashboard)

introtext = "Singapore has progressively moved towards an open electricity market since 2001 
to ensure a reliable energy supply and promote effective competition in the energy market.
However, it is challenging to analyze the energy market and make informed decisions due to 
several variable components that could influence the market. First, the price of electricity 
in the wholesale market fluctuates depending on the electricity demand and supply, which are 
dependent on consumption patterns as well as gas industry respectively. About 95% of electricity 
is generated using natural gas. Next, there are also multiple parties (Electricity Market Authority, 
Power generation companies, Electricity Retailers, etc) involved in the electricity market.
To address this challenge, we build this RShinny app to provide relevant stakeholders with means 
to analyse and understand the data with applicable analytics models. Also, we want to help the 
users explore more information about the Singapore energy market easily through visualizations."

ui = dashboardPage(
  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
  
  dashboardSidebar(width = 210,
                   sidebarMenu(
                     menuItem(" OVERVIEW", tabName = 'overview',    icon = icon("chalkboard-user"))
                   )),
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "overview",
        navbarPage( "OVERVIEW",
                    
                    tabPanel("Introduction",introtext)
        )
      )
    )
  )
)
server = function(input, output, session) {}

shinyApp(ui = ui, server = server)
```

### 1.2 Geofacet

```{r 1.2 Geofacet, warning=FALSE, message=FALSE}
library(shiny)
library(shinydashboard)
library(geofacet)

town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' & 
                 Description !='East Region' & Description !='North East Region' &
                 Description !='North Region' & Description !='West Region' &
                 kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
                 dwelling_type != 'Public Housing' & month != 'Annual') %>%
  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
  mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))


# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414)

# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
singapore <- st_transform(mpsz, 4326)


ui = dashboardPage(
  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
  
  dashboardSidebar(width = 210,
                   sidebarMenu(
                     menuItem(" OVERVIEW", tabName = 'overview',    icon = icon("chalkboard-user"))
                   )),
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "overview",
        navbarPage( "OVERVIEW",
                    tabPanel("Consumption by Planning Area & Dwelling Type",
                            fluidPage(
                              radioButtons("axis", label = "select axis control",
                                           choices = c("fixed y-axis" = "fixed",
                                                       "free y-axis" = "free_y"), 
                                           inline = T),
                              plotOutput("geo", height = 800)
                            ))
        )
      )
    )
  )
)

server = function(input, output, session) {
   geofacet <- town %>% 
        group_by(year, dwelling_type, Description)  %>%
        summarise(average_consumption = mean(kwh_per_acc, na.rm = TRUE))%>%
        ungroup()
  geofacet_gas_consump <- inner_join(geofacet, area_grid,
                                     by = c("Description" = "name"))
  # merge table with town name
  common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
  
  observeEvent(input$axis,{
    
    output$geo <- renderPlot ({
      ggplot(geofacet_gas_consump, aes(x = year, y = average_consumption)) +
        geom_line(aes(color = as.factor(dwelling_type))) +
        facet_geo(~Description, grid = common_grid, scales = input$axis) +
        labs(title = "Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type") +
        theme(plot.title = element_text(size=22),
              axis.text.x = element_text(size = 10, angle = 45),
              axis.text.y = element_text(size = 10),
              strip.text = element_text(size = 10),
              legend.position = "right")
    })
  })
}

shinyApp(ui = ui, server = server)
```

### 1.3 Consumption by Dwelling type and Town

#### Plot 1 - Line plot

```{r 1.3.1 Line plot, warning=FALSE, message=FALSE}
library(tidyquant)

  sysdemand <- T2.3 %>%
    mutate(date = parse_date_time(paste0(year, "-", mth,"-1"),"ymd")) %>%
    mutate(monthyear = format(as.Date(date), "%b'%Y"))
  

    p_line <- sysdemand %>%
      mutate(text = paste(monthyear,
                          "<br>System Demand (NW):", peak_system_demand_mw)) %>%
      ggplot(aes(x = date, y = peak_system_demand_mw)) +
      geom_line() +
      geom_point() +
      labs(title = "Monthly Peak System Demand (MW)",
           x = "", y = "MW") +
      theme_tq() +
      #    scale_x_date(expand=c(0,0), date_breaks = "3 month", date_labels = "%b%y") +
      theme(legend.position="none")
    p_line
```

#### Plot 2 - Cycle plot

```{r 1.3.2 Cycle plot, warning=FALSE, message=FALSE}
  sysdemand21 <- sysdemand %>%
    filter(year %in% c(2005:2021))
  
  #Computing year average by months
  hline.data <- sysdemand21 %>%
    group_by(mth) %>%
    summarise(avg_demand = mean(peak_system_demand_mw))
  
  #Allow user to choose monthly vs quarterly cycleplot
  p_cycleplot <-
    ggplot() +
    geom_line(data = sysdemand21,
              aes(x=year,y=peak_system_demand_mw, group=mth), colour = "black") +
    geom_hline(data = hline.data,
               aes(yintercept=avg_demand),
               linetype=6, 
               colour="red", 
               size=0.5) +
    facet_grid(~mth) +
    theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
    labs(title = "Cycleplot of Peak System Demand (MW), 2005 to 2021") +
    xlab("") +
    ylab("MW")
  
  output$cycleplot <- renderPlotly({
    p_cycleplot
  })
```

#### Plot 3 - Sparkline Table

```{r 1.3.3 Sparkline table, warning=FALSE, message=FALSE}

```

#### Plot 4 - Slopegraph

```{r 1.3.4 Slope graph, warning=FALSE, message=FALSE}

```

## 2. Clustering

### 2.1 Hierachical clustering

#### Plot 1 - Method selection table

```{r 2.1.1 Method selection table, warning=FALSE, message=FALSE}

```

#### Plot 2 - Heatmap

```{r 2.1.2 Heatmap, warning=FALSE, message=FALSE}

```

#### Plot 3 - Number of cluster plot

```{r 2.1.3 Number of cluster plot, warning=FALSE, message=FALSE}

```

#### Plot 4 - Map

```{r 2.1.4 map, warning=FALSE, message=FALSE}

```

### 2.2 Time Series clustering

```{r 2.2 Time series clustering}
library(dtwclust)
library(tibble)
library(ggdendro)

# Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods
# parameter 1: Number of cluster (k)
# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 3: hierarchical clustering method ("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median" or "centroid" .)


cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
                       type = "h", 
                       k=2,
                       distance="dtw",
                       control = hierarchical_control(method = "ward.D"),
                       preproc = NULL,
                       args=tsclust_args(dist = list(window.size = 5L)))

hclus_dtw <- cutree(cluster_dtw, k=4) %>%
  as.data.frame(.) %>%
  rename(.,cluster_group = .) %>%
  rownames_to_column("type_col")

# hcdata <- dendro_data(cluster_dtw)
# names_order <- hcdata$labels$label

library(ggplot2)
library(ggiraph)
library(timetk)

# add the cluster number
dtw_cluster <- clus_group1 %>%
  left_join(hclus_dtw, by=c("Description" = "type_col")) 

# change date columns into rows
dtw_cluster_t <- dtw_cluster %>%
  mutate_at(vars(contains("202")),as.numeric) %>%
  gather(Date, value, 2:55)

# Add the word "Cluster"
dtw_cluster_t$cluster_group <- paste("Cluster", dtw_cluster_t$cluster_group)

# convert Date into date format
dtw_cluster_t$Date <- parse_date_time(dtw_cluster_t$Date, orders=c("%Y-%m-%d")) 

# plot time series by cluster

ts <- plot_time_series(.data=dtw_cluster_t,
                 .date_var=Date, 
                 .value=value,
                 .color_var=Description,
                 .facet_var=cluster_group,
                 .facet_ncol=2,
                 .facet_scales = "free_y",
                 .smooth=FALSE,
                 .line_size = 0.3,
                 .plotly_slider = TRUE,
                 .title = "Time Series Plot by cluster") 

ts <- ts %>%
  layout(hovermode="x",
         hoverlabel=list(font=list(size=7)))
ts

# how to modify the tooltip? Town is being shown twice here...

library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414) 

singapore <- st_transform(mpsz, 4326)

library(tmap)
# change Description to upper case
dtw_cluster_t$Description <- toupper(dtw_cluster_t$Description)

# Preparing the choropleth map
mpsz_clus_dtw <- left_join(singapore, dtw_cluster_t, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus_dtw)+
  tmap_options(check.and.fix = TRUE)+
  tm_fill("cluster_group", id=paste("PLN_AREA_N"),
          style = "pretty",
          palette = "Greens") +
  tm_borders(alpha = 0.7)
```

## 3. Inferential - ANOVA

```{r anova data, warning=FALSE, message=FALSE}
T3.5 <- readRDS(file = "RDS/T3-5.rds")
consumption <- T3.5
consumption <- consumption %>% 
  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% 
  mutate(year = as.character(year))
saveRDS(consumption, file = "RDS/anova.rds")
```

### 3.1 Box plot anova

```{r anova box plot, warning=FALSE, message=FALSE}
# LIBRARY -----------------------------------------------------------------

packages = c('dplyr', 'ggplot2',
             'ggstatsplot', 'ggrepel', 'ggridges', 'gt', 'gtExtras',
             'knitr','plotly', 'lubridate', 'psych','ggstatsplot',
             'reactablefmtr', 'readr', 'sf', 'shiny', 'shinydashboard',
             'shinythemes', 'shinyWidgets', 'stats', 'tibble', 'tidymodels',
             'tidyquant', 'tidyr', 'tidyverse'
            )

for(p in packages){
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}

# READ DATA ---------------------------------------------------------------
## Read compressed data file
T2.3 <- readRDS(file = "RDS/T2-3.rds") # Peak System Demand
T3.4 <- readRDS(file = "RDS/T3-4.rds") # Total Household Electricity Consumption by Dwelling Type
T3.5 <- readRDS(file = "RDS/T3-5.rds") # Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
dwelling <- readRDS(file = "RDS/dwelling.rds")
town <- readRDS(file = "RDS/town.rds")

# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414)

# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
singapore <- st_transform(mpsz, 4326)


# PARAMETER ---------------------------------------------------------------
years <- c("2022","2021", "2020", "2019", "2018", "2017")
regions <- c( "Central Region", "North East Region", "East Region", "North Region", "West Region")


# UI ----------------------------------------------------------------------
ui = dashboardPage(
  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
  
  dashboardSidebar(width = 210,
                   sidebarMenu(
                     menuItem(" INFERENTIAL STATISTICS",  
                              tabName = "inferential", 
                              icon = icon("magnifying-glass-chart")
                              )
                   )
  ),
  dashboardBody(
    tabItems(
      
      ## 3 INFERENTIAL STATISTICS ------------------------------------------------
      tabItem(
        tabName = "inferential",
        navbarPage("INFERENTIAL STATISTICS", 
                   
                   ### 3.1 anova ---------------------------------------------
                   tabPanel("ANOVA",
                            fluidPage(
                              fluidRow(
                                column(5,
                                       pickerInput(inputId = "anovainput", 
                                                   label = "Select Parameter",
                                                   choices = c("dwelling_type", "Region", "year"), 
                                                   selected = "dwelling_type",
                                                   options = list(`actions-box` = TRUE), 
                                                   multiple = F),
                                       verbatimTextOutput("anovastat")
                                ),
                                column(7, plotOutput("dwellingstat"))
                              ),
                              
                              fluidRow(
                                column(5,
                                       pickerInput(inputId = "region", 
                                                   label = "Select Region",
                                                   choices = regions, 
                                                   selected = "Central Region",
                                                   options = list(`actions-box` = TRUE), 
                                                   multiple = F),
                                       verbatimTextOutput("anovastat2")
                                ),
                                column(7, plotOutput("dwellingstat2"))
                              )
                            ))
        ))
    ) #close tabItems
  ) #close dashboard body
) #close UI

# SERVER ------------------------------------------------------------------

server = function(input, output, session) {
  
  # anova -----------------------------------------------------------------
  consumption <- T3.5
  consumption <- consumption %>% 
    mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% 
    mutate(year = as.character(year))
  
  observeEvent(input$anovainput,{
    if(input$anovainput == "Region"){output$dwellingstat <- renderPlot({
      consumption %>%
        mutate(class = fct_reorder(Region, kwh_per_acc, .fun='mean')) %>%
        ggplot( aes(x=reorder(Region, kwh_per_acc), y=kwh_per_acc)) +
        geom_boxplot() +
        stat_summary(fun.y=mean, geom="point", color="red") +
        theme(legend.position="none") +
        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
        ggtitle("Boxplot of consumption per planning area")
    })
    }
    if(input$anovainput == "year") {
  output$dwellingstat <- renderPlot({
    ggbetweenstats(
  data = consumption,
  x = year,
  y = kwh_per_acc,
  # type = "np",
  messages = FALSE
)
})}
    if(input$anovainput == "dwelling_type"){output$dwellingstat <- renderPlot({
      consumption %>%
        mutate(class = fct_reorder(dwelling_type, kwh_per_acc, .fun='mean')) %>%
        ggplot( aes(x=reorder(dwelling_type, kwh_per_acc), y=kwh_per_acc)) +
        geom_boxplot() +
        stat_summary(fun.y=mean, geom="point", color="red") +
        theme(legend.position="none") +
        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
        ggtitle("Boxplot of consumption per planning area")
    })}
    if(input$anovainput == "dwelling_type"){
      output$anovastat <- renderPrint({
        summary(aov(kwh_per_acc ~ dwelling_type, data = consumption))
      })}
    if(input$anovainput == "Region"){
      output$anovastat <- renderPrint({
        summary(aov(kwh_per_acc ~ Region, data = consumption))
      })}
    if(input$anovainput == "year"){
      output$anovastat <- renderPrint({
        summary(aov(kwh_per_acc ~ year, data = consumption))
      })}
  })
  
  # anova2 ---------------------------------------------------------------------
  observeEvent(input$region,{
    output$dwellingstat2 <- renderPlot({
      consumption %>%
        filter(Region==input$region) %>% 
        mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%
        ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +
        geom_boxplot() +
        stat_summary(fun.y=mean, geom="point", color="red") +
        theme(legend.position="none") +
        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
        ggtitle("Boxplot of consumption per planning area")
    })
    
    output$anovastat2 <- renderPrint({
      consumption %>% 
        filter(Region == input$region)
      summary(aov(kwh_per_acc ~ Description, data = consumption))
    })
  })
}

shinyApp(ui = ui, server = server)
```

### 3.2 Betweenstats plot anova

```{r anova betweenstats, message=FALSE, warning=FALSE}

```

## 4. Time series forecasting

```{r}

```
