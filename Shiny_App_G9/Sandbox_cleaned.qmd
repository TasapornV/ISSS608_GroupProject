---
title: "Project sandbox"
subtitle: "Uncover Singapore electricity consumption"
author: "Tasaporn Visawameteekul, Law Shiang Row, Khoo Wei Lun"
date: "29 March 2023"
date-modified: "`r Sys.Date()`"
affiliation: "SMU MITB"
execute:
  warning: false
  error: false
  message: false
format: 
  html:
    mainfont: system-ui
    fontsize: medium
    code-fold: false
    code-block-border-left: "#63B9A0"
    code-overflow: wrap
    highlight-style: solarized
    page-layout: full
    number-sections: true
    title-block-banner: true
    fig-align: center
    reader-mode: true
---

## Install and launching R packages

```{r init, results='hide', message=FALSE}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}
```

## Read data and compress in RDS file

We use the **`readr`** package in R to read three CSV files and store them as data frames in the variables **`T2.3`**, **`T3.4`**, and **`T3.5`**. Here's a brief explanation of what each line does:

1.  **`library(readr)`**: This line loads the **`readr`** package, which provides functions for reading and writing delimited files in R.
2.  **`T2.3 <- read_csv("data/T2-3.csv")`**: This line reads the CSV file located at **`"data/T2-3.csv"`** using the **`read_csv()`** function from the **`readr`** package. The resulting data frame is stored in the variable **`T2.3`**.
3.  **`T3.4 <- read_csv("data/T3-4.csv")`**: This line reads the CSV file located at **`"data/T3-4.csv"`** using the **`read_csv()`** function from the **`readr`** package. The resulting data frame is stored in the variable **`T3.4`**.
4.  **`T3.5 <- read_csv("data/T3-5.csv")`**: This line reads the CSV file located at **`"data/T3-5.csv"`** using the **`read_csv()`** function from the **`readr`** package. The resulting data frame is stored in the variable **`T3.5`**.

```{r read data, warning=FALSE, message=FALSE}
# library(readr)

# Peak System Demand
T2.3 <- read_csv("data/T2-3.csv")
# Total Household Electricity Consumption by Dwelling Type
T3.4 <- read_csv("data/T3-4.csv")
# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
T3.5 <- read_csv("data/T3-5.csv")
```

### Data table

This section provides a summary of the data tables utilized in the project, offering insight into the original data's appearance. The project employs three tables, namely

-   T2.3 peak system demand
-   T3.4 Total household electricity consumption by dwelling type
-   T3.5 Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type"

T2.3 : Peak System Demand

```{r T2.3, echo=FALSE}
#| fig-width: 10
head(T2.3, 5)
```

T3.4 : Total Household Electricity Consumption by Dwelling Type

```{r T3.4, echo=FALSE}
#| fig-width: 10
head(T3.4, 5)
```

T3.5 : Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type

```{r T3.5, echo=FALSE}
#| fig-width: 10
head(T3.5, 5)
```

## 1 Overview

### 1.1 Introduction

```{r 1.1 Introduction, warning=FALSE, message=FALSE, output=FALSE}
library(shiny)
library(shinydashboard)

introtext = "Singapore has progressively moved towards an open electricity market since 2001 
to ensure a reliable energy supply and promote effective competition in the energy market.
However, it is challenging to analyze the energy market and make informed decisions due to 
several variable components that could influence the market. First, the price of electricity 
in the wholesale market fluctuates depending on the electricity demand and supply, which are 
dependent on consumption patterns as well as gas industry respectively. About 95% of electricity 
is generated using natural gas. Next, there are also multiple parties (Electricity Market Authority, 
Power generation companies, Electricity Retailers, etc) involved in the electricity market.
To address this challenge, we build this RShinny app to provide relevant stakeholders with means 
to analyse and understand the data with applicable analytics models. Also, we want to help the 
users explore more information about the Singapore energy market easily through visualizations."

ui = dashboardPage(
  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
  
  dashboardSidebar(width = 210,
                   sidebarMenu(
                     menuItem(" OVERVIEW", tabName = 'overview',    icon = icon("chalkboard-user"))
                   )),
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "overview",
        navbarPage( "OVERVIEW",
                    
                    tabPanel("Introduction",introtext)
        )
      )
    )
  )
)
server = function(input, output, session) {}

shinyApp(ui = ui, server = server)
```

### 1.2 Geofacet

This code visualizes data related to household electricity consumption in Singapore. The application imports data from the T3.5 table and subsets it to exclude certain regions and types of housing, as well as convert certain columns to appropriate data types. The code then reads a shapefile that represents Singapore's subzones and imports an area grid data file.

The user interface (UI) of the application shows the average monthly household electricity consumption by planning area and dwelling type. The user can choose to fix or free the y-axis scale.

The server function includes a reactive expression that groups the data by year, dwelling type, and planning area to compute the average electricity consumption per account. The data is then merged with the area grid data file to obtain the spatial information necessary for plotting. The output plot is generated using ggplot2 and geofacet packages, which enable the use of subplots based on a grid of geographic regions. The output plot is reactive to changes made in the user interface.

```{r 1.2 Geofacet, warning=FALSE, message=FALSE, output=FALSE}
library(shiny)
library(shinydashboard)
library(geofacet)
library(sf)

town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' & 
                 Description !='East Region' & Description !='North East Region' &
                 Description !='North Region' & Description !='West Region' &
                 kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
                 dwelling_type != 'Public Housing' & month != 'Annual') %>%
  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
  mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))


# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414)

# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
singapore <- st_transform(mpsz, 4326)

ui = dashboardPage(
  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
  
  dashboardSidebar(width = 210,
                   sidebarMenu(
                     menuItem(" OVERVIEW", tabName = 'overview',    icon = icon("chalkboard-user"))
                   )),
  dashboardBody(
    tabItems(
      tabItem(
        tabName = "overview",
        navbarPage( "OVERVIEW",
                    tabPanel("Consumption by Planning Area & Dwelling Type",
                            fluidPage(
                              radioButtons("axis", label = "select axis control",
                                           choices = c("fixed y-axis" = "fixed",
                                                       "free y-axis" = "free_y"), 
                                           inline = T),
                              plotOutput("geo", height = 800)
                            ))
        )
      )
    )
  )
)

server = function(input, output, session) {
   geofacet <- town %>% 
        group_by(year, dwelling_type, Description)  %>%
        summarise(average_consumption = mean(kwh_per_acc, na.rm = TRUE))%>%
        ungroup()
  geofacet_gas_consump <- inner_join(geofacet, area_grid,
                                     by = c("Description" = "name"))
  # merge table with town name
  common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
  
  observeEvent(input$axis,{
    
    output$geo <- renderPlot ({
      ggplot(geofacet_gas_consump, aes(x = year, y = average_consumption)) +
        geom_line(aes(color = as.factor(dwelling_type))) +
        facet_geo(~Description, grid = common_grid, scales = input$axis) +
        labs(title = "Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type") +
        theme(plot.title = element_text(size=22),
              axis.text.x = element_text(size = 10, angle = 45),
              axis.text.y = element_text(size = 10),
              strip.text = element_text(size = 10),
              legend.position = "right")
    })
  })
}

shinyApp(ui = ui, server = server)
```

![](page%201.png){fig-align="center"}

### 1.3 Consumption by Dwelling type and Town

This code loads the data from a data frame "T3.4" and filters it based on certain conditions such as the year, month, and dwelling type. The resulting data frame is stored in a new variable called "dwelling".

The code then adds a new column called "class" to the "dwelling" data frame based on whether the dwelling type is "Private Apartments and Condominiums", "Landed Properties", or "Others" or whether it is "1-room / 2-room", "3-room", "4-room", or "5-room and Executive". The values in the "class" column are set to "Private" or "Public" based on the dwelling type.

Finally, the "dwelling" data frame is saved as an RDS file called "dwelling.rds" in the "RDS" folder and then read back into the R environment using the "readRDS" function. The first five rows of the resulting data frame are displayed using the "head" function.

```{r introduction dataprep, warning=FALSE, message=FALSE}

dwelling <- T3.4 %>%
  filter(year %in% c(2005:2022)) %>%
  filter(month %in% c(1:12)) %>%
  filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
                              '5-room and Executive',
                              'Private Apartments and Condominiums',
                              'Landed Properties', 'Others')) %>%
  mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))

#Add Private vs Public Classification
dwelling$class <- case_when(
    dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',
                                 'Landed Properties', 'Others') ~ "Private",
    dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
                                  '5-room and Executive') ~ "Public")

saveRDS(dwelling, file = "RDS/dwelling.rds")

dwelling <- readRDS(file = "RDS/dwelling.rds") # intro

head(dwelling, 5)
```

This code is processing and filtering data related to electricity consumption in different towns, and then saving the selected data to an RDS file.

The code starts by subsetting a data frame called T3.5 using the subset() function. The resulting data frame is called "town". The subset() function removes rows with certain conditions using logical operators. Rows where the "Description" column is equal to 'Overall', 'Central Region', 'East Region', 'North East Region', 'North Region', 'West Region' are removed. Rows with 's' in the "kwh_per_acc" column and rows where the "dwelling_type" column is equal to 'Private Housing' or 'Public Housing' are also removed. Finally, rows with the "month" column equal to 'Annual' are removed.

The next step is to mutate the "town" data frame. First, the "kwh_per_acc" column is converted to numeric using the as.numeric() function. Next, a new "date" column is created by combining the "year" and "month" columns and converting it to a date using the parse_date_time() function.

The "town" data frame is then grouped by "date" and "Description" columns and the "summarise" function is used to calculate the sum of "kwh_per_acc" divided by 1000. The resulting data frame is called "town_final".

The "town_final" data frame is then manipulated using the pipe operator (%\>%) and several mutate() functions. First, a new column called "type" is created by copying the "Description" column. Then, a new column called "title" is created with the value 'Town'. The "year" and "month" columns are extracted from the "date" column using the year() and month() functions. Finally, a new data frame is created by selecting only certain columns.

The resulting data frame is saved to an RDS file using the saveRDS() function. Finally, the first five rows of the resulting data frame are printed using the head() function.

```{r data prep2, warning=FALSE, message=FALSE}
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' & 
                 Description !='East Region' & Description !='North East Region' &
                 Description !='North Region' & Description !='West Region' &
                 kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
                 dwelling_type != 'Public Housing' & month != 'Annual') %>%
  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
  mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))

town_final <- town %>% 
  group_by(date, Description) %>%
  summarise(consumption = sum(kwh_per_acc)/1000)

chosendata <- town_final %>%
  mutate(type = Description) %>%
  mutate(title = 'Town') %>%
  mutate(year = year(date)) %>%
  mutate (month = month(date)) %>%
  select(c('year','month','date','type','consumption','title'))
saveRDS(chosendata, file = "RDS/chosendata.rds")

head(chosendata, 5)
```

#### Plot 1 - Line plot

This code creates a line plot using ggplot to show the electricity consumption over time for a chosen data set. The data is stored in the RDS file "chosendata.rds" and is loaded using the **`readRDS()`** function.

The **`ggplot()`** function is called and the **`data`** argument is set to **`chosendata`**, which contains the data to be plotted. The **`aes()`** function is used to specify the aesthetics of the plot. The x-axis is set to **`date`** and the y-axis is set to **`consumption`**, with lines colored according to the **`type`** of consumption.

The **`geom_line()`** function is called to add the lines to the plot. The **`labs()`** function is used to add a title to the plot, as well as labels for the x and y axes. The **`scale_color_discrete()`** function is used to change the name of the legend for the line colors, and the **`theme()`** function is used to change the position of the legend to the bottom of the plot.

```{r 1.3.1 Line plot, warning=FALSE, message=FALSE}
chosendata <- readRDS(file = "RDS/chosendata.rds") # intro
ggplot(data = chosendata, aes(x = date)) +
  geom_line(aes(y = consumption, colour = type)) + 
  labs(title = paste0("Electricity Consumption by ",chosendata[1,6]),
      x = "Year", y = paste0("Consumption, GWh ")) +
  scale_color_discrete(name="") +
  theme(legend.position="bottom")
```

#### Plot 2 - Cycle plot

```{r 1.3.2 Cycle plot, warning=FALSE, message=FALSE}
select_type <- 'Bishan'
select_cycle <- chosendata %>% 
  filter(type %in% c(select_type)) %>%
  mutate(year = factor(year, levels = 2005:2022),
         month = factor(month, levels = 1:12))

#Computing year average by months
hline.data <- select_cycle %>%
  group_by(month) %>%
  summarise(avg_cons = mean(consumption))

#Plotting cycle plot for electricity consumption per dwelling type
ggplot() + 
  geom_line(data = select_cycle,
            aes(x=year,y=consumption, group=month), colour = "black") +
  geom_hline(data = hline.data,
             aes(yintercept=avg_cons),
             linetype=6, 
             colour="red", 
             linewidth=0.5) +
  facet_grid(~month) +
  theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
  labs(title = paste0("Cycleplot for Chosen ",chosendata[1,6],"'s Consumption (GWh) , Jan 2005-Jun 2022"),
       subtitle = paste0(chosendata[1,6],": ",select_type)) +
  scale_x_discrete(breaks=c("2005","2010","2015","2020")) +
  xlab("") +
  ylab("Consumption, GWh")
```

#### Plot 3 - Sparkline Table

```{r 1.3.3 Sparkline table, warning=FALSE, message=FALSE}

```

#### Plot 4 - Slopegraph

```{r 1.3.4 Slope graph, warning=FALSE, message=FALSE}

```

## 2. Clustering

### 2.1 Hierachical clustering

```{r clustering data prep, warning=FALSE, message=FALSE}
library(lubridate)

T3.5 <- read_csv("data/T3-5.csv")
clus_data <- T3.5 %>% 
  filter(month != "Annual" & 
           year > 2017 & 
           dwelling_type != "Overall" &
           !str_detect(Description,"Region|Pioneer|Overall"))

# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m")) 

# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
  arrange(date)

# pivot wider
clus <- clus_data %>%
  pivot_wider(names_from=date, values_from=kwh_per_acc) 

# omit na
clus <- na.omit(clus)
clus <- clus %>% relocate(Description, .before = dwelling_type)

saveRDS(clus_data, file = "RDS/clus_data.rds")
saveRDS(clus, file = "RDS/clus.rds")

clus_data <- readRDS(file = "RDS/clus_data.rds") # clustering
clus <- readRDS(file = "RDS/clus.rds") # clustering
head(clus_data, 5)
head(clus, 5)
```

#### Plot 1 - Method selection table

```{r 2.1.1 Method selection table, warning=FALSE, message=FALSE}
# once user have gotten the clustering method from above, they need to input that to find the optimal number of k
library(dendextend)
library(BBmisc)
clus_group1 <- clus[,-c(2)] %>%
  group_by(Description) %>%
  summarise_each(list(sum))

clustering <- dist(normalize(clus_group1[, -1]),  method = "maximum")
dend_expend(clustering)[[3]]
```

#### Plot 2 - Heatmap

```{r 2.1.2 Heatmap, warning=FALSE, message=FALSE}
library(heatmaply)
clus_group1 <- clus[,-c(2)] %>%
  group_by(Description) %>%
  summarise_each(list(sum))

# making "Description" the row name (index)
row.names(clus_group1) <- clus_group1$Description

# Making it into a matrix
clus_matrix1 <- data.matrix(clus_group1)

# plot
heatmaply(clus_matrix1[,-c(1)],
          scale = "column",
          dist_method = "euclidean",
          hclust_method = "average",
          Colv=NA,
          seriate = "none",
          k_row = 3,
          margins = c(NA,200,50,NA),
          colors = viridis(
            n= 256, alpha=1, 
            begin=0, end=1,
            option="viridis"),
          fontsize_row = 5,
          fontsize_col = 5,
          main="Hierarchical Clustering",
          ylab = "Towns",
          xlab = "Time")
```

#### Plot 3 - Number of cluster plot

```{r 2.1.3 Number of cluster plot, warning=FALSE, message=FALSE}
clust2 <- hclust(clustering, method = "mcquitty")
num_k <- find_k(clust2)
plot(num_k)
```

#### Plot 4 - Map

```{r 2.1.4 map, warning=FALSE, message=FALSE}
## Add clusters to dataframe

num_clus <- cutree(clust2, k=3)
clus_hc <- cbind(clus_group1, cluster = as.factor(num_clus))

library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414) 

singapore <- st_transform(mpsz, 4326)

library(tmap)
# change Description to upper case
clus_hc$Description <- toupper(clus_hc$Description)

# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus_hc, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
  tmap_options(check.and.fix = TRUE)+
  tm_fill("cluster", id=paste("PLN_AREA_N"),
          style = "pretty",
          palette = "Blues") +
  tm_borders(alpha = 0.7)
```

### 2.2 Time Series clustering

```{r 2.2 Time series clustering}
library(dtwclust)
library(tibble)
library(ggdendro)

# Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods
# parameter 1: Number of cluster (k)
# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 3: hierarchical clustering method ("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median" or "centroid" .)


cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
                       type = "h", 
                       k=2,
                       distance="dtw",
                       control = hierarchical_control(method = "ward.D"),
                       preproc = NULL,
                       args=tsclust_args(dist = list(window.size = 5L)))

hclus_dtw <- cutree(cluster_dtw, k=4) %>%
  as.data.frame(.) %>%
  rename(.,cluster_group = .) %>%
  rownames_to_column("type_col")

# hcdata <- dendro_data(cluster_dtw)
# names_order <- hcdata$labels$label

library(ggplot2)
library(ggiraph)
library(timetk)

# add the cluster number
dtw_cluster <- clus_group1 %>%
  left_join(hclus_dtw, by=c("Description" = "type_col")) 

# change date columns into rows
dtw_cluster_t <- dtw_cluster %>%
  mutate_at(vars(contains("202")),as.numeric) %>%
  gather(Date, value, 2:55)

# Add the word "Cluster"
dtw_cluster_t$cluster_group <- paste("Cluster", dtw_cluster_t$cluster_group)

# convert Date into date format
dtw_cluster_t$Date <- parse_date_time(dtw_cluster_t$Date, orders=c("%Y-%m-%d")) 

# plot time series by cluster

ts <- plot_time_series(.data=dtw_cluster_t,
                 .date_var=Date, 
                 .value=value,
                 .color_var=Description,
                 .facet_var=cluster_group,
                 .facet_ncol=2,
                 .facet_scales = "free_y",
                 .smooth=FALSE,
                 .line_size = 0.3,
                 .plotly_slider = TRUE,
                 .title = "Time Series Plot by cluster") 

ts <- ts %>%
  layout(hovermode="x",
         hoverlabel=list(font=list(size=7)))
ts

# how to modify the tooltip? Town is being shown twice here...

library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414) 

singapore <- st_transform(mpsz, 4326)

library(tmap)
# change Description to upper case
dtw_cluster_t$Description <- toupper(dtw_cluster_t$Description)

# Preparing the choropleth map
mpsz_clus_dtw <- left_join(singapore, dtw_cluster_t, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus_dtw)+
  tmap_options(check.and.fix = TRUE)+
  tm_fill("cluster_group", id=paste("PLN_AREA_N"),
          style = "pretty",
          palette = "Greens") +
  tm_borders(alpha = 0.7)
```

## 3. Inferential - ANOVA

```{r anova data, warning=FALSE, message=FALSE}
T3.5 <- readRDS(file = "RDS/T3-5.rds")
consumption <- T3.5
consumption <- consumption %>% 
  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% 
  mutate(year = as.character(year))
saveRDS(consumption, file = "RDS/anova.rds")
```

### 3.1 Box plot anova

```{r anova box plot, warning=FALSE, message=FALSE, output=FALSE}
# LIBRARY -----------------------------------------------------------------
# library(forecast)
# library(dplyr)
# library(tidyr)
# library(tidyverse)

packages = c('dplyr', 'ggplot2',
             'ggstatsplot', 'ggrepel', 'ggridges', 'gt', 'gtExtras',
             'knitr','plotly', 'lubridate', 'psych','ggstatsplot',
             'reactablefmtr', 'readr', 'sf', 'shiny', 'shinydashboard',
             'shinythemes', 'shinyWidgets', 'stats', 'tibble', 'tidymodels',
             'tidyquant', 'tidyr', 'tidyverse'
            )

for(p in packages){
  if(!require(p,character.only = T)){
    install.packages(p)
  }
  library(p,character.only = T)
}

# READ DATA ---------------------------------------------------------------
## Read compressed data file
T2.3 <- readRDS(file = "RDS/T2-3.rds") # Peak System Demand
T3.4 <- readRDS(file = "RDS/T3-4.rds") # Total Household Electricity Consumption by Dwelling Type
T3.5 <- readRDS(file = "RDS/T3-5.rds") # Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
dwelling <- readRDS(file = "RDS/dwelling.rds")
town <- readRDS(file = "RDS/town.rds")

# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
                layer = 'MP14_SUBZONE_WEB_PL',
                crs = 3414)

# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
singapore <- st_transform(mpsz, 4326)


# PARAMETER ---------------------------------------------------------------
years <- c("2022","2021", "2020", "2019", "2018", "2017")
regions <- c( "Central Region", "North East Region", "East Region", "North Region", "West Region")


# UI ----------------------------------------------------------------------
ui = dashboardPage(
  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
  
  dashboardSidebar(width = 210,
                   sidebarMenu(
                     menuItem(" INFERENTIAL STATISTICS",  
                              tabName = "inferential", 
                              icon = icon("magnifying-glass-chart")
                              )
                   )
  ),
  dashboardBody(
    tabItems(
      
      ## 3 INFERENTIAL STATISTICS ------------------------------------------------
      tabItem(
        tabName = "inferential",
        navbarPage("INFERENTIAL STATISTICS", 
                   
                   ### 3.1 anova ---------------------------------------------
                   tabPanel("ANOVA",
                            fluidPage(
                              fluidRow(
                                column(5,
                                       pickerInput(inputId = "anovainput", 
                                                   label = "Select Parameter",
                                                   choices = c("dwelling_type", "Region", "year"), 
                                                   selected = "dwelling_type",
                                                   options = list(`actions-box` = TRUE), 
                                                   multiple = F),
                                       verbatimTextOutput("anovastat")
                                ),
                                column(7, plotOutput("dwellingstat"))
                              ),
                              
                              fluidRow(
                                column(5,
                                       pickerInput(inputId = "region", 
                                                   label = "Select Region",
                                                   choices = regions, 
                                                   selected = "Central Region",
                                                   options = list(`actions-box` = TRUE), 
                                                   multiple = F),
                                       verbatimTextOutput("anovastat2")
                                ),
                                column(7, plotOutput("dwellingstat2"))
                              )
                            ))
        ))
    ) #close tabItems
  ) #close dashboard body
) #close UI

# SERVER ------------------------------------------------------------------

server = function(input, output, session) {
  
  # anova -----------------------------------------------------------------
  consumption <- T3.5
  consumption <- consumption %>% 
    mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% 
    mutate(year = as.character(year))
  
  observeEvent(input$anovainput,{
    if(input$anovainput == "Region"){output$dwellingstat <- renderPlot({
      consumption %>%
        mutate(class = fct_reorder(Region, kwh_per_acc, .fun='mean')) %>%
        ggplot( aes(x=reorder(Region, kwh_per_acc), y=kwh_per_acc)) +
        geom_boxplot() +
        stat_summary(fun.y=mean, geom="point", color="red") +
        theme(legend.position="none") +
        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
        ggtitle("Boxplot of consumption per planning area")
    })
    }
    if(input$anovainput == "year") {
  output$dwellingstat <- renderPlot({
    ggbetweenstats(
  data = consumption,
  x = year,
  y = kwh_per_acc,
  # type = "np",
  messages = FALSE
)
})}
    if(input$anovainput == "dwelling_type"){output$dwellingstat <- renderPlot({
      consumption %>%
        mutate(class = fct_reorder(dwelling_type, kwh_per_acc, .fun='mean')) %>%
        ggplot( aes(x=reorder(dwelling_type, kwh_per_acc), y=kwh_per_acc)) +
        geom_boxplot() +
        stat_summary(fun.y=mean, geom="point", color="red") +
        theme(legend.position="none") +
        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
        ggtitle("Boxplot of consumption per planning area")
    })}
    if(input$anovainput == "dwelling_type"){
      output$anovastat <- renderPrint({
        summary(aov(kwh_per_acc ~ dwelling_type, data = consumption))
      })}
    if(input$anovainput == "Region"){
      output$anovastat <- renderPrint({
        summary(aov(kwh_per_acc ~ Region, data = consumption))
      })}
    if(input$anovainput == "year"){
      output$anovastat <- renderPrint({
        summary(aov(kwh_per_acc ~ year, data = consumption))
      })}
  })
  
  # anova2 ---------------------------------------------------------------------
  observeEvent(input$region,{
    output$dwellingstat2 <- renderPlot({
      consumption %>%
        filter(Region==input$region) %>% 
        mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%
        ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +
        geom_boxplot() +
        stat_summary(fun.y=mean, geom="point", color="red") +
        theme(legend.position="none") +
        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +
        ggtitle("Boxplot of consumption per planning area")
    })
    
    output$anovastat2 <- renderPrint({
      consumption %>% 
        filter(Region == input$region)
      summary(aov(kwh_per_acc ~ Description, data = consumption))
    })
  })
}

shinyApp(ui = ui, server = server)
```

### 3.2 Betweenstats plot anova

```{r anova betweenstats, message=FALSE, warning=FALSE}

```

## 4. Time series forecasting

```{r}

```
