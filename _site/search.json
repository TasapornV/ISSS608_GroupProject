[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Team",
    "section": "",
    "text": "Khoo Wei Lun \nLaw Shiang Rou \nTasaporn Visawameteekul"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to ISSS608 Visual Analytics and Applications. Group project homepage"
  },
  {
    "objectID": "MOM.html",
    "href": "MOM.html",
    "title": "Minute of Meeting",
    "section": "",
    "text": "0.1 Meeting Minutes 1\n\n\n\n\n\n\nDate: 14 Jan 2023\nPresent: KHOO Wei Lun, LAW Shiang Rou, Tasaporn VISAWAMETEEKUL\nAbsent: NIL\nMinute taker: LAW Shiang Rou\nObjective: Explore topics and datasets for group project\n\n\n\nDiscussion Points \nA few topics and datasets have been considered during the discussion: \nEnergy-related data  \nData source:\n\nhttps://www.ema.gov.sg/singapore-energy-statistics/\nhttps://www.singstat.gov.sg/find-data/search-by-theme/industry/energy-and-utilities/latest-data\n\nDiscussion points:\n\nThis website provides statistics on Singapore energy sector, including the energy supply, consumption and prices. \nThis might be an interesting area of interest both from the supplier and consumer perspective but a valid and strong use case has to be established.\n\n\nOne possible use case is to help carve a plan to encourage energy conservation\nWe can also consider combining these data with sustainability-related data for more insights.\n\nSingapore Economy data\nDiscussion points:\nData source: https://www.singstat.gov.sg/find-data/search-by-theme?theme=economy&type=all\n\nWe can explore some of the Singapore economy data available on Singstats  \nWe can try think of some fresh perspectives that we can offer using these common data. \n\nEzlink data\nData source: TBC\nDiscussion points:\n\nExplore the use of EZlink data to help in planning of public transport route optimization.\n\nTransformation of Singapore population\nData source: https://www.singstat.gov.sg\nDiscussion points:\n\nUsing the demographic data available on Singstat, we can plot different visualization to showcase the transformation of Singapore population in terms of education level, gender distribution, races, languages, income, consumption preferences and so on.\n\nAction Items\n\nAll to explore more on above 4 proposed topics or suggest new topic\n\nNext meeting 21 Jan 2023\n\n\n\n0.2 Minute of Meeting 2\n\n\n\n\n\n\nDate: 28 Jan 2023\nPresent: KHOO Wei Lun, LAW Shiang Rou, Tasaporn VISAWAMETEEKUL\nAbsent: NIL\nMinute taker: KHOO Wei Lun\nObjective: Reviewing individual ideas from ideation, explore potential spin-off\n\n\n\nDiscussion Points\nExplore ways to spin-off current idea and to discuss\n\nVisualize Singapore transformation for areas of interests\n\n\nSuch as education, wealth of the city, etc.\nPotential challenges on predictive\nAdvantage: large dataset and multiple areas to explore \n\n\nLow birth rate \n\n\nFind out the cause of low birth rates \nHypothesis: CPI vs Income\nPotential area\nComparison with other countries is also possible (similar traits among with\n\n\nGlobal cost of living\n\n\nLimited by few input parameters\nPossible to combine with ‘Low birth rate’\nNot able to standalone\n\n\nTwitter topic analysis\n\n\nToo challenging to visualize\n\n\nNext million dollar HDB\n\n\nFind factors that might be correlated in driving the HDB price up.\nExplore realis dataset\n\n\nVisualisation of election votes of different years\n\n\nExplore whether demographics\nPossible but challenging to show how election areas had changed over time\nNeed to find more dataset that can be visualized and correlate.\n\n\nSingapore Energy\n\n\nHow energy sources in Singapore have evolved from the past (however, the sources might not have changed significantly over time)\nLimitation in understanding of how the markets work.\n\n\nWaste to Energy\n\n\nExplore how different wastes had been transformed in Singapore\nHow much waste are Singapore generating in each categories\n% of waste being transformed into\n\n\nOnline Retail\n\n\nSegmentation of customers\nFrequent pattern mining\n\nChoosing of projects\n\nChoosing topics that are more familiar for us (e.g. Singapore)\nEliminated\ntwitter topic analysis (not able to visualize)\nSingapore energy (difficult to understand the mechanism – no area of expertise in this field in the team)\nNext million dollar HDB (similar topics had been done previous\nFinal top two ideas selected: Visualisation of election votes of different years and Low birth rate\n\nAction Items\n\nBook Prof Kam’s time to run through final project ideas.\nFind more possible factors that might correlate with election votes/results.\nFind dataset on low birth rate for other countries.\n\nNext meeting 31 Jan 2023\n\n\n\n0.3 Minute of Meeting 3 (Consultation session)\n\n\n\n\n\n\nDate: 31 Jan 2023\nPresent: KHOO Wei Lun, LAW Shiang Rou, Tasaporn VISAWAMETEEKUL\nAbsent: NIL\nMinute taker: Tasaporn VISAWAMETEEKUL\nObjective: Finalise the topics and dataset to seek for comments/inputs from Prof Kam\n\n\n\nDiscussion Points\n\nSeek for Prof.Kam advice on the problem statement selected and the possible concern on the dataset.\nProf’s advice: Problem statement is how to make full use of the data to gain insights (for data analyst)\nThe dataset from the competition has some concern about the missing data. Prof recommend using dataset which has rather complete data to build an application.\nProposal need to include:\n\ndata visualization sketch\npackages we plan to use\nanalysis we plan to do\n\n\nAction Items\n\nExplore DAL and other datasets suggested by Prof Kam\nFinalise dataset to move forward with the project\nBrainstorm on visual techniques that can be applied or explored\n\nNext meeting 4 Feb 2023\n\n\n\n0.4 Minute of Meeting 4\n\n\n\n\n\n\nDate: 4 Feb 2023 |\nPresent: KHOO Wei Lun, LAW Shiang Rou, Tasaporn VISAWAMETEEKUL\nAbsent: NIL\nMinute taker: Khoo Wei Lun |\nObjective: To draft an approach for the project |\n\n\n\nDiscussion Points\nCreate skeleton for project content:\n\nOverview of Singapore Electricity\n\nEstablish storyline\nExploratory data analysis\n\nContent\n\nKeep it open for user exploration\n\nInferential Analysis\n\nCorrelation with consumption: supply, price, planning area characteristics, demographics\nANOVA by months, regions, type of dwellings\n\nElectricity consumption pattern clustering\n\nElectricity consumption pattern clustering\nSpatial clustering - patterns of consumption, dwelling type, overall country\nTemporal clustering - grouping months by power consumption\n\nForecasting\n\nPrediction on price, consumption and supply\nTime series forecasting (ARIMA, ETS – enable selection)\n\n\nAction Items\n\nCreate shared git repository for the project\nSketch visualisation designs\nCreate first draft for proposal\n\nNext meeting 11 Feb 2023"
  },
  {
    "objectID": "Proposal.html",
    "href": "Proposal.html",
    "title": "Project proposal",
    "section": "",
    "text": "Singapore has progressively moved towards an open electricity market since 2001 to ensure a reliable energy supply and promote effective competition in the energy market.\nWith growing competition in the market, it becomes increasingly important for market players such as regulators, suppliers and retailers to understand the electricity consumption pattern in Singapore to ensure adequate supply planning and pricing structure.\nTo assist relevant market players in analyzing electricity consumption data effectively, we created this RShinny App to visualize Singapore electricity consumption pattern and trend, perform statistical analysis as well as forecast the future trends."
  },
  {
    "objectID": "Proposal.html#scope",
    "href": "Proposal.html#scope",
    "title": "Project proposal",
    "section": "2 Scope",
    "text": "2 Scope\nOur RShinny app allows users to interact with the data to:\n\nExplore the electricity consumption patterns and trends in Singapore,\nCluster planning areas based on similarities in consumption patterns,\nPerform inferential statistical analysis, and\nForecast future consumption trend.\n\nA detailed description and sketch of the proposed analyses and visualizations are presented in section 4 of this proposal."
  },
  {
    "objectID": "Proposal.html#data",
    "href": "Proposal.html#data",
    "title": "Project proposal",
    "section": "3 Data",
    "text": "3 Data\nThe data used in this project is extracted from Energy Market Authority (EMA) Singapore. It contains data between year 2005 and 2022, with a total of 35 tabs. The tabs are broadly categorized into 7 sections, namely:\n\nEnergy Supply\nEnergy Transformation\nEnergy Consumption\nEnergy Balances\nEnergy Prices\nSolar\nManpower\n\nFor this project, we will be focusing on household electricity consumption."
  },
  {
    "objectID": "Proposal.html#visualization-and-analysis",
    "href": "Proposal.html#visualization-and-analysis",
    "title": "Project proposal",
    "section": "4 Visualization and Analysis",
    "text": "4 Visualization and Analysis\n\n4.1 Overview Dashboard\nTo provide users some basic insights on the Singapore electricity consumption, an Overview tab is built for users to explore the electricity consumption by regions, planning areas and dwelling types. Changes over time are also visualized to provide users a more comprehensive view.\n\n4.1.1 Main R Packages & Functions\n\nggplot2: for descriptive visualization such as boxplots\nggiraph/plotly: for interactive visualization\ngeofacet: for visualization laid out according to the geographic topology\ntimetk: for time series visualization\n\n\n\n4.1.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.2 Clustering Analysis\nClustering analysis is performed to help users identify clusters with distinct consumption patterns. The clustering analysis is done using the consumption data for each planning area and dwelling type over time. This analysis will help stakeholders in future strategic planning activities such as supply planning and pricing.\n\n4.2.1 Main R Packages & Functions\n\ndtwclust: for time series clustering\ndendextend: to visualize and compare hierarchical clustering’s dendrogram\ntmap: representing clusters on interactive map visual\n\n\n\n4.2.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.3 Inferential Analysis\nWhen there are more than two sample groups, ANOVA (Analysis of Variance) is used to test if there are statistically significant differences between the means of these independent sample groups. In other words, it compares the means of different samples to determine the influence of one or more factors.\n[TBC] Correlation plots, also known as correlograms for more than two variables, facilitate the visualization of the correlation between continuous variables.[TBC]\n\n4.3.1 Main R Packages & Functions\n\nggplot2: for descriptive visualization such as boxplots\nggbetweenstats: A combination of box and violin plots along with jittered data points for between-subjects designs with statistical details included in the plot as a subtitle\nggcorrplot: Visualize a correlation matrix using ggplot2. It provides a solution for reordering the correlation matrix and displays the significance level on the correlogram. It includes also a function for computing a matrix of correlation p-values.\n\n\n\n4.3.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.4 Time Series Forecasting\nVarious predictive models are built onto the app for users to forecast the future consumption trends. The model accuracy and confidence level are also made available for users.\n\n4.4.1 Main R Packages & Functions\n\nmodeltime: The time series forecasting framework for use with the ‘tidymodels’ ecosystem. Models considered include ARIMA, Exponential Smoothing, SARIMA, Long Short-Term Memory and additional time series models from the ‘forecast’, ‘tseries’ and ‘prophet’ packages.\ntidymodels: a collection of packages for modeling and machine learning using tidyverse principles.\n\n\n\n4.4.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.5 Data\nA data view is introduced to provide the user with an overview of how the data appears. Users will be able to choose which table and columns to display.\n\n4.5.1 Visual Design"
  },
  {
    "objectID": "Proposal.html#project-timeline",
    "href": "Proposal.html#project-timeline",
    "title": "Project proposal",
    "section": "5 Project Timeline",
    "text": "5 Project Timeline"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html",
    "href": "Shiny_App_G9/Sandbox_cleaned.html",
    "title": "Project sandbox",
    "section": "",
    "text": "packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', \"tidyr\", \"readr\")\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#read-data-and-compress-in-rds-file",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#read-data-and-compress-in-rds-file",
    "title": "Project sandbox",
    "section": "2 Read data and compress in RDS file",
    "text": "2 Read data and compress in RDS file\nWe use the readr package in R to read three CSV files and store them as data frames in the variables T2.3, T3.4, and T3.5. Here’s a brief explanation of what each line does:\n\nlibrary(readr): This line loads the readr package, which provides functions for reading and writing delimited files in R.\nT2.3 <- read_csv(\"data/T2-3.csv\"): This line reads the CSV file located at \"data/T2-3.csv\" using the read_csv() function from the readr package. The resulting data frame is stored in the variable T2.3.\nT3.4 <- read_csv(\"data/T3-4.csv\"): This line reads the CSV file located at \"data/T3-4.csv\" using the read_csv() function from the readr package. The resulting data frame is stored in the variable T3.4.\nT3.5 <- read_csv(\"data/T3-5.csv\"): This line reads the CSV file located at \"data/T3-5.csv\" using the read_csv() function from the readr package. The resulting data frame is stored in the variable T3.5.\n\n\n# library(readr)\n\n# Peak System Demand\nT2.3 <- read_csv(\"data/T2-3.csv\")\n# Total Household Electricity Consumption by Dwelling Type\nT3.4 <- read_csv(\"data/T3-4.csv\")\n# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\nT3.5 <- read_csv(\"data/T3-5.csv\")\n\n\n2.1 Data table\nThis section provides a summary of the data tables utilized in the project, offering insight into the original data’s appearance. The project employs three tables, namely\n\nT2.3 peak system demand\nT3.4 Total household electricity consumption by dwelling type\nT3.5 Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type”\n\nT2.3 : Peak System Demand\n\n\n# A tibble: 5 × 3\n   year   mth peak_system_demand_mw\n  <dbl> <dbl>                 <dbl>\n1  2005     1                  5083\n2  2005     2                  5285\n3  2005     3                  5333\n4  2005     4                  5408\n5  2005     5                  5385\n\n\nT3.4 : Total Household Electricity Consumption by Dwelling Type\n\n\n# A tibble: 5 × 4\n  year  month DWELLING_TYPE consumption_GWh\n  <chr> <chr> <chr>                   <dbl>\n1 2005  1     Overall                  448.\n2 2005  2     Overall                  437.\n3 2005  3     Overall                  480.\n4 2005  4     Overall                  534.\n5 2005  5     Overall                  535 \n\n\nT3.5 : Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\n\n\n# A tibble: 5 × 6\n  dwelling_type    year month Region         Description    kwh_per_acc\n  <chr>           <dbl> <chr> <chr>          <chr>          <chr>      \n1 1-room / 2-room  2005 1     Central Region Bishan         104.9      \n2 1-room / 2-room  2005 1     Central Region Bukit Merah    140.7      \n3 1-room / 2-room  2005 1     Central Region Central Region 136.5      \n4 1-room / 2-room  2005 1     Central Region Geylang        148.5      \n5 1-room / 2-room  2005 1     Central Region Kallang        115.6"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#overview",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#overview",
    "title": "Project sandbox",
    "section": "3 1 Overview",
    "text": "3 1 Overview\n\n3.1 1.1 Introduction\n\nlibrary(shiny)\nlibrary(shinydashboard)\n\nintrotext = \"Singapore has progressively moved towards an open electricity market since 2001 \nto ensure a reliable energy supply and promote effective competition in the energy market.\nHowever, it is challenging to analyze the energy market and make informed decisions due to \nseveral variable components that could influence the market. First, the price of electricity \nin the wholesale market fluctuates depending on the electricity demand and supply, which are \ndependent on consumption patterns as well as gas industry respectively. About 95% of electricity \nis generated using natural gas. Next, there are also multiple parties (Electricity Market Authority, \nPower generation companies, Electricity Retailers, etc) involved in the electricity market.\nTo address this challenge, we build this RShinny app to provide relevant stakeholders with means \nto analyse and understand the data with applicable analytics models. Also, we want to help the \nusers explore more information about the Singapore energy market easily through visualizations.\"\n\nui = dashboardPage(\n  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),\n  \n  dashboardSidebar(width = 210,\n                   sidebarMenu(\n                     menuItem(\" OVERVIEW\", tabName = 'overview',    icon = icon(\"chalkboard-user\"))\n                   )),\n  dashboardBody(\n    tabItems(\n      tabItem(\n        tabName = \"overview\",\n        navbarPage( \"OVERVIEW\",\n                    \n                    tabPanel(\"Introduction\",introtext)\n        )\n      )\n    )\n  )\n)\nserver = function(input, output, session) {}\n\nshinyApp(ui = ui, server = server)\n\n\n\n3.2 1.2 Geofacet\nThis code visualizes data related to household electricity consumption in Singapore. The application imports data from the T3.5 table and subsets it to exclude certain regions and types of housing, as well as convert certain columns to appropriate data types. The code then reads a shapefile that represents Singapore’s subzones and imports an area grid data file.\nThe user interface (UI) of the application shows the average monthly household electricity consumption by planning area and dwelling type. The user can choose to fix or free the y-axis scale.\nThe server function includes a reactive expression that groups the data by year, dwelling type, and planning area to compute the average electricity consumption per account. The data is then merged with the area grid data file to obtain the spatial information necessary for plotting. The output plot is generated using ggplot2 and geofacet packages, which enable the use of subplots based on a grid of geographic regions. The output plot is reactive to changes made in the user interface.\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(geofacet)\nlibrary(sf)\n\ntown <- subset(T3.5, Description != 'Overall' & Description !='Central Region' & \n                 Description !='East Region' & Description !='North East Region' &\n                 Description !='North Region' & Description !='West Region' &\n                 kwh_per_acc != 's' & dwelling_type != 'Private Housing' &\n                 dwelling_type != 'Public Housing' & month != 'Annual') %>%\n  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%\n  mutate(date = parse_date_time(paste0(year, \"-\", month,\"-1\"),\"ymd\"))\n\n\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414)\n\n# Import the area grid data.\narea_grid <- read_csv(\"data/areagrid.csv\")\nsingapore <- st_transform(mpsz, 4326)\n\nui = dashboardPage(\n  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),\n  \n  dashboardSidebar(width = 210,\n                   sidebarMenu(\n                     menuItem(\" OVERVIEW\", tabName = 'overview',    icon = icon(\"chalkboard-user\"))\n                   )),\n  dashboardBody(\n    tabItems(\n      tabItem(\n        tabName = \"overview\",\n        navbarPage( \"OVERVIEW\",\n                    tabPanel(\"Consumption by Planning Area & Dwelling Type\",\n                            fluidPage(\n                              radioButtons(\"axis\", label = \"select axis control\",\n                                           choices = c(\"fixed y-axis\" = \"fixed\",\n                                                       \"free y-axis\" = \"free_y\"), \n                                           inline = T),\n                              plotOutput(\"geo\", height = 800)\n                            ))\n        )\n      )\n    )\n  )\n)\n\nserver = function(input, output, session) {\n   geofacet <- town %>% \n        group_by(year, dwelling_type, Description)  %>%\n        summarise(average_consumption = mean(kwh_per_acc, na.rm = TRUE))%>%\n        ungroup()\n  geofacet_gas_consump <- inner_join(geofacet, area_grid,\n                                     by = c(\"Description\" = \"name\"))\n  # merge table with town name\n  common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]\n  \n  observeEvent(input$axis,{\n    \n    output$geo <- renderPlot ({\n      ggplot(geofacet_gas_consump, aes(x = year, y = average_consumption)) +\n        geom_line(aes(color = as.factor(dwelling_type))) +\n        facet_geo(~Description, grid = common_grid, scales = input$axis) +\n        labs(title = \"Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\") +\n        theme(plot.title = element_text(size=22),\n              axis.text.x = element_text(size = 10, angle = 45),\n              axis.text.y = element_text(size = 10),\n              strip.text = element_text(size = 10),\n              legend.position = \"right\")\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n3.3 1.3 Consumption by Dwelling type and Town\nThis code loads the data from a data frame “T3.4” and filters it based on certain conditions such as the year, month, and dwelling type. The resulting data frame is stored in a new variable called “dwelling”.\nThe code then adds a new column called “class” to the “dwelling” data frame based on whether the dwelling type is “Private Apartments and Condominiums”, “Landed Properties”, or “Others” or whether it is “1-room / 2-room”, “3-room”, “4-room”, or “5-room and Executive”. The values in the “class” column are set to “Private” or “Public” based on the dwelling type.\nFinally, the “dwelling” data frame is saved as an RDS file called “dwelling.rds” in the “RDS” folder and then read back into the R environment using the “readRDS” function. The first five rows of the resulting data frame are displayed using the “head” function.\n\ndwelling <- T3.4 %>%\n  filter(year %in% c(2005:2022)) %>%\n  filter(month %in% c(1:12)) %>%\n  filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',\n                              '5-room and Executive',\n                              'Private Apartments and Condominiums',\n                              'Landed Properties', 'Others')) %>%\n  mutate(date = parse_date_time(paste0(year, \"-\", month,\"-1\"),\"ymd\"))\n\n#Add Private vs Public Classification\ndwelling$class <- case_when(\n    dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',\n                                 'Landed Properties', 'Others') ~ \"Private\",\n    dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',\n                                  '5-room and Executive') ~ \"Public\")\n\nsaveRDS(dwelling, file = \"RDS/dwelling.rds\")\n\ndwelling <- readRDS(file = \"RDS/dwelling.rds\") # intro\n\nhead(dwelling, 5)\n\n# A tibble: 5 × 6\n  year  month DWELLING_TYPE   consumption_GWh date                class \n  <chr> <chr> <chr>                     <dbl> <dttm>              <chr> \n1 2005  1     1-room / 2-room             6.3 2005-01-01 00:00:00 Public\n2 2005  2     1-room / 2-room             6   2005-02-01 00:00:00 Public\n3 2005  3     1-room / 2-room             6.1 2005-03-01 00:00:00 Public\n4 2005  4     1-room / 2-room             6.9 2005-04-01 00:00:00 Public\n5 2005  5     1-room / 2-room             6.8 2005-05-01 00:00:00 Public\n\n\nThis code is processing and filtering data related to electricity consumption in different towns, and then saving the selected data to an RDS file.\nThe code starts by subsetting a data frame called T3.5 using the subset() function. The resulting data frame is called “town”. The subset() function removes rows with certain conditions using logical operators. Rows where the “Description” column is equal to ‘Overall’, ‘Central Region’, ‘East Region’, ‘North East Region’, ‘North Region’, ‘West Region’ are removed. Rows with ‘s’ in the “kwh_per_acc” column and rows where the “dwelling_type” column is equal to ‘Private Housing’ or ‘Public Housing’ are also removed. Finally, rows with the “month” column equal to ‘Annual’ are removed.\nThe next step is to mutate the “town” data frame. First, the “kwh_per_acc” column is converted to numeric using the as.numeric() function. Next, a new “date” column is created by combining the “year” and “month” columns and converting it to a date using the parse_date_time() function.\nThe “town” data frame is then grouped by “date” and “Description” columns and the “summarise” function is used to calculate the sum of “kwh_per_acc” divided by 1000. The resulting data frame is called “town_final”.\nThe “town_final” data frame is then manipulated using the pipe operator (%>%) and several mutate() functions. First, a new column called “type” is created by copying the “Description” column. Then, a new column called “title” is created with the value ‘Town’. The “year” and “month” columns are extracted from the “date” column using the year() and month() functions. Finally, a new data frame is created by selecting only certain columns.\nThe resulting data frame is saved to an RDS file using the saveRDS() function. Finally, the first five rows of the resulting data frame are printed using the head() function.\n\ntown <- subset(T3.5, Description != 'Overall' & Description !='Central Region' & \n                 Description !='East Region' & Description !='North East Region' &\n                 Description !='North Region' & Description !='West Region' &\n                 kwh_per_acc != 's' & dwelling_type != 'Private Housing' &\n                 dwelling_type != 'Public Housing' & month != 'Annual') %>%\n  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%\n  mutate(date = parse_date_time(paste0(year, \"-\", month,\"-1\"),\"ymd\"))\n\ntown_final <- town %>% \n  group_by(date, Description) %>%\n  summarise(consumption = sum(kwh_per_acc)/1000)\n\nchosendata <- town_final %>%\n  mutate(type = Description) %>%\n  mutate(title = 'Town') %>%\n  mutate(year = year(date)) %>%\n  mutate (month = month(date)) %>%\n  select(c('year','month','date','type','consumption','title'))\nsaveRDS(chosendata, file = \"RDS/chosendata.rds\")\n\nhead(chosendata, 5)\n\n# A tibble: 5 × 6\n# Groups:   date [1]\n   year month date                type        consumption title\n  <dbl> <dbl> <dttm>              <chr>             <dbl> <chr>\n1  2005     1 2005-01-01 00:00:00 Ang Mo Kio         1.65 Town \n2  2005     1 2005-01-01 00:00:00 Bedok              2.05 Town \n3  2005     1 2005-01-01 00:00:00 Bishan             1.79 Town \n4  2005     1 2005-01-01 00:00:00 Bukit Batok        1.87 Town \n5  2005     1 2005-01-01 00:00:00 Bukit Merah        2.56 Town \n\n\n\n3.3.1 Plot 1 - Line plot\nThis code creates a line plot using ggplot to show the electricity consumption over time for a chosen data set. The data is stored in the RDS file “chosendata.rds” and is loaded using the readRDS() function.\nThe ggplot() function is called and the data argument is set to chosendata, which contains the data to be plotted. The aes() function is used to specify the aesthetics of the plot. The x-axis is set to date and the y-axis is set to consumption, with lines colored according to the type of consumption.\nThe geom_line() function is called to add the lines to the plot. The labs() function is used to add a title to the plot, as well as labels for the x and y axes. The scale_color_discrete() function is used to change the name of the legend for the line colors, and the theme() function is used to change the position of the legend to the bottom of the plot.\n\nchosendata <- readRDS(file = \"RDS/chosendata.rds\") # intro\nggplot(data = chosendata, aes(x = date)) +\n  geom_line(aes(y = consumption, colour = type)) + \n  labs(title = paste0(\"Electricity Consumption by \",chosendata[1,6]),\n      x = \"Year\", y = paste0(\"Consumption, GWh \")) +\n  scale_color_discrete(name=\"\") +\n  theme(legend.position=\"bottom\")\n\n\n\n\n\n\n3.3.2 Plot 2 - Cycle plot\n\nselect_type <- 'Bishan'\nselect_cycle <- chosendata %>% \n  filter(type %in% c(select_type)) %>%\n  mutate(year = factor(year, levels = 2005:2022),\n         month = factor(month, levels = 1:12))\n\n#Computing year average by months\nhline.data <- select_cycle %>%\n  group_by(month) %>%\n  summarise(avg_cons = mean(consumption))\n\n#Plotting cycle plot for electricity consumption per dwelling type\nggplot() + \n  geom_line(data = select_cycle,\n            aes(x=year,y=consumption, group=month), colour = \"black\") +\n  geom_hline(data = hline.data,\n             aes(yintercept=avg_cons),\n             linetype=6, \n             colour=\"red\", \n             linewidth=0.5) +\n  facet_grid(~month) +\n  theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +\n  labs(title = paste0(\"Cycleplot for Chosen \",chosendata[1,6],\"'s Consumption (GWh) , Jan 2005-Jun 2022\"),\n       subtitle = paste0(chosendata[1,6],\": \",select_type)) +\n  scale_x_discrete(breaks=c(\"2005\",\"2010\",\"2015\",\"2020\")) +\n  xlab(\"\") +\n  ylab(\"Consumption, GWh\")\n\n\n\n\n\n\n3.3.3 Plot 3 - Sparkline Table\n\n\n\n\n\n3.3.4 Plot 4 - Slopegraph"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#clustering",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#clustering",
    "title": "Project sandbox",
    "section": "4 2. Clustering",
    "text": "4 2. Clustering\n\n4.1 2.1 Hierachical clustering\n\nlibrary(lubridate)\n\nT3.5 <- read_csv(\"data/T3-5.csv\")\nclus_data <- T3.5 %>% \n  filter(month != \"Annual\" & \n           year > 2017 & \n           dwelling_type != \"Overall\" &\n           !str_detect(Description,\"Region|Pioneer|Overall\"))\n\n# transform dataset\n# convert kwh into numbers\nclus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)\n# join month and year into a date\nclus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c(\"%Y %m\")) \n\n# drop month and year column\nclus_data <- subset(clus_data, select=-c(month, year, Region)) %>%\n  arrange(date)\n\n# pivot wider\nclus <- clus_data %>%\n  pivot_wider(names_from=date, values_from=kwh_per_acc) \n\n# omit na\nclus <- na.omit(clus)\nclus <- clus %>% relocate(Description, .before = dwelling_type)\n\nsaveRDS(clus_data, file = \"RDS/clus_data.rds\")\nsaveRDS(clus, file = \"RDS/clus.rds\")\n\nclus_data <- readRDS(file = \"RDS/clus_data.rds\") # clustering\nclus <- readRDS(file = \"RDS/clus.rds\") # clustering\nhead(clus_data, 5)\n\n# A tibble: 5 × 4\n  dwelling_type   Description kwh_per_acc date               \n  <chr>           <chr>             <dbl> <dttm>             \n1 1-room / 2-room Bishan             133. 2018-01-01 00:00:00\n2 1-room / 2-room Bukit Merah        160. 2018-01-01 00:00:00\n3 1-room / 2-room Bukit Timah        123. 2018-01-01 00:00:00\n4 1-room / 2-room Geylang            170. 2018-01-01 00:00:00\n5 1-room / 2-room Kallang            134. 2018-01-01 00:00:00\n\nhead(clus, 5)\n\n# A tibble: 5 × 56\n  Description dwelling…¹ 2018-…² 2018-…³ 2018-…⁴ 2018-…⁵ 2018-…⁶ 2018-…⁷ 2018-…⁸\n  <chr>       <chr>        <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1 Bishan      1-room / …    133.    123.    122     138.    140.    162.    148 \n2 Bukit Merah 1-room / …    160.    145.    136.    154.    164.    164.    164.\n3 Bukit Timah 1-room / …    123.    130.    137.    140     138.    148.    139.\n4 Geylang     1-room / …    170.    147.    152.    168     167.    198.    175 \n5 Kallang     1-room / …    134.    131     123.    139.    153     160.    150.\n# … with 47 more variables: `2018-08-01` <dbl>, `2018-09-01` <dbl>,\n#   `2018-10-01` <dbl>, `2018-11-01` <dbl>, `2018-12-01` <dbl>,\n#   `2019-01-01` <dbl>, `2019-02-01` <dbl>, `2019-03-01` <dbl>,\n#   `2019-04-01` <dbl>, `2019-05-01` <dbl>, `2019-06-01` <dbl>,\n#   `2019-07-01` <dbl>, `2019-08-01` <dbl>, `2019-09-01` <dbl>,\n#   `2019-10-01` <dbl>, `2019-11-01` <dbl>, `2019-12-01` <dbl>,\n#   `2020-01-01` <dbl>, `2020-02-01` <dbl>, `2020-03-01` <dbl>, …\n\n\n\n4.1.1 Plot 1 - Method selection table\n\n# once user have gotten the clustering method from above, they need to input that to find the optimal number of k\nlibrary(dendextend)\nlibrary(BBmisc)\nclus_group1 <- clus[,-c(2)] %>%\n  group_by(Description) %>%\n  summarise_each(list(sum))\n\nclustering <- dist(normalize(clus_group1[, -1]),  method = \"maximum\")\ndend_expend(clustering)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6394564\n2      unknown        ward.D2 0.7218247\n3      unknown         single 0.8325438\n4      unknown       complete 0.8976064\n5      unknown        average 0.9123991\n6      unknown       mcquitty 0.9094702\n7      unknown         median 0.8238489\n8      unknown       centroid 0.8998871\n\n\n\n\n4.1.2 Plot 2 - Heatmap\n\nlibrary(heatmaply)\nclus_group1 <- clus[,-c(2)] %>%\n  group_by(Description) %>%\n  summarise_each(list(sum))\n\n# making \"Description\" the row name (index)\nrow.names(clus_group1) <- clus_group1$Description\n\n# Making it into a matrix\nclus_matrix1 <- data.matrix(clus_group1)\n\n# plot\nheatmaply(clus_matrix1[,-c(1)],\n          scale = \"column\",\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          Colv=NA,\n          seriate = \"none\",\n          k_row = 3,\n          margins = c(NA,200,50,NA),\n          colors = viridis(\n            n= 256, alpha=1, \n            begin=0, end=1,\n            option=\"viridis\"),\n          fontsize_row = 5,\n          fontsize_col = 5,\n          main=\"Hierarchical Clustering\",\n          ylab = \"Towns\",\n          xlab = \"Time\")\n\n\n\n\n\n\n\n4.1.3 Plot 3 - Number of cluster plot\n\nclust2 <- hclust(clustering, method = \"mcquitty\")\nnum_k <- find_k(clust2)\nplot(num_k)\n\n\n\n\n\n\n4.1.4 Plot 4 - Map\n\n## Add clusters to dataframe\n\nnum_clus <- cutree(clust2, k=3)\nclus_hc <- cbind(clus_group1, cluster = as.factor(num_clus))\n\nlibrary(sf)\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414) \n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `E:\\ISSS608_VisualAnalytics\\ISSS608-GroupProject\\Shiny_App_G9\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\nsingapore <- st_transform(mpsz, 4326)\n\nlibrary(tmap)\n# change Description to upper case\nclus_hc$Description <- toupper(clus_hc$Description)\n\n# Preparing the choropleth map\nmpsz_clus <- left_join(singapore, clus_hc, by = c(\"PLN_AREA_N\" = \"Description\"))\ntmap_mode(\"view\")\ntm_shape(mpsz_clus)+\n  tmap_options(check.and.fix = TRUE)+\n  tm_fill(\"cluster\", id=paste(\"PLN_AREA_N\"),\n          style = \"pretty\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.7)\n\n\n\n\n\n\n\n\n\n4.2 2.2 Time Series clustering\n\nlibrary(dtwclust)\nlibrary(tibble)\nlibrary(ggdendro)\n\n# Clustering Method (type) (\"partitional\", \"hierarchical\", \"tadpole\", \"fuzzy\".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods\n# parameter 1: Number of cluster (k)\n# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust\n# parameter 3: hierarchical clustering method (\"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\" or \"centroid\" .)\n\n\ncluster_dtw <- tsclust(clus_matrix1[,-c(1)],\n                       type = \"h\", \n                       k=2,\n                       distance=\"dtw\",\n                       control = hierarchical_control(method = \"ward.D\"),\n                       preproc = NULL,\n                       args=tsclust_args(dist = list(window.size = 5L)))\n\nhclus_dtw <- cutree(cluster_dtw, k=4) %>%\n  as.data.frame(.) %>%\n  rename(.,cluster_group = .) %>%\n  rownames_to_column(\"type_col\")\n\n# hcdata <- dendro_data(cluster_dtw)\n# names_order <- hcdata$labels$label\n\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(timetk)\n\n# add the cluster number\ndtw_cluster <- clus_group1 %>%\n  left_join(hclus_dtw, by=c(\"Description\" = \"type_col\")) \n\n# change date columns into rows\ndtw_cluster_t <- dtw_cluster %>%\n  mutate_at(vars(contains(\"202\")),as.numeric) %>%\n  gather(Date, value, 2:55)\n\n# Add the word \"Cluster\"\ndtw_cluster_t$cluster_group <- paste(\"Cluster\", dtw_cluster_t$cluster_group)\n\n# convert Date into date format\ndtw_cluster_t$Date <- parse_date_time(dtw_cluster_t$Date, orders=c(\"%Y-%m-%d\")) \n\n# plot time series by cluster\n\nts <- plot_time_series(.data=dtw_cluster_t,\n                 .date_var=Date, \n                 .value=value,\n                 .color_var=Description,\n                 .facet_var=cluster_group,\n                 .facet_ncol=2,\n                 .facet_scales = \"free_y\",\n                 .smooth=FALSE,\n                 .line_size = 0.3,\n                 .plotly_slider = TRUE,\n                 .title = \"Time Series Plot by cluster\") \n\nts <- ts %>%\n  layout(hovermode=\"x\",\n         hoverlabel=list(font=list(size=7)))\nts\n\n\n\n\n# how to modify the tooltip? Town is being shown twice here...\n\nlibrary(sf)\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414) \n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `E:\\ISSS608_VisualAnalytics\\ISSS608-GroupProject\\Shiny_App_G9\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\nsingapore <- st_transform(mpsz, 4326)\n\nlibrary(tmap)\n# change Description to upper case\ndtw_cluster_t$Description <- toupper(dtw_cluster_t$Description)\n\n# Preparing the choropleth map\nmpsz_clus_dtw <- left_join(singapore, dtw_cluster_t, by = c(\"PLN_AREA_N\" = \"Description\"))\ntmap_mode(\"view\")\ntm_shape(mpsz_clus_dtw)+\n  tmap_options(check.and.fix = TRUE)+\n  tm_fill(\"cluster_group\", id=paste(\"PLN_AREA_N\"),\n          style = \"pretty\",\n          palette = \"Greens\") +\n  tm_borders(alpha = 0.7)"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#inferential---anova",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#inferential---anova",
    "title": "Project sandbox",
    "section": "5 3. Inferential - ANOVA",
    "text": "5 3. Inferential - ANOVA\n\nT3.5 <- readRDS(file = \"RDS/T3-5.rds\")\nconsumption <- T3.5\nconsumption <- consumption %>% \n  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% \n  mutate(year = as.character(year))\nsaveRDS(consumption, file = \"RDS/anova.rds\")\n\n\n5.1 3.1 Box plot anova\n\n# LIBRARY -----------------------------------------------------------------\n# library(forecast)\n# library(dplyr)\n# library(tidyr)\n# library(tidyverse)\n\npackages = c('dplyr', 'ggplot2',\n             'ggstatsplot', 'ggrepel', 'ggridges', 'gt', 'gtExtras',\n             'knitr','plotly', 'lubridate', 'psych','ggstatsplot',\n             'reactablefmtr', 'readr', 'sf', 'shiny', 'shinydashboard',\n             'shinythemes', 'shinyWidgets', 'stats', 'tibble', 'tidymodels',\n             'tidyquant', 'tidyr', 'tidyverse'\n            )\n\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n# READ DATA ---------------------------------------------------------------\n## Read compressed data file\nT2.3 <- readRDS(file = \"RDS/T2-3.rds\") # Peak System Demand\nT3.4 <- readRDS(file = \"RDS/T3-4.rds\") # Total Household Electricity Consumption by Dwelling Type\nT3.5 <- readRDS(file = \"RDS/T3-5.rds\") # Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\ndwelling <- readRDS(file = \"RDS/dwelling.rds\")\ntown <- readRDS(file = \"RDS/town.rds\")\n\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414)\n\n# Import the area grid data.\narea_grid <- read_csv(\"data/areagrid.csv\")\nsingapore <- st_transform(mpsz, 4326)\n\n\n# PARAMETER ---------------------------------------------------------------\nyears <- c(\"2022\",\"2021\", \"2020\", \"2019\", \"2018\", \"2017\")\nregions <- c( \"Central Region\", \"North East Region\", \"East Region\", \"North Region\", \"West Region\")\n\n\n# UI ----------------------------------------------------------------------\nui = dashboardPage(\n  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),\n  \n  dashboardSidebar(width = 210,\n                   sidebarMenu(\n                     menuItem(\" INFERENTIAL STATISTICS\",  \n                              tabName = \"inferential\", \n                              icon = icon(\"magnifying-glass-chart\")\n                              )\n                   )\n  ),\n  dashboardBody(\n    tabItems(\n      \n      ## 3 INFERENTIAL STATISTICS ------------------------------------------------\n      tabItem(\n        tabName = \"inferential\",\n        navbarPage(\"INFERENTIAL STATISTICS\", \n                   \n                   ### 3.1 anova ---------------------------------------------\n                   tabPanel(\"ANOVA\",\n                            fluidPage(\n                              fluidRow(\n                                column(5,\n                                       pickerInput(inputId = \"anovainput\", \n                                                   label = \"Select Parameter\",\n                                                   choices = c(\"dwelling_type\", \"Region\", \"year\"), \n                                                   selected = \"dwelling_type\",\n                                                   options = list(`actions-box` = TRUE), \n                                                   multiple = F),\n                                       verbatimTextOutput(\"anovastat\")\n                                ),\n                                column(7, plotOutput(\"dwellingstat\"))\n                              ),\n                              \n                              fluidRow(\n                                column(5,\n                                       pickerInput(inputId = \"region\", \n                                                   label = \"Select Region\",\n                                                   choices = regions, \n                                                   selected = \"Central Region\",\n                                                   options = list(`actions-box` = TRUE), \n                                                   multiple = F),\n                                       verbatimTextOutput(\"anovastat2\")\n                                ),\n                                column(7, plotOutput(\"dwellingstat2\"))\n                              )\n                            ))\n        ))\n    ) #close tabItems\n  ) #close dashboard body\n) #close UI\n\n# SERVER ------------------------------------------------------------------\n\nserver = function(input, output, session) {\n  \n  # anova -----------------------------------------------------------------\n  consumption <- T3.5\n  consumption <- consumption %>% \n    mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% \n    mutate(year = as.character(year))\n  \n  observeEvent(input$anovainput,{\n    if(input$anovainput == \"Region\"){output$dwellingstat <- renderPlot({\n      consumption %>%\n        mutate(class = fct_reorder(Region, kwh_per_acc, .fun='mean')) %>%\n        ggplot( aes(x=reorder(Region, kwh_per_acc), y=kwh_per_acc)) +\n        geom_boxplot() +\n        stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n        theme(legend.position=\"none\") +\n        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n        ggtitle(\"Boxplot of consumption per planning area\")\n    })\n    }\n    if(input$anovainput == \"year\") {\n  output$dwellingstat <- renderPlot({\n    ggbetweenstats(\n  data = consumption,\n  x = year,\n  y = kwh_per_acc,\n  # type = \"np\",\n  messages = FALSE\n)\n})}\n    if(input$anovainput == \"dwelling_type\"){output$dwellingstat <- renderPlot({\n      consumption %>%\n        mutate(class = fct_reorder(dwelling_type, kwh_per_acc, .fun='mean')) %>%\n        ggplot( aes(x=reorder(dwelling_type, kwh_per_acc), y=kwh_per_acc)) +\n        geom_boxplot() +\n        stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n        theme(legend.position=\"none\") +\n        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n        ggtitle(\"Boxplot of consumption per planning area\")\n    })}\n    if(input$anovainput == \"dwelling_type\"){\n      output$anovastat <- renderPrint({\n        summary(aov(kwh_per_acc ~ dwelling_type, data = consumption))\n      })}\n    if(input$anovainput == \"Region\"){\n      output$anovastat <- renderPrint({\n        summary(aov(kwh_per_acc ~ Region, data = consumption))\n      })}\n    if(input$anovainput == \"year\"){\n      output$anovastat <- renderPrint({\n        summary(aov(kwh_per_acc ~ year, data = consumption))\n      })}\n  })\n  \n  # anova2 ---------------------------------------------------------------------\n  observeEvent(input$region,{\n    output$dwellingstat2 <- renderPlot({\n      consumption %>%\n        filter(Region==input$region) %>% \n        mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%\n        ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +\n        geom_boxplot() +\n        stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n        theme(legend.position=\"none\") +\n        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n        ggtitle(\"Boxplot of consumption per planning area\")\n    })\n    \n    output$anovastat2 <- renderPrint({\n      consumption %>% \n        filter(Region == input$region)\n      summary(aov(kwh_per_acc ~ Description, data = consumption))\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\n\n\n5.2 3.2 Betweenstats plot anova"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#time-series-forecasting",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#time-series-forecasting",
    "title": "Project sandbox",
    "section": "6 4. Time series forecasting",
    "text": "6 4. Time series forecasting"
  }
]