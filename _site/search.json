[
  {
    "objectID": "Shiny_App_G9/sandbox.html",
    "href": "Shiny_App_G9/sandbox.html",
    "title": "Sandbox",
    "section": "",
    "text": "packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}"
  },
  {
    "objectID": "Shiny_App_G9/sandbox.html#read-data-and-compress-in-rds-file",
    "href": "Shiny_App_G9/sandbox.html#read-data-and-compress-in-rds-file",
    "title": "Sandbox",
    "section": "2 Read data and compress in RDS file",
    "text": "2 Read data and compress in RDS file\nThis section of code is used to compress the file so that it will not load too slowly when it is uploaded to the website. I’ve already built the RDS files in the RDS folder, so you don’t need to run this script.\n\nT2.3 <- read_csv(\"data/T2-3.csv\")\nsaveRDS(T2.3, file = \"RDS/T2-3.rds\")\n\nT2.6 <- read_csv(\"data/T2-6.csv\")\nsaveRDS(T2.6, file = \"RDS/T2-6.rds\")\n\nT3.4 <- read_csv(\"data/T3-4.csv\")\nsaveRDS(T3.4, file = \"RDS/T3-4.rds\")\n\nT3.5 <- read_csv(\"data/T3-5.csv\")\nsaveRDS(T3.5, file = \"RDS/T3-5.rds\")\n\nT3.6 <- read_csv(\"data/T3-6.csv\")\nsaveRDS(T3.6, file = \"RDS/T3-6.rds\")\n\nT3.7 <- read_csv(\"data/T3-7.csv\")\nsaveRDS(T3.7, file = \"RDS/T3-7.rds\")\n\nT3.8 <- read_csv(\"data/T3-8.csv\")\nsaveRDS(T3.8, file = \"RDS/T3-8.rds\")\n\nT3.9 <- read_csv(\"data/T3-9.csv\")\nsaveRDS(T3.9, file = \"RDS/T3-9.rds\")\n\nT5.1 <- read_csv(\"data/T5-1.csv\")\nsaveRDS(T5.1, file = \"RDS/T5-1.rds\")\n\nT5.2 <- read_csv(\"data/T5-2.csv\")\nsaveRDS(T5.2, file = \"RDS/T5-2.rds\")\n\nT5.3 <- read_csv(\"data/T5-3.csv\")\nsaveRDS(T5.3, file = \"RDS/T5-3.rds\")\n\nT5.4 <- read_csv(\"data/T5-4.csv\")\nsaveRDS(T5.4, file = \"RDS/T5-4.rds\")\n\nT5.5 <- read_csv(\"data/T5-5.csv\")\nsaveRDS(T5.4, file = \"RDS/T5-5.rds\")\n\n\n2.1 Data table\nT2.3 : Peak System Demand\n\n\n\n\n\nyear\nmth\npeak_system_demand_mw\n\n\n\n\n2005\n1\n5083\n\n\n2005\n2\n5285\n\n\n2005\n3\n5333\n\n\n2005\n4\n5408\n\n\n2005\n5\n5385\n\n\n\n\n\nT2.6 : Market Share of Electricity Generation\n\n\n\n\n\nyear\ncompany\nshare_percent\n\n\n\n\n2005\nTuas Power Generation\n23.2\n\n\n2005\nSenoko Energy\n31.7\n\n\n2005\nYTL PowerSeraya\n28.1\n\n\n2005\nKeppel Merlimau Cogen\n0.0\n\n\n2005\nSembCorp Cogen\n12.1\n\n\n\n\n\nT3.4 : Total Household Electricity Consumption by Dwelling Type\n\n\n\n\n\nyear\nmonth\nDWELLING_TYPE\nconsumption_GWh\n\n\n\n\n2005\n1\nOverall\n447.8\n\n\n2005\n2\nOverall\n437.1\n\n\n2005\n3\nOverall\n479.7\n\n\n2005\n4\nOverall\n533.6\n\n\n2005\n5\nOverall\n535.0\n\n\n\n\n\nT3.5 : Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\n\n\n\n\n\n\n\n\n\n\n\n\n\ndwelling_type\nyear\nmonth\nRegion\nDescription\nkwh_per_acc\n\n\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nBishan\n104.9\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nBukit Merah\n140.7\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nCentral Region\n136.5\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nGeylang\n148.5\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nKallang\n115.6\n\n\n\n\n\nT3.6 : Market Share for Natural Gas Retail\n\n\n\n\n\nyear\ncompany\nmarket_share_percent\n\n\n\n\n2007\nSembCorp Gas\n65.1\n\n\n2007\nPavilion Gas\n-\n\n\n2007\nCity-OG Gas Energy Services\n-\n\n\n2007\nCity Gas\n5.9\n\n\n2007\nKeppel Gas\n-\n\n\n\n\n\nT3.7 : Natural Gas Consumption by Sub-Sector\n\n\n\n\n\n\n\n\n\n\n\nyear\nsector\nsub_sector\nng_consumption_tj\n\n\n\n\n2009\nIndustrial-related\nManufacturing\n29960.9\n\n\n2009\nIndustrial-related\nConstruction\n132.2\n\n\n2009\nIndustrial-related\nUtilities\n320.3\n\n\n2009\nIndustrial-related\nOther Industrial-related\n0.0\n\n\n2009\nCommerce and Service-related\nWholesale and Retail Trade\n116.7\n\n\n\n\n\nT3.8 : Total Household Town Gas Consumption by Dwelling Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonth\npublic_1-rm_2-rm\npublic_3-rm\npublic_4-rm\npublic_5-rm_and_exec\nprivate_apts_and_condo\nprivate_landed_properties\nothers\n\n\n\n\n2005-01\n1.1\n6.6\n16.0\n17.4\n5.9\n1.0\n0.6\n\n\n2005-02\n1.1\n6.5\n15.8\n17.2\n6.0\n1.0\n0.6\n\n\n2005-03\n1.0\n6.5\n15.9\n17.5\n5.9\n1.0\n0.5\n\n\n2005-04\n1.1\n6.6\n16.1\n17.7\n6.1\n1.0\n0.5\n\n\n2005-05\n1.0\n6.2\n15.6\n17.1\n5.9\n0.9\n0.5\n\n\n\n\n\nT3.9 : Average Monthly Household Town Gas Consumption by Planning Area & Dwelling Type\n\n\n\n\n\n\n\n\n\n\n\n\n\ndwelling_type\nyear\nmonth\nRegion\nDescription\nkwh_per_acc\n\n\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nBishan\n59.3\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nBukit Merah\n71.9\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nCentral Region\n67.7\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nGeylang\n71.9\n\n\n1-room / 2-room\n2005\n1\nCentral Region\nKallang\n60.7\n\n\n\n\n\nT5.1 : Electricity and Gas Tariffs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nprice_electtariffs_inflatnadjusted_cent_per_kwh\nprice_tgtariffs_inflatnadjusted_cent_per_kwh\nindex_electtariffs\nindex_tgtariffs\nindex_electariffs_inflatadjusted\nindex_tgtariffs_inflatnadjusted\n\n\n\n\n2005\n22.6\n20.4\n74.9\n84.6\n95.9\n108.3\n\n\n2006\n26.5\n21.7\n89.4\n91.6\n112.5\n115.3\n\n\n2007\n24.9\n21.1\n85.7\n91.1\n105.5\n112.1\n\n\n2008\n29.7\n23.3\n108.2\n106.2\n126.0\n123.7\n\n\n2009\n23.9\n19.2\n86.9\n87.6\n101.2\n102.1\n\n\n\n\n\nT5.2 : Monthly Electricity Tariffs (Low Tension Tariffs)\n\n\n\n\n\nmonth\ntariff_cent_per_kwh\n\n\n\n\n2005-01\n16.7\n\n\n2005-02\n16.7\n\n\n2005-03\n16.7\n\n\n2005-04\n16.1\n\n\n2005-05\n16.1\n\n\n\n\n\nT5.3 : Annual Electricity Tariffs by Components (Low Tension Tariffs)\n\n\n\n\n\n\n\n\n\n\n\n\nyear\nenergy_costs_cent_per_kwh\ngrid_charges_cent_per_kwh\nmkt_support_service_fees_cent_per_kwh\npower_sys_ops_mkt_admin_fees_cent_per_kwh\n\n\n\n\n2005\n11.8\n5.5\n0.3\n0.1\n\n\n2006\n15.3\n5.4\n0.3\n0.1\n\n\n2007\n14.5\n5.4\n0.3\n0.1\n\n\n2008\n19.9\n5.2\n0.3\n0.1\n\n\n2009\n15.3\n4.9\n0.3\n0.1\n\n\n\n\n\nT5.4 : Average Monthly Uniform Singapore Energy Prices (USEP)\n\n\n\n\n\nmonth\navg_mthly_usep_sgd_per_mwh\n\n\n\n\n2005-01\n78.6\n\n\n2005-02\n83.6\n\n\n2005-03\n97.7\n\n\n2005-04\n99.8\n\n\n2005-05\n113.5\n\n\n\n\n\nT5.5 : Monthly Town Gas Tariffs\n\n\n\n\n\nmonth\ngeneral_tariff\nbulk_tariff_a\nbulk_tariff_b\n\n\n\n\n2007-01\n16.8\n15.8\n15.3\n\n\n2007-02\n16.8\n15.8\n15.3\n\n\n2007-03\n16.8\n15.8\n15.3\n\n\n2007-04\n16.8\n15.8\n15.3\n\n\n2007-05\n16.8\n15.8\n15.3\n\n\n\n\n\nCode for load data\n\n## Read compressed data file\nT2.3 <- readRDS(file = \"RDS/T2-3.rds\") # Peak System Demand\n#T2.6 <- readRDS(file = \"RDS/T2-6.rds\") # Market Share of Electricity Generation\nT3.4 <- readRDS(file = \"RDS/T3-4.rds\") # Total Household Electricity Consumption by Dwelling Type\nT3.5 <- readRDS(file = \"RDS/T3-5.rds\") # Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\n#T3.6 <- readRDS(file = \"RDS/T3-6.rds\") # Market Share for Natural Gas Retail\n#T3.7 <- readRDS(file = \"RDS/T3-7.rds\") # Natural Gas Consumption by Sub-Sector\n#T3.8 <- readRDS(file = \"RDS/T3-8.rds\") # Total Household Town Gas Consumption by Dwelling Type\n#T3.9 <- readRDS(file = \"RDS/T3-9.rds\") # Average Monthly Household Town Gas Consumption by Planning Area & Dwelling Type\n#T5.1 <- readRDS(file = \"RDS/T5-1.rds\") # Electricity and Gas Tariffs\n#T5.2 <- readRDS(file = \"RDS/T5-2.rds\") # Monthly Electricity Tariffs (Low Tension Tariffs)\n#T5.3 <- readRDS(file = \"RDS/T5-3.rds\") # Annual Electricity Tariffs by Components (Low Tension Tariffs)\n#T5.4 <- readRDS(file = \"RDS/T5-4.rds\") # Average Monthly Uniform Singapore Energy Prices (USEP)\n#T5.5 <- readRDS(file = \"RDS/T5-5.rds\") # Monthly Town Gas Tariffs"
  },
  {
    "objectID": "Shiny_App_G9/sandbox.html#shiny",
    "href": "Shiny_App_G9/sandbox.html#shiny",
    "title": "Sandbox",
    "section": "3 Shiny",
    "text": "3 Shiny\n\n3.1 Skeleton\n\n# call library used\nlibrary(shiny)\nlibrary(shinythemes)\n\n## Set up parameter\n\n\nui = fluidPage(\n  theme = shinytheme(\"slate\"),\n  headerPanel(title = \"Singapore Energy Consumption\"),\n  \n  navlistPanel(\n    widths = c(3, 9),\n     \n    tabPanel(\"OVERVIEW\",tabName = \"overview\",icon = icon(\"chalkboard-user\"),\n             navbarPage(\"OVERVIEW\", \n                        tabPanel(\"Introduction\"),\n                        tabPanel(\"Boxplot\"),\n                        tabPanel(\"Geofacet\"),\n                        tabPanel(\"Lineplot\"),\n                        tabPanel(\"Barchart\")\n             )\n    ),\n      \n    # ========================== CLUSTERING ========================== #\n    \n    tabPanel(\"CLUSTERING\", tabName = \"clustering\", icon = icon(\"circle-nodes\"),\n             navbarPage(\"CLUSTERING\", \n                        tabPanel(\"Hierachical Clustering\"),\n                        tabPanel(\"DTW\"),\n                        tabPanel(\"Time Series Clustering\")\n             )\n    ),\n    \n    # ========================== INFERENTIAL ========================== #     \n    \n    tabPanel(\"INFERENTIAL STATISTICS\", tabName = \"inferential\", icon = icon(\"magnifying-glass-chart\"),\n             navbarPage(\"INFERENTIAL STATISTICS\", \n                        tabPanel(\"ANOVA\"),\n                        tabPanel(\"Correlation Analysis\")\n             )\n    ),\n    \n    # ========================== TIME SERIES ========================== #     \n    \n    tabPanel(\"TIME SERIES FORECASTING\", tabName = \"time_series\", icon = icon(\"chart-line\"),\n             navbarPage(\"TIME SERIES FORECASTING\",\n                        tabPanel(\"Trend Prediction\"),\n                        tabPanel(\"Slope Graph\")\n             )\n    ),\n    \n    # =============================== DATA =============================== #     \n    \n    tabPanel(\"DATA\", tabName = \"data\", icon = icon(\"table\"),\n             navbarPage(\"DATA\" )),\n    # =============================== ABOUT =============================== #    \n    \n    tabPanel(\"ABOUT\", tabName = \"about\", icon = icon(\"info\")),\n    # ============================== CO.MMON USER INPUT =============================== #    \n    tabPanel(wellPanel(\n      sliderInput(\"slider_time\", \"Select date range\",min = as.Date(\"2021-02-24\"), \n                  max = as.Date(\"2021-04-24\"), \n                  value =  c(as.Date(\"2021-02-24\"),as.Date(\"2021-03-03\") )),\n      \n      dateRangeInput(\"daterange\", \"Input date range\", \n                     start = as.Date(\"2021-02-24\"),end = as.Date(\"2021-03-03\") )\n    ))\n  )\n)\n\nserver = function(input, output, session) {\n  \n}\n\nshinyApp(ui , server )\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n3.2 Data tab : data table page\n\nlibrary(shiny)\nlibrary(shinythemes)\n\n## Set up parameter\ntables <- c(\"Peak System Demand\" = \"T2.3\",\n            \"Market Share of Electricity Generation\" = \"T2.6\",\n            \"Total Household Electricity Consumption by Dwelling Type\" = \"T3.4\",\n            \"Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\" = \"T3.5\",\n            \"Market Share for Natural Gas Retail\" = \"T3.6\",\n            \"Natural Gas Consumption by Sub-Sector\" = \"T3.7\",\n            \"Total Household Town Gas Consumption by Dwelling Type\" = \"T3.8\",\n            \"Average Monthly Household Town Gas Consumption by Planning Area & Dwelling Type\" = \"T3.9\",\n            \"Electricity and Gas Tariffs\" = \"T5.1\",\n            \"Monthly Electricity Tariffs (Low Tension Tariffs)\" = \"T5.2\",\n            \"Annual Electricity Tariffs by Components (Low Tension Tariffs)\" = \"T5.3\",\n            \"Average Monthly Uniform Singapore Energy Prices (USEP)\" = \"T5.4\",\n            \"Monthly Town Gas Tariffs\" = \"T5.5\")\n\nui = fluidPage(\n  theme = shinytheme(\"slate\"),\n  headerPanel(title = \"Singapore Energy Consumption\"),\n  \n  navlistPanel(\n    widths = c(3, 9),\n    \n    # ========================== OVERVIEW ========================== #      \n    tabPanel(\"OVERVIEW\",tabName = \"overview\",icon = icon(\"chalkboard-user\")),\n    \n    # ========================== CLUSTERING ========================== #\n    \n    tabPanel(\"CLUSTERING\", tabName = \"clustering\", icon = icon(\"circle-nodes\")),\n    \n    # ========================== INFERENTIAL ========================== #     \n    \n    tabPanel(\"INFERENTIAL STATISTICS\", tabName = \"inferential\", icon = icon(\"magnifying-glass-chart\")),\n    \n    # ========================== TIME SERIES ========================== #     \n    \n    tabPanel(\"TIME SERIES FORECASTING\", tabName = \"time_series\", icon = icon(\"chart-line\")),\n    \n    # =============================== DATA =============================== #     \n    \n    tabPanel(\"DATA\", tabName = \"data\", icon = icon(\"table\"),\n             navbarPage(\"DATA\",\n                        tabPanel(\"data table\",\n                                 fluidPage(\n                                   fluidRow(\n                                     column(12, wellPanel(\n                                       radioButtons(\"SelectTable\",\n                                                    label = \"Select Data\",\n                                                    choices = tables,\n                                                    selected = \"Electricity\")\n                                     ) ),\n                                     column(12, dataTableOutput(\"table\"))\n                                   )\n                                 ))\n             )\n    ),\n    \n    # ******************************* END DATA ******************************* #    \n    \n    # =============================== ABOUT =============================== #    \n    \n    tabPanel(\"ABOUT\", tabName = \"about\", icon = icon(\"info\")),\n    \n    # ****************************** END ABOUT ****************************** #    \n    tabPanel(wellPanel(\n      sliderInput(\"slider_time\", \"Select date range\",min = as.Date(\"2021-02-24\"), \n                  max = as.Date(\"2021-04-24\"), \n                  value =  c(as.Date(\"2021-02-24\"),as.Date(\"2021-03-03\") )),\n      \n      dateRangeInput(\"daterange\", \"Input date range\", \n                     start = as.Date(\"2021-02-24\"),end = as.Date(\"2021-03-03\") )\n    ))\n  )\n)\n\nserver = function(input, output, session) {\n  \n  observeEvent((input$SelectTable),{\n                if(input$SelectTable == \"T2.3\") {tabletext <- T2.3}\n               if(input$SelectTable == \"T2.6\")  {tabletext <- T2.6}\n               if(input$SelectTable == \"T3.4\")  {tabletext <- T3.4}\n               if(input$SelectTable == \"T3.5\")  {tabletext <- T3.5}\n               if(input$SelectTable == \"T3.6\")  {tabletext <- T3.6}\n               if(input$SelectTable == \"T3.7\")  {tabletext <- T3.7}\n               if(input$SelectTable == \"T3.8\")  {tabletext <- T3.8}\n               if(input$SelectTable == \"T3.9\")  {tabletext <- T3.9}\n               if(input$SelectTable == \"T5.1\")  {tabletext <- T5.1}\n               if(input$SelectTable == \"T5.2\")  {tabletext <- T5.2}\n               if(input$SelectTable == \"T5.3\")  {tabletext <- T5.3}\n               if(input$SelectTable == \"T5.4\")  {tabletext <- T5.4}\n               if(input$SelectTable == \"T5.5\")  {tabletext <- T5.5}\n               output$table <- renderDataTable(tabletext)\n               }\n  )\n}\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n3.3 Overview tab : geofacet\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(geofacet)\n\n# Import data \ngeofacet <- T3.5\ngeofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)\n\n# Import the area grid data.\narea_grid <- read_csv(\"data/areagrid.csv\")\n\ngeofacet <- geofacet %>%\n  group_by(year, dwelling_type, Description ) %>%\n  summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),\n            medprice = median(kwh_per_acc, na.rm = TRUE))%>%\n  ungroup()\n\n# merge table with town name\ngeofacet_gas_consump <- inner_join(geofacet, area_grid,\n                      by = c(\"Description\" = \"name\"))\n\ncommon_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]\nggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +\n  geom_line(aes(color = as.factor(dwelling_type))) +\n  # scale_x_date(date_labels = \"%b\") +\n  facet_geo(~Description, grid = common_grid) +\n  # labs(title = \"Singapore Resale flat price trends\") +\n  # scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +\n  theme(plot.title = element_text(size=22),\n        axis.text.x = element_text(size = 10, angle = 45),\n        axis.text.y = element_text(size = 10),\n        strip.text = element_text(size = 10),\n        legend.position = \"top\")\n\n\n\n\n\n# call library used\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(geofacet)\nlibrary(shinyWidgets)\n\n# Import data \ngeofacet <- T3.5\ngeofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)\n\n# Import the area grid data.\narea_grid <- read_csv(\"data/areagrid.csv\")\n\nui = fluidPage(\n  theme = shinytheme(\"slate\"),\n  headerPanel(title = \"Singapore Energy Consumption\"),\n  \n  navlistPanel(\n    widths = c(3, 9),\n    tabPanel(\"OVERVIEW\",tabName = \"overview\",icon = icon(\"chalkboard-user\"),\n             navbarPage(\"OVERVIEW\", \n                        tabPanel(\"Introduction\"),\n                        tabPanel(\"Boxplot\"),\n                        tabPanel(\"Geofacet\",\n                                 fluidPage(\n                                   fluidRow(\n                                     column(12,plotOutput(\"geo\", height = 800))\n                                   )\n                                 )\n                        ),\n                        tabPanel(\"Lineplot\"),\n                        tabPanel(\"Barchart\")\n             )\n    ),\n    \n    # ========================== CLUSTERING ========================== #\n    \n    tabPanel(\"CLUSTERING\", tabName = \"clustering\", icon = icon(\"circle-nodes\"),\n             navbarPage(\"CLUSTERING\", \n                        tabPanel(\"Hierachical Clustering\"),\n                        tabPanel(\"DTW\"),\n                        tabPanel(\"Time Series Clustering\")\n             )\n    ),\n    \n    # ========================== INFERENTIAL ========================== #     \n    \n    tabPanel(\"INFERENTIAL STATISTICS\", tabName = \"inferential\", icon = icon(\"magnifying-glass-chart\"),\n             navbarPage(\"INFERENTIAL STATISTICS\", \n                        tabPanel(\"ANOVA\"),\n                        tabPanel(\"Correlation Analysis\")\n             )\n    ),\n    \n    # ========================== TIME SERIES ========================== #     \n    \n    tabPanel(\"TIME SERIES FORECASTING\", tabName = \"time_series\", icon = icon(\"chart-line\"),\n             navbarPage(\"TIME SERIES FORECASTING\",\n                        tabPanel(\"Trend Prediction\"),\n                        tabPanel(\"Slope Graph\")\n             )\n    ),\n    \n    # =============================== DATA =============================== #     \n    \n    tabPanel(\"DATA\", tabName = \"data\", icon = icon(\"table\"),\n             navbarPage(\"DATA\" )),\n    # =============================== ABOUT =============================== #    \n    \n    tabPanel(\"ABOUT\", tabName = \"about\", icon = icon(\"info\")),\n    # ============================== CO.MMON USER INPUT =============================== #    \n    tabPanel(wellPanel(\n      sliderInput(\"slider_time\", \"Select date range\",min = as.Date(\"2021-02-24\"), \n                  max = as.Date(\"2021-04-24\"), \n                  value =  c(as.Date(\"2021-02-24\"),as.Date(\"2021-03-03\") )),\n      \n      dateRangeInput(\"daterange\", \"Input date range\", \n                     start = as.Date(\"2021-02-24\"),end = as.Date(\"2021-03-03\") )\n    ))\n  )\n)\n\nserver = function(input, output, session) {\n  \n  output$geo <- renderPlot ({\n    geofacet <- geofacet %>%\n      group_by(year, dwelling_type, Description ) %>%\n      summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),\n                medprice = median(kwh_per_acc, na.rm = TRUE))%>%\n      ungroup()\n    \n    # merge table with town name\n    geofacet_gas_consump <- inner_join(geofacet, area_grid,\n                                       by = c(\"Description\" = \"name\"))\n    \n    common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]\n    ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +\n      geom_line(aes(color = as.factor(dwelling_type))) +\n      # scale_x_date(date_labels = \"%b\") +\n      facet_geo(~Description, grid = common_grid) +\n      labs(title = \"Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\") +\n      # scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +\n      theme(plot.title = element_text(size=22),\n            axis.text.x = element_text(size = 10, angle = 45),\n            axis.text.y = element_text(size = 10),\n            strip.text = element_text(size = 10),\n            legend.position = \"right\")\n  })\n}\n\nshinyApp(ui , server )\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n3.4 Time Series Forecasting\n\npackages = c('tidyverse','tidyquant','tsibbledata','tsibble','feasts'\n             ,'stats','lubridate','data.table','rmarkdown','knitr')\nfor (p in packages) {\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: tidyquant\n\n\nLoading required package: PerformanceAnalytics\n\n\nLoading required package: xts\n\n\nLoading required package: zoo\n\n\n\nAttaching package: 'zoo'\n\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n\nAttaching package: 'xts'\n\n\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n\n\n\nAttaching package: 'PerformanceAnalytics'\n\n\nThe following object is masked from 'package:graphics':\n\n    legend\n\n\nLoading required package: quantmod\n\n\nLoading required package: TTR\n\n\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n\n\nLoading required package: tsibbledata\n\n\nLoading required package: tsibble\n\n\n\nAttaching package: 'tsibble'\n\n\nThe following object is masked from 'package:zoo':\n\n    index\n\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\n\nLoading required package: feasts\n\n\nLoading required package: fabletools\n\n\nLoading required package: data.table\n\n\n\nAttaching package: 'data.table'\n\n\nThe following object is masked from 'package:tsibble':\n\n    key\n\n\nThe following objects are masked from 'package:xts':\n\n    first, last\n\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n\n\nLoading required package: rmarkdown\n\n\nLoading required package: knitr\n\n\n\narima <- T2.3\narima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), \"%Y %m\"))\narima2 <- T3.4\narima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), \"%Y %m\"))\narima3 <- T3.5 \narima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), \"%Y %m\"))\n\npaged_table(arima)\n\n\n\n  \n\n\npaged_table(arima2)\n\n\n\n  \n\n\npaged_table(arima3)\n\n\n\n  \n\n\n\n\narima_tsbl  = as_tsibble(arima)\n\nUsing `Date` as index variable.\n\nhead(arima_tsbl)\n\n# A tsibble: 6 x 4 [1M]\n   year   mth peak_system_demand_mw     Date\n  <dbl> <dbl>                 <dbl>    <mth>\n1  2005     1                  5083 2005 Jan\n2  2005     2                  5285 2005 Feb\n3  2005     3                  5333 2005 Mar\n4  2005     4                  5408 2005 Apr\n5  2005     5                  5385 2005 May\n6  2005     6                  5298 2005 Jun\n\n\n\nfull_arima = arima_tsbl %>%\n  fill_gaps() %>% \n  # group_by_key() %>% \n  tidyr::fill(peak_system_demand_mw, .direction = \"down\")\n\nhead(full_arima)\n\n# A tsibble: 6 x 4 [1M]\n   year   mth peak_system_demand_mw     Date\n  <dbl> <dbl>                 <dbl>    <mth>\n1  2005     1                  5083 2005 Jan\n2  2005     2                  5285 2005 Feb\n3  2005     3                  5333 2005 Mar\n4  2005     4                  5408 2005 Apr\n5  2005     5                  5385 2005 May\n6  2005     6                  5298 2005 Jun\n\n\n\nfull_arima_mth_agg = full_arima %>%\n  # index_by(Date = ~ Date(.)) %>% \n  summarise(\n    avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)\n  )\n\nhead(full_arima_mth_agg)\n\n# A tsibble: 6 x 2 [1M]\n      Date avg_demand\n     <mth>      <dbl>\n1 2005 Jan       5083\n2 2005 Feb       5285\n3 2005 Mar       5333\n4 2005 Apr       5408\n5 2005 May       5385\n6 2005 Jun       5298\n\n\nSeasonal plot\n\nfull_arima %>%\n   gg_season(peak_system_demand_mw)+\n  labs(title = \"\",\n       subtitle = \"\",\n       y = \"peak_system_demand_mw\")\n\n\n\n\n\nfull_arima_2019 = full_arima %>%\n  filter(year == 2019) %>%\n  mutate(quarter= case_when(\n      mth >= 1 & mth <= 3 ~ 'Q1'\n      , mth >= 4 & mth <= 6 ~ 'Q2'\n      , mth >= 7 & mth <= 9 ~ 'Q3'\n      , mth >= 10 & mth <= 12 ~ 'Q4')) %>%\n    select(year, mth, peak_system_demand_mw, Date) \n\nfull_arima_2019 %>%\n   gg_lag(peak_system_demand_mw, geom = \"point\")+\n   labs(title = \"Lag plot of the time plot of the humidity level of hourly meterological data\",\n       y = \"Humidity level\")\n\n\n\n\n\nfull_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)\n\nhead(full_arima_acf)\n\n# A tsibble: 6 x 2 [1M]\n       lag      acf\n  <cf_lag>    <dbl>\n1       1M  0.385  \n2       2M -0.134  \n3       3M -0.296  \n4       4M  0.00274\n5       5M -0.0403 \n6       6M -0.283  \n\n\n\nfull_arima_2019 %>%\n  ACF(peak_system_demand_mw) %>%\n  autoplot() + labs(title=\"\")\n\n\n\n\n\nfull_arima_stl=full_arima %>% \n  summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>% \n  model(STL(peak_system_demand_mw ~ season(window = 5))) %>% \n  components()\n\nhead(full_arima_stl)\n\n# A dable: 6 x 7 [1M]\n# Key:     .model [1]\n# :        peak_system_demand_mw = trend + season_year + remainder\n  .model                              Date peak_…¹ trend seaso…² remai…³ seaso…⁴\n  <chr>                              <mth>   <dbl> <dbl>   <dbl>   <dbl>   <dbl>\n1 STL(peak_system_demand_mw ~ se… 2005 Jan    5083 5262.  -157.   -22.5    5240.\n2 STL(peak_system_demand_mw ~ se… 2005 Feb    5285 5277.   -29.2   37.5    5314.\n3 STL(peak_system_demand_mw ~ se… 2005 Mar    5333 5291.    38.8    2.88   5294.\n4 STL(peak_system_demand_mw ~ se… 2005 Apr    5408 5306.    52.9   49.1    5355.\n5 STL(peak_system_demand_mw ~ se… 2005 May    5385 5320.   102.   -37.6    5283.\n6 STL(peak_system_demand_mw ~ se… 2005 Jun    5298 5335.    17.7  -54.7    5280.\n# … with abbreviated variable names ¹​peak_system_demand_mw, ²​season_year,\n#   ³​remainder, ⁴​season_adjust\n\n\n\nfull_arima_stl %>% \n  summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>% \n  model(STL(peak_system_demand_mw ~ season(window = 5))) %>% \n  components() %>%\n  autoplot()+\n  labs(title = \"\",\n       y = \"peak_system_demand_mw\")\n\n\n\n\n\n\n3.5 Timetk\n\npackages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'\n             ,'tsibbletalk','tidymodels','earth'\n             ,'stats','lubridate','data.table','ggplot2','plotly'\n             ,'rmarkdown','knitr','devtools','tseries')\nfor (p in packages) {\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\nLoading required package: forecast\n\n\n\nAttaching package: 'forecast'\n\n\nThe following objects are masked from 'package:fabletools':\n\n    accuracy, forecast\n\n\nLoading required package: fable\n\n\n\nAttaching package: 'fable'\n\n\nThe following object is masked from 'package:tidyquant':\n\n    VAR\n\n\nLoading required package: tsibbletalk\n\n\nLoading required package: tidymodels\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n\n\n✔ broom        1.0.2     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.0.1\n✔ infer        1.0.4     ✔ workflows    1.1.3\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.1.0\n✔ recipes      1.0.3     \n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ psych::%+%()            masks ggplot2::%+%()\n✖ yardstick::accuracy()   masks forecast::accuracy(), fabletools::accuracy()\n✖ scales::alpha()         masks psych::alpha(), ggplot2::alpha()\n✖ data.table::between()   masks dplyr::between()\n✖ scales::discard()       masks purrr::discard()\n✖ plotly::filter()        masks dplyr::filter(), stats::filter()\n✖ data.table::first()     masks xts::first(), dplyr::first()\n✖ recipes::fixed()        masks stringr::fixed()\n✖ infer::generate()       masks fabletools::generate()\n✖ infer::hypothesize()    masks fabletools::hypothesize()\n✖ dplyr::lag()            masks stats::lag()\n✖ data.table::last()      masks xts::last(), dplyr::last()\n✖ dials::momentum()       masks TTR::momentum()\n✖ parsnip::null_model()   masks fabletools::null_model()\n✖ infer::observe()        masks shiny::observe()\n✖ yardstick::spec()       masks readr::spec()\n✖ recipes::step()         masks stats::step()\n✖ data.table::transpose() masks purrr::transpose()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\n\nLoading required package: earth\n\n\nLoading required package: Formula\n\n\nLoading required package: plotmo\n\n\nLoading required package: plotrix\n\n\n\nAttaching package: 'plotrix'\n\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\n\nThe following object is masked from 'package:psych':\n\n    rescale\n\n\nLoading required package: TeachingDemos\n\n\n\nAttaching package: 'TeachingDemos'\n\n\nThe following object is masked from 'package:plotly':\n\n    subplot\n\n\nLoading required package: devtools\n\n\nLoading required package: usethis\n\n\n\nAttaching package: 'devtools'\n\n\nThe following object is masked from 'package:recipes':\n\n    check\n\n\nLoading required package: tseries\n\n\n\narima %>%\n  ggplot(aes(x = Date, y = peak_system_demand_mw)) +\n  geom_line(size = 0.5)+\n  labs(title = \"\") +\n  theme(text = element_text(color = \"#444444\", family = 'Helvetica Neue')\n        ,plot.title = element_text(size = 35, color = '#333333')\n        ,axis.title = element_text(size = 14, color = '#333333')\n        ,axis.title.y = element_text(angle = 0, vjust = .5)\n        ) +\n    theme_tq() + \n    scale_color_tq()\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\narima_ts <- ts(data=arima$peak_system_demand_mw)\nplot.ts(arima_ts, plot.type=('single'))                   \n\n\n\n\n\narima_ds = diff(arima_ts, differences = 2)\nplot(arima_ds) \n\n\n\n\n\narima_arima = auto.arima(arima_ts)\narima_arima\n\nSeries: arima_ts \nARIMA(2,1,1) with drift \n\nCoefficients:\n         ar1      ar2      ma1    drift\n      0.6909  -0.0471  -0.9509  10.7283\ns.e.  0.0737   0.0728   0.0270   1.2458\n\nsigma^2 = 14226:  log likelihood = -1294.36\nAIC=2598.72   AICc=2599.01   BIC=2615.43\n\nplot(forecast(arima_arima))\n\n\n\n\n\n\n\n\nfull_arima %>%\n  gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')\n\n\n\n\n\nconsumption <- read_csv(\"data/T3-5.csv\")\nconsumption <- consumption %>% \n  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% \n  mutate(year = as.character(year))\n\nenergycost <- read_csv(\"data/T5-3.csv\")\nenergycost <- energycost %>% \n  mutate(year = as.character(year))\n\n#merge\na <- consumption %>% \n  select(\"year\", \"kwh_per_acc\") %>% \n  group_by(year) %>%\n  na.omit() %>%\n  summarize(kwh_per_acc=mean(kwh_per_acc))\n#b <- b %>% \n#  data.frame(energycost,a) %>% \n#  select(\"year\", \"kwh_per_acc\", \"energy_costs_cent_per_kwh\")\n\nconsumption %>% \n  group_by(year) %>%\n  # filter(year == \"2022\") %>% \n  ggplot(mapping = aes(x = year, y = kwh_per_acc)) +\n  # Make grouped boxplot\n  geom_boxplot(aes(fill = as.factor(Region)), color = \"grey\") +\n  theme_minimal() +\n  theme(legend.position = \"top\") +\n  scale_fill_viridis_d(option = \"C\") +\n  labs(title = \"Average consumption per year by Region\", y=\"kwh per acc\", fill = \"Region\")\n\n\n\n\n\nset.seed(1234)\n\nggbetweenstats(\n  data = consumption,\n  x = Region,\n  y = kwh_per_acc,\n  # type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\nconsumption %>%\n  mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%\n  ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +\n  geom_boxplot() +\n  stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n  theme(legend.position=\"none\") +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +\n  ggtitle(\"Boxplot of consumption per planning area\")\n\n\n\n\n\n#library(shiny)\n#library(shinydashboard)\n#library(shinythemes)\n#library(shinyWidgets)\nlibrary(RColorBrewer)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(geofacet)\nlibrary(treemap)\nlibrary(ggstatsplot)\nlibrary(ggridges)\n\n\n# Clustering\n# Filter the required data for clustering\n\n# remove month = \"Annual\"\n# remove dewlling_type/description = Overall\n# year 2018 and onwards\n# exclude region in description\n# Exclude Pioneer as data incomplete\n\nclus_data <- T3.5 %>% \n  filter(month != \"Annual\" & \n           year > 2017 & \n           dwelling_type != \"Overall\" &\n           !str_detect(Description,\"Region|Pioneer|Overall\"))\n\n# transform dataset\n\n# convert kwh into numbers\nclus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)\n\nWarning: NAs introduced by coercion\n\n# join month and year into a date\nclus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c(\"%Y %m\")) \n\n# drop month and year column\nclus_data <- subset(clus_data, select=-c(month, year, Region)) %>%\n  arrange(date)\n\n# pivot wider\nclus <- clus_data %>%\n  pivot_wider(names_from=date, values_from=kwh_per_acc) \n\n# omit na\nclus <- na.omit(clus)\nclus %>% relocate(Description, .before = dwelling_type)\n\n# A tibble: 261 × 56\n   Description   dwell…¹ 2018-…² 2018-…³ 2018-…⁴ 2018-…⁵ 2018-…⁶ 2018-…⁷ 2018-…⁸\n   <chr>         <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Bishan        1-room…    133.    123.    122     138.    140.    162.    148 \n 2 Bukit Merah   1-room…    160.    145.    136.    154.    164.    164.    164.\n 3 Bukit Timah   1-room…    123.    130.    137.    140     138.    148.    139.\n 4 Geylang       1-room…    170.    147.    152.    168     167.    198.    175 \n 5 Kallang       1-room…    134.    131     123.    139.    153     160.    150.\n 6 Marine Parade 1-room…    203.    177.    179.    209     185.    261.    220.\n 7 Novena        1-room…    165.    176.    140     163.    186.    186.    178.\n 8 Outram        1-room…    136.    146.    130.    132.    158.    158.    156.\n 9 Queenstown    1-room…    163.    153.    134.    157.    165     171.    179.\n10 Rochor        1-room…    219     136.    181     209.    190.    232.    197.\n# … with 251 more rows, 47 more variables: `2018-08-01` <dbl>,\n#   `2018-09-01` <dbl>, `2018-10-01` <dbl>, `2018-11-01` <dbl>,\n#   `2018-12-01` <dbl>, `2019-01-01` <dbl>, `2019-02-01` <dbl>,\n#   `2019-03-01` <dbl>, `2019-04-01` <dbl>, `2019-05-01` <dbl>,\n#   `2019-06-01` <dbl>, `2019-07-01` <dbl>, `2019-08-01` <dbl>,\n#   `2019-09-01` <dbl>, `2019-10-01` <dbl>, `2019-11-01` <dbl>,\n#   `2019-12-01` <dbl>, `2020-01-01` <dbl>, `2020-02-01` <dbl>, …\n\n\n\n# Clustering\nlibrary(dtwclust)\n\nLoading required package: proxy\n\n\n\nAttaching package: 'proxy'\n\n\nThe following objects are masked from 'package:stats':\n\n    as.dist, dist\n\n\nThe following object is masked from 'package:base':\n\n    as.matrix\n\n\nLoading required package: dtw\n\n\nLoaded dtw v1.23-1. See ?dtw for help, citation(\"dtw\") for use in publication.\n\n\ndtwclust:\nSetting random number generator to L'Ecuyer-CMRG (see RNGkind()).\nTo read the included vignettes type: browseVignettes(\"dtwclust\").\nSee news(package = \"dtwclust\") after package updates.\n\n# dendextend\n# tsclust\n\n\n# topdrinks_matrix <- data.matrix(topdrinks_n)\n# \n# topdrinks_d <- dist(normalize(topdrinks_matrix[c(1:12)]), method = \"euclidean\")\n# \n# topdrinks_clust <- hclust(topdrinks_d, method = \"average\")\n# topnum_k <- find_k(topdrinks_clust)\n# plot(topnum_k)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Our Team",
    "section": "",
    "text": "Khoo Wei Lun \nLaw Shiang Rou \nTasaporn Visawameteekul"
  },
  {
    "objectID": "test.html#column-1",
    "href": "test.html#column-1",
    "title": "Themed dashboard",
    "section": "Column",
    "text": "Column\n\nChart C\n\n\n\n\n\nChart D"
  },
  {
    "objectID": "Proposal.html",
    "href": "Proposal.html",
    "title": "Project Snapshot",
    "section": "",
    "text": "Singapore has progressively moved towards an open electricity market since 2001 to ensure a reliable energy supply and promote effective competition in the energy market.\nWith growing competition in the market, it becomes increasingly important for market players such as regulators, suppliers and retailers to understand the electricity consumption pattern in Singapore to ensure adequate supply planning and pricing structure.\nTo assist relevant market players in analyzing electricity consumption data effectively, we created this RShinny App to visualize Singapore electricity consumption pattern and trend, perform statistical analysis as well as forecast the future trends."
  },
  {
    "objectID": "Proposal.html#scope",
    "href": "Proposal.html#scope",
    "title": "Project Snapshot",
    "section": "2 Scope",
    "text": "2 Scope\nOur RShinny app allows users to interact with the data to:\n\nExplore the electricity consumption patterns and trends in Singapore,\nCluster planning areas based on similarities in consumption patterns,\nPerform inferential statistical analysis, and\nForecast future consumption trend.\n\nA detailed description and sketch of the proposed analyses and visualizations are presented in section 4 of this proposal."
  },
  {
    "objectID": "Proposal.html#data",
    "href": "Proposal.html#data",
    "title": "Project Snapshot",
    "section": "3 Data",
    "text": "3 Data\nThe data used in this project is extracted from Energy Market Authority (EMA) Singapore. It contains data between year 2005 and 2022, with a total of 35 tabs. The tabs are broadly categorized into 7 sections, namely:\n\nEnergy Supply\nEnergy Transformation\nEnergy Consumption\nEnergy Balances\nEnergy Prices\nSolar\nManpower\n\nFor this project, we will be focusing on household electricity consumption."
  },
  {
    "objectID": "Proposal.html#visualization-and-analysis",
    "href": "Proposal.html#visualization-and-analysis",
    "title": "Project Snapshot",
    "section": "4 Visualization and Analysis",
    "text": "4 Visualization and Analysis\n\n4.1 Overview Dashboard\nTo provide users some basic insights on the Singapore electricity consumption, an Overview tab is built for users to explore the electricity consumption by regions, planning areas and dwelling types. Changes over time are also visualized to provide users a more comprehensive view.\n\n4.1.1 Main R Packages & Functions\n\nggplot2: for descriptive visualization such as boxplots\nggiraph/plotly: for interactive visualization\ngeofacet: for visualization laid out according to the geographic topology\ntimetk: for time series visualization\n\n\n\n4.1.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.2 Clustering Analysis\nClustering analysis is performed to help users identify clusters with distinct consumption patterns. The clustering analysis is done using the consumption data for each planning area and dwelling type over time. This analysis will help stakeholders in future strategic planning activities such as supply planning and pricing.\n\n4.2.1 Main R Packages & Functions\n\ndtwclust: for time series clustering\ndendextend: to visualize and compare hierarchical clustering’s dendrogram\ntmap: representing clusters on interactive map visual\n\n\n\n4.2.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.3 Inferential Analysis\nWhen there are more than two sample groups, ANOVA (Analysis of Variance) is used to test if there are statistically significant differences between the means of these independent sample groups. In other words, it compares the means of different samples to determine the influence of one or more factors.\n[TBC] Correlation plots, also known as correlograms for more than two variables, facilitate the visualization of the correlation between continuous variables.[TBC]\n\n4.3.1 Main R Packages & Functions\n\nggplot2: for descriptive visualization such as boxplots\nggbetweenstats: A combination of box and violin plots along with jittered data points for between-subjects designs with statistical details included in the plot as a subtitle\nggcorrplot: Visualize a correlation matrix using ggplot2. It provides a solution for reordering the correlation matrix and displays the significance level on the correlogram. It includes also a function for computing a matrix of correlation p-values.\n\n\n\n4.3.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.4 Time Series Forecasting\nVarious predictive models are built onto the app for users to forecast the future consumption trends. The model accuracy and confidence level are also made available for users.\n\n4.4.1 Main R Packages & Functions\n\nmodeltime: The time series forecasting framework for use with the ‘tidymodels’ ecosystem. Models considered include ARIMA, Exponential Smoothing, SARIMA, Long Short-Term Memory and additional time series models from the ‘forecast’, ‘tseries’ and ‘prophet’ packages.\ntidymodels: a collection of packages for modeling and machine learning using tidyverse principles.\n\n\n\n4.4.2 Application Design\nINSERT SCREENSHOT\n\n\n\n4.5 Data\nA data view is introduced to provide the user with an overview of how the data appears. Users will be able to choose which table and columns to display.\n\n4.5.1 Visual Design"
  },
  {
    "objectID": "Proposal.html#project-timeline",
    "href": "Proposal.html#project-timeline",
    "title": "Project Snapshot",
    "section": "5 Project Timeline",
    "text": "5 Project Timeline"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html",
    "href": "Shiny_App_G9/Sandbox_cleaned.html",
    "title": "Sandbox_Cleaned",
    "section": "",
    "text": "packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', \"tidyr\", \"readr\")\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#read-data-and-compress-in-rds-file",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#read-data-and-compress-in-rds-file",
    "title": "Sandbox_Cleaned",
    "section": "2 Read data and compress in RDS file",
    "text": "2 Read data and compress in RDS file\nWe use the readr package in R to read three CSV files and store them as data frames in the variables T2.3, T3.4, and T3.5. Here’s a brief explanation of what each line does:\n\nlibrary(readr): This line loads the readr package, which provides functions for reading and writing delimited files in R.\nT2.3 <- read_csv(\"data/T2-3.csv\"): This line reads the CSV file located at \"data/T2-3.csv\" using the read_csv() function from the readr package. The resulting data frame is stored in the variable T2.3.\nT3.4 <- read_csv(\"data/T3-4.csv\"): This line reads the CSV file located at \"data/T3-4.csv\" using the read_csv() function from the readr package. The resulting data frame is stored in the variable T3.4.\nT3.5 <- read_csv(\"data/T3-5.csv\"): This line reads the CSV file located at \"data/T3-5.csv\" using the read_csv() function from the readr package. The resulting data frame is stored in the variable T3.5.\n\n\n# library(readr)\n\n# Peak System Demand\nT2.3 <- read_csv(\"data/T2-3.csv\")\n# Total Household Electricity Consumption by Dwelling Type\nT3.4 <- read_csv(\"data/T3-4.csv\")\n# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\nT3.5 <- read_csv(\"data/T3-5.csv\")\n\n\n2.1 Data table\nT2.3 : Peak System Demand\n\n\n# A tibble: 5 × 3\n   year   mth peak_system_demand_mw\n  <dbl> <dbl>                 <dbl>\n1  2005     1                  5083\n2  2005     2                  5285\n3  2005     3                  5333\n4  2005     4                  5408\n5  2005     5                  5385\n\n\nT3.4 : Total Household Electricity Consumption by Dwelling Type\n\n\n# A tibble: 5 × 4\n  year  month DWELLING_TYPE consumption_GWh\n  <chr> <chr> <chr>                   <dbl>\n1 2005  1     Overall                  448.\n2 2005  2     Overall                  437.\n3 2005  3     Overall                  480.\n4 2005  4     Overall                  534.\n5 2005  5     Overall                  535 \n\n\nT3.5 : Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\n\n\n# A tibble: 5 × 6\n  dwelling_type    year month Region         Description    kwh_per_acc\n  <chr>           <dbl> <chr> <chr>          <chr>          <chr>      \n1 1-room / 2-room  2005 1     Central Region Bishan         104.9      \n2 1-room / 2-room  2005 1     Central Region Bukit Merah    140.7      \n3 1-room / 2-room  2005 1     Central Region Central Region 136.5      \n4 1-room / 2-room  2005 1     Central Region Geylang        148.5      \n5 1-room / 2-room  2005 1     Central Region Kallang        115.6"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#overview",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#overview",
    "title": "Sandbox_Cleaned",
    "section": "3 1 Overview",
    "text": "3 1 Overview\n\n3.1 1.1 Introduction\n\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n3.2 1.2 Geofacet\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `E:\\ISSS608_VisualAnalytics\\ISSS608-GroupProject\\Shiny_App_G9\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n3.3 1.3 Consumption by Dwelling type and Town\n\ndwelling <- T3.4 %>%\n  filter(year %in% c(2005:2022)) %>%\n  filter(month %in% c(1:12)) %>%\n  filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',\n                              '5-room and Executive',\n                              'Private Apartments and Condominiums',\n                              'Landed Properties', 'Others')) %>%\n  mutate(date = parse_date_time(paste0(year, \"-\", month,\"-1\"),\"ymd\"))\n\n#Add Private vs Public Classification\ndwelling$class <- case_when(\n    dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',\n                                 'Landed Properties', 'Others') ~ \"Private\",\n    dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',\n                                  '5-room and Executive') ~ \"Public\")\n\nsaveRDS(dwelling, file = \"RDS/dwelling.rds\")\n\n\n\ndwelling <- readRDS(file = \"RDS/dwelling.rds\") # intro\n\n\ntown <- subset(T3.5, Description != 'Overall' & Description !='Central Region' & \n                 Description !='East Region' & Description !='North East Region' &\n                 Description !='North Region' & Description !='West Region' &\n                 kwh_per_acc != 's' & dwelling_type != 'Private Housing' &\n                 dwelling_type != 'Public Housing' & month != 'Annual') %>%\n  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%\n  mutate(date = parse_date_time(paste0(year, \"-\", month,\"-1\"),\"ymd\"))\n\ntown_final <- town %>% \n  group_by(date, Description) %>%\n  summarise(consumption = sum(kwh_per_acc)/1000)\n\nchosendata <- town_final %>%\n  mutate(type = Description) %>%\n  mutate(title = 'Town') %>%\n  mutate(year = year(date)) %>%\n  mutate (month = month(date)) %>%\n  select(c('year','month','date','type','consumption','title'))\nsaveRDS(chosendata, file = \"RDS/chosendata.rds\")\n\n\n3.3.1 Plot 1 - Line plot\n\nchosendata <- readRDS(file = \"RDS/chosendata.rds\") # intro\nggplot(data = chosendata, aes(x = date)) +\n  geom_line(aes(y = consumption, colour = type)) + \n  labs(title = paste0(\"Electricity Consumption by \",chosendata[1,6]),\n      x = \"Year\", y = paste0(\"Consumption, GWh \")) +\n  scale_color_discrete(name=\"\") +\n  theme(legend.position=\"bottom\")\n\n\n\n\n\n\n3.3.2 Plot 2 - Cycle plot\n\n\n\n\n\n3.3.3 Plot 3 - Sparkline Table\n\n\n\n\n\n3.3.4 Plot 4 - Slopegraph"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#clustering",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#clustering",
    "title": "Sandbox_Cleaned",
    "section": "4 2. Clustering",
    "text": "4 2. Clustering\n\n4.1 2.1 Hierachical clustering\n\nlibrary(lubridate)\n\nT3.5 <- read_csv(\"data/T3-5.csv\")\nclus_data <- T3.5 %>% \n  filter(month != \"Annual\" & \n           year > 2017 & \n           dwelling_type != \"Overall\" &\n           !str_detect(Description,\"Region|Pioneer|Overall\"))\n\n# transform dataset\n# convert kwh into numbers\nclus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)\n# join month and year into a date\nclus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c(\"%Y %m\")) \n\n# drop month and year column\nclus_data <- subset(clus_data, select=-c(month, year, Region)) %>%\n  arrange(date)\n\n# pivot wider\nclus <- clus_data %>%\n  pivot_wider(names_from=date, values_from=kwh_per_acc) \n\n# omit na\nclus <- na.omit(clus)\nclus <- clus %>% relocate(Description, .before = dwelling_type)\n\nsaveRDS(clus_data, file = \"RDS/clus_data.rds\")\nsaveRDS(clus, file = \"RDS/clus.rds\")\n\nclus_data <- readRDS(file = \"RDS/clus_data.rds\") # clustering\nclus <- readRDS(file = \"RDS/clus.rds\") # clustering\n# clus_data\n# clus\n\n\n4.1.1 Plot 1 - Method selection table\n\n# once user have gotten the clustering method from above, they need to input that to find the optimal number of k\nlibrary(dendextend)\nlibrary(BBmisc)\nclus_group1 <- clus[,-c(2)] %>%\n  group_by(Description) %>%\n  summarise_each(list(sum))\n\nclustering <- dist(normalize(clus_group1[, -1]),  method = \"maximum\")\ndend_expend(clustering)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6394564\n2      unknown        ward.D2 0.7218247\n3      unknown         single 0.8325438\n4      unknown       complete 0.8976064\n5      unknown        average 0.9123991\n6      unknown       mcquitty 0.9094702\n7      unknown         median 0.8238489\n8      unknown       centroid 0.8998871\n\n\n\n\n4.1.2 Plot 2 - Heatmap\n\nlibrary(heatmaply)\nclus_group1 <- clus[,-c(2)] %>%\n  group_by(Description) %>%\n  summarise_each(list(sum))\n\n# making \"Description\" the row name (index)\nrow.names(clus_group1) <- clus_group1$Description\n\n# Making it into a matrix\nclus_matrix1 <- data.matrix(clus_group1)\n\n# plot\nheatmaply(clus_matrix1[,-c(1)],\n          scale = \"column\",\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          Colv=NA,\n          seriate = \"none\",\n          k_row = 3,\n          margins = c(NA,200,50,NA),\n          colors = viridis(\n            n= 256, alpha=1, \n            begin=0, end=1,\n            option=\"viridis\"),\n          fontsize_row = 5,\n          fontsize_col = 5,\n          main=\"Hierarchical Clustering\",\n          ylab = \"Towns\",\n          xlab = \"Time\")\n\n\n\n\n\n\n\n4.1.3 Plot 3 - Number of cluster plot\n\nclust2 <- hclust(clustering, method = \"mcquitty\")\nnum_k <- find_k(clust2)\nplot(num_k)\n\n\n\n\n\n\n4.1.4 Plot 4 - Map\n\n## Add clusters to dataframe\n\nnum_clus <- cutree(clust2, k=3)\nclus_hc <- cbind(clus_group1, cluster = as.factor(num_clus))\n\nlibrary(sf)\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414) \n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `E:\\ISSS608_VisualAnalytics\\ISSS608-GroupProject\\Shiny_App_G9\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\nsingapore <- st_transform(mpsz, 4326)\n\nlibrary(tmap)\n# change Description to upper case\nclus_hc$Description <- toupper(clus_hc$Description)\n\n# Preparing the choropleth map\nmpsz_clus <- left_join(singapore, clus_hc, by = c(\"PLN_AREA_N\" = \"Description\"))\ntmap_mode(\"view\")\ntm_shape(mpsz_clus)+\n  tmap_options(check.and.fix = TRUE)+\n  tm_fill(\"cluster\", id=paste(\"PLN_AREA_N\"),\n          style = \"pretty\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.7)\n\n\n\n\n\n\n\n\n\n4.2 2.2 Time Series clustering\n\nlibrary(dtwclust)\n\nLoading required package: proxy\n\n\n\nAttaching package: 'proxy'\n\n\nThe following objects are masked from 'package:stats':\n\n    as.dist, dist\n\n\nThe following object is masked from 'package:base':\n\n    as.matrix\n\n\nLoading required package: dtw\n\n\nLoaded dtw v1.23-1. See ?dtw for help, citation(\"dtw\") for use in publication.\n\n\ndtwclust:\nSetting random number generator to L'Ecuyer-CMRG (see RNGkind()).\nTo read the included vignettes type: browseVignettes(\"dtwclust\").\nSee news(package = \"dtwclust\") after package updates.\n\nlibrary(tibble)\nlibrary(ggdendro)\n\n\nAttaching package: 'ggdendro'\n\n\nThe following object is masked from 'package:dendextend':\n\n    theme_dendro\n\n# Clustering Method (type) (\"partitional\", \"hierarchical\", \"tadpole\", \"fuzzy\".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods\n# parameter 1: Number of cluster (k)\n# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust\n# parameter 3: hierarchical clustering method (\"ward.D\", \"ward.D2\", \"single\", \"complete\", \"average\", \"mcquitty\", \"median\" or \"centroid\" .)\n\n\ncluster_dtw <- tsclust(clus_matrix1[,-c(1)],\n                       type = \"h\", \n                       k=2,\n                       distance=\"dtw\",\n                       control = hierarchical_control(method = \"ward.D\"),\n                       preproc = NULL,\n                       args=tsclust_args(dist = list(window.size = 5L)))\n\nhclus_dtw <- cutree(cluster_dtw, k=4) %>%\n  as.data.frame(.) %>%\n  rename(.,cluster_group = .) %>%\n  rownames_to_column(\"type_col\")\n\n# hcdata <- dendro_data(cluster_dtw)\n# names_order <- hcdata$labels$label\n\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(timetk)\n\n# add the cluster number\ndtw_cluster <- clus_group1 %>%\n  left_join(hclus_dtw, by=c(\"Description\" = \"type_col\")) \n\n# change date columns into rows\ndtw_cluster_t <- dtw_cluster %>%\n  mutate_at(vars(contains(\"202\")),as.numeric) %>%\n  gather(Date, value, 2:55)\n\n# Add the word \"Cluster\"\ndtw_cluster_t$cluster_group <- paste(\"Cluster\", dtw_cluster_t$cluster_group)\n\n# convert Date into date format\ndtw_cluster_t$Date <- parse_date_time(dtw_cluster_t$Date, orders=c(\"%Y-%m-%d\")) \n\n# plot time series by cluster\n\nts <- plot_time_series(.data=dtw_cluster_t,\n                 .date_var=Date, \n                 .value=value,\n                 .color_var=Description,\n                 .facet_var=cluster_group,\n                 .facet_ncol=2,\n                 .facet_scales = \"free_y\",\n                 .smooth=FALSE,\n                 .line_size = 0.3,\n                 .plotly_slider = TRUE,\n                 .title = \"Time Series Plot by cluster\") \n\nts <- ts %>%\n  layout(hovermode=\"x\",\n         hoverlabel=list(font=list(size=7)))\nts\n\n\n\n\n# how to modify the tooltip? Town is being shown twice here...\n\nlibrary(sf)\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414) \n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `E:\\ISSS608_VisualAnalytics\\ISSS608-GroupProject\\Shiny_App_G9\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\n\n\nWarning: st_crs<- : replacing crs does not reproject data; use st_transform for\nthat\n\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\nsingapore <- st_transform(mpsz, 4326)\n\nlibrary(tmap)\n# change Description to upper case\ndtw_cluster_t$Description <- toupper(dtw_cluster_t$Description)\n\n# Preparing the choropleth map\nmpsz_clus_dtw <- left_join(singapore, dtw_cluster_t, by = c(\"PLN_AREA_N\" = \"Description\"))\n\nWarning in sf_column %in% names(g): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 2 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(mpsz_clus_dtw)+\n  tmap_options(check.and.fix = TRUE)+\n  tm_fill(\"cluster_group\", id=paste(\"PLN_AREA_N\"),\n          style = \"pretty\",\n          palette = \"Greens\") +\n  tm_borders(alpha = 0.7)\n\nWarning: The shape mpsz_clus_dtw is invalid. See sf::st_is_valid"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#inferential---anova",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#inferential---anova",
    "title": "Sandbox_Cleaned",
    "section": "5 3. Inferential - ANOVA",
    "text": "5 3. Inferential - ANOVA\n\nT3.5 <- readRDS(file = \"RDS/T3-5.rds\")\nconsumption <- T3.5\nconsumption <- consumption %>% \n  mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% \n  mutate(year = as.character(year))\nsaveRDS(consumption, file = \"RDS/anova.rds\")\n\n\n5.1 3.1 Box plot anova\n\n# LIBRARY -----------------------------------------------------------------\n# library(forecast)\n# library(dplyr)\n# library(tidyr)\n# library(tidyverse)\n\npackages = c('dplyr', 'ggplot2',\n             'ggstatsplot', 'ggrepel', 'ggridges', 'gt', 'gtExtras',\n             'knitr','plotly', 'lubridate', 'psych','ggstatsplot',\n             'reactablefmtr', 'readr', 'sf', 'shiny', 'shinydashboard',\n             'shinythemes', 'shinyWidgets', 'stats', 'tibble', 'tidymodels',\n             'tidyquant', 'tidyr', 'tidyverse'\n            )\n\nfor(p in packages){\n  if(!require(p,character.only = T)){\n    install.packages(p)\n  }\n  library(p,character.only = T)\n}\n\n# READ DATA ---------------------------------------------------------------\n## Read compressed data file\nT2.3 <- readRDS(file = \"RDS/T2-3.rds\") # Peak System Demand\nT3.4 <- readRDS(file = \"RDS/T3-4.rds\") # Total Household Electricity Consumption by Dwelling Type\nT3.5 <- readRDS(file = \"RDS/T3-5.rds\") # Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type\ndwelling <- readRDS(file = \"RDS/dwelling.rds\")\ntown <- readRDS(file = \"RDS/town.rds\")\n\n# reading the map file\nmpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',\n                layer = 'MP14_SUBZONE_WEB_PL',\n                crs = 3414)\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `E:\\ISSS608_VisualAnalytics\\ISSS608-GroupProject\\Shiny_App_G9\\master-plan-2014-subzone-boundary-web-shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21 / Singapore TM\n\n# Import the area grid data.\narea_grid <- read_csv(\"data/areagrid.csv\")\nsingapore <- st_transform(mpsz, 4326)\n\n\n# PARAMETER ---------------------------------------------------------------\nyears <- c(\"2022\",\"2021\", \"2020\", \"2019\", \"2018\", \"2017\")\nregions <- c( \"Central Region\", \"North East Region\", \"East Region\", \"North Region\", \"West Region\")\n\n\n# UI ----------------------------------------------------------------------\nui = dashboardPage(\n  dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),\n  \n  dashboardSidebar(width = 210,\n                   sidebarMenu(\n                     menuItem(\" INFERENTIAL STATISTICS\",  \n                              tabName = \"inferential\", \n                              icon = icon(\"magnifying-glass-chart\")\n                              )\n                   )\n  ),\n  dashboardBody(\n    tabItems(\n      \n      ## 3 INFERENTIAL STATISTICS ------------------------------------------------\n      tabItem(\n        tabName = \"inferential\",\n        navbarPage(\"INFERENTIAL STATISTICS\", \n                   \n                   ### 3.1 anova ---------------------------------------------\n                   tabPanel(\"ANOVA\",\n                            fluidPage(\n                              fluidRow(\n                                column(5,\n                                       pickerInput(inputId = \"anovainput\", \n                                                   label = \"Select Parameter\",\n                                                   choices = c(\"dwelling_type\", \"Region\", \"year\"), \n                                                   selected = \"dwelling_type\",\n                                                   options = list(`actions-box` = TRUE), \n                                                   multiple = F),\n                                       verbatimTextOutput(\"anovastat\")\n                                ),\n                                column(7, plotOutput(\"dwellingstat\"))\n                              ),\n                              \n                              fluidRow(\n                                column(5,\n                                       pickerInput(inputId = \"region\", \n                                                   label = \"Select Region\",\n                                                   choices = regions, \n                                                   selected = \"Central Region\",\n                                                   options = list(`actions-box` = TRUE), \n                                                   multiple = F),\n                                       verbatimTextOutput(\"anovastat2\")\n                                ),\n                                column(7, plotOutput(\"dwellingstat2\"))\n                              )\n                            ))\n        ))\n    ) #close tabItems\n  ) #close dashboard body\n) #close UI\n\n# SERVER ------------------------------------------------------------------\n\nserver = function(input, output, session) {\n  \n  # anova -----------------------------------------------------------------\n  consumption <- T3.5\n  consumption <- consumption %>% \n    mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>% \n    mutate(year = as.character(year))\n  \n  observeEvent(input$anovainput,{\n    if(input$anovainput == \"Region\"){output$dwellingstat <- renderPlot({\n      consumption %>%\n        mutate(class = fct_reorder(Region, kwh_per_acc, .fun='mean')) %>%\n        ggplot( aes(x=reorder(Region, kwh_per_acc), y=kwh_per_acc)) +\n        geom_boxplot() +\n        stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n        theme(legend.position=\"none\") +\n        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n        ggtitle(\"Boxplot of consumption per planning area\")\n    })\n    }\n    if(input$anovainput == \"year\") {\n  output$dwellingstat <- renderPlot({\n    ggbetweenstats(\n  data = consumption,\n  x = year,\n  y = kwh_per_acc,\n  # type = \"np\",\n  messages = FALSE\n)\n})}\n    if(input$anovainput == \"dwelling_type\"){output$dwellingstat <- renderPlot({\n      consumption %>%\n        mutate(class = fct_reorder(dwelling_type, kwh_per_acc, .fun='mean')) %>%\n        ggplot( aes(x=reorder(dwelling_type, kwh_per_acc), y=kwh_per_acc)) +\n        geom_boxplot() +\n        stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n        theme(legend.position=\"none\") +\n        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n        ggtitle(\"Boxplot of consumption per planning area\")\n    })}\n    if(input$anovainput == \"dwelling_type\"){\n      output$anovastat <- renderPrint({\n        summary(aov(kwh_per_acc ~ dwelling_type, data = consumption))\n      })}\n    if(input$anovainput == \"Region\"){\n      output$anovastat <- renderPrint({\n        summary(aov(kwh_per_acc ~ Region, data = consumption))\n      })}\n    if(input$anovainput == \"year\"){\n      output$anovastat <- renderPrint({\n        summary(aov(kwh_per_acc ~ year, data = consumption))\n      })}\n  })\n  \n  # anova2 ---------------------------------------------------------------------\n  observeEvent(input$region,{\n    output$dwellingstat2 <- renderPlot({\n      consumption %>%\n        filter(Region==input$region) %>% \n        mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%\n        ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +\n        geom_boxplot() +\n        stat_summary(fun.y=mean, geom=\"point\", color=\"red\") +\n        theme(legend.position=\"none\") +\n        theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1)) +\n        ggtitle(\"Boxplot of consumption per planning area\")\n    })\n    \n    output$anovastat2 <- renderPrint({\n      consumption %>% \n        filter(Region == input$region)\n      summary(aov(kwh_per_acc ~ Description, data = consumption))\n    })\n  })\n}\n\nshinyApp(ui = ui, server = server)\n\nShiny applications not supported in static R Markdown documents\n\n\n\n\n5.2 3.2 Betweenstats plot anova"
  },
  {
    "objectID": "Shiny_App_G9/Sandbox_cleaned.html#time-series-forecasting",
    "href": "Shiny_App_G9/Sandbox_cleaned.html#time-series-forecasting",
    "title": "Sandbox_Cleaned",
    "section": "6 4. Time series forecasting",
    "text": "6 4. Time series forecasting"
  }
]