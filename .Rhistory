plot(forecast(arima_ts, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
forecast(arima_ts, h =10, model = fit)
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
library(forecast)
library(tsibble)
library(zoo)
arima <- town
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' &
Description !='East Region' & Description !='North East Region' &
Description !='North Region' & Description !='West Region' &
kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
dwelling_type != 'Public Housing' & month != 'Annual') %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
library(readr)
#T2.3 <- read_csv("data/T2-3.csv")
#saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' &
Description !='East Region' & Description !='North East Region' &
Description !='North Region' & Description !='West Region' &
kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
dwelling_type != 'Public Housing' & month != 'Annual') %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
#Adding housing type
town$type <- case_when(
town$dwelling_type %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
town$dwelling_type %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
library(forecast)
library(tsibble)
library(zoo)
# Convert data to tsibble format
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
# Fit model and generate forecasts
fit <- ets(window(arima_ts))
fcst <- forecast(fit, h = 10)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
plot(forecast(arima_ts, h =10, model = fit2))
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
a = c(sample(1:1000,212))
12*17+7
len(a$avgcon)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
timeseries <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
View(a)
12*17+6
a$avgcon
a
a = c(sample(1:1000,212))
a
runApp('Shiny_App_G9')
arima.ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima.ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
arima_ts <- arima.ts %>%
as_tsibble()
View(arima_ts)
runApp('Shiny_App_G9')
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
arima_ts <- arima_ts %>% as_tibble()
fit <- ets(window(arima_ts))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
arima_ts <- arima_ts %>%
as_tsibble()
fit <- ets(window(arima_ts))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10, model = fit))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(a, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(a$avgcon, h =10))
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10))
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
arima_ts
runApp('Shiny_App_G9')
auto.arima(arima_ts, d=1, D=1)
auto.arima(arima_ts, d=1)
auto.arima(arima_ts)
plot(arima_ts)
plot(forecast(arima_ts))
plot(forecast(arima_arima))
plot(forecast(a$avgcon))
plot(forecast(arima.ts))
plot(forecast(arima_ts))
plot(forecast(arima_ts, fit = fit))
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
fit <- arfima(x)
tsdisplay(residuals(fit))
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
plot(forecast(arima_ts, fit=fit))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
plot(forecast(arfima(arima_ts), fit=fit))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
forecast(arfima(arima_ts))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
forecast(fit)
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
forecast(arima_ts)
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
plot(forecast(fit,h=30))
library(fracdiff)
m <- modelAR(arima_ts)
m <- modelAR(arima_ts)
modelAR(arima_ts)
library(fracdiff)
m <- modelAR(arima_ts, FUN)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
forecast(arima_ts)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
forecast(arima_ts, fit = arima(window(arima_ts)))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
forecast(arima_ts, fit = arima(window(arima_ts)))
n <- auto.arima(arima_ts)
plot(forecast(n))
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
n <- auto.arima(arima_ts)
n <- auto.arima(arima_ts)
plot(forecast(n))
plot(n)
n <- auto.arima(arima_ts)
n <- auto.arima(arima_ts)
p
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon)
arima_arima = auto.arima(arima_ts, d = 1, D = 1)
plot(forecast(arima_arima))
arima <- T2.3
library(readr)
T2.3 <- read_csv("data/T2-3.csv")
saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_ts))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_ts, fit=arfima(arima_ts)))
