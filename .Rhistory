arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
plot(forecast(arima_arima))
a
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
a<-  plot(forecast(arima_arima))
a
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9/example')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
library(shiny)
library(ggplot2)
library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(ggstatsplot)
library(psych)
library(lubridate)
library(ggrepel)
library(plotly)
library(tidyverse)
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
View(T2.3)
runApp('Shiny_App_G9')
arima_ds = diff(arima_ts, differences = 2)
plotly(arima_ds)
arima_ds = diff(arima_ts, differences = 2)
plotly(arima_ds)
arima_ds = diff(arima_ts, differences = 2)
ggplotly(plot(arima_ds) )
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
ggplotly(plot(forecast(arima_arima)))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
ggplotly(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
plotly(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
plot(forecast(arima_arima))
runApp('Shiny_App_G9')
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
runApp('Shiny_App_G9')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 1 2022-2023/Term 1 AY 2022-2023/Workshops/Workshop1/Hands-on 2 Exercise (BMI-BMR).R')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 1 2022-2023/Term 1 AY 2022-2023/Workshops/example project - Copy/shiny_workshop 1 v3.R')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 1 2022-2023/Term 1 AY 2022-2023/Workshops/Workshop2/R file/Example_dynamic_UI.R')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 2 2022-2023/Term 2 AY 2022-2023/Workshop1/workshop1_handson.R')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 2 2022-2023/Term 2 AY 2022-2023/Workshop1/workshop1_handson.R')
runApp('C:/Users/TASAPORN/OneDrive - Singapore Management University/ASAR Workshops Term 2 2022-2023/Term 2 AY 2022-2023/Workshop1/workshop1_handson.R')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9/example')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, seasonal = TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, seasonal = TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, seasonal = FALSE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, seasonal = FALSE, trace=FALSE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =3, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =2, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =5, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =5, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =10, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =12, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE, test="kpss")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE, test="kpss")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE, test="adf")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE, test="pp")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE, test="pp")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE, test="kpss")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE, seasonal.test="seas")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE, seasonal.test="oscb")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE, seasonal.test="ocsb")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, seasonal = FALSE, trace=TRUE, seasonal.test="hegy")
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_arima))
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='histogram')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='histogram')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='scatter')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='spectrum')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial', points=TRUE)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial', smooth=TRUE)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial', smooth=FALSE)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial', theme=theme_bw())
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), theme=theme_bw(), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
View(arima_tsbl)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
filter(year==2015) %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
filter(year==2016) %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
runApp('Shiny_App_G9')
View(arima_arima)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_arima))
View(arima)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima <- arima %>%
filter(year=2015)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima <- arima %>%
filter(year==2015)
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_arima))
runApp('Shiny_App_G9')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
# filter(year==2017) %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
# filter(year==2017) %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
runApp('Shiny_App_G9')
consumption <- read_csv("data/T3-5.csv")
consumption <- consumption %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(year = as.character(year))
energycost <- read_csv("data/T5-3.csv")
energycost <- energycost %>%
mutate(year = as.character(year))
#merge
a <- consumption %>%
select("year", "kwh_per_acc") %>%
group_by(year) %>%
na.omit() %>%
summarize(kwh_per_acc=mean(kwh_per_acc))
#b <- b %>%
#  data.frame(energycost,a) %>%
#  select("year", "kwh_per_acc", "energy_costs_cent_per_kwh")
consumption %>%
group_by(year) %>%
# filter(year == "2022") %>%
ggplot(mapping = aes(x = year, y = kwh_per_acc)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(Region)), color = "grey") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
labs(title = "Average consumption per year by Region", y="kwh per acc", fill = "Region")
set.seed(1234)
ggbetweenstats(
data = consumption,
x = Region,
y = kwh_per_acc,
# type = "np",
messages = FALSE
)
consumption %>%
mutate(class = fct_reorder(Description, kwh_per_acc, .fun='mean')) %>%
ggplot( aes(x=reorder(Description, kwh_per_acc), y=kwh_per_acc)) +
geom_boxplot() +
stat_summary(fun.y=mean, geom="point", color="red") +
theme(legend.position="none") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ggtitle("Boxplot of consumption per planning area")
#library(shiny)
#library(shinydashboard)
#library(shinythemes)
#library(shinyWidgets)
library(RColorBrewer)
library(tidyverse)
library(lubridate)
library(geofacet)
library(treemap)
library(ggstatsplot)
library(ggridges)
# Clustering
# Filter the required data for clustering
# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards
# exclude region in description
# Exclude Pioneer as data incomplete
clus_data <- T3.5 %>%
filter(month != "Annual" &
year > 2017 &
dwelling_type != "Overall" &
!str_detect(Description,"Region|Pioneer|Overall"))
# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m"))
# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
arrange(date)
# pivot wider
clus <- clus_data %>%
pivot_wider(names_from=date, values_from=kwh_per_acc)
# omit na
clus <- na.omit(clus)
clus %>% relocate(Description, .before = dwelling_type)
# Clustering
library(dtwclust)
# dendextend
# tsclust
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
