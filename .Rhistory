row.clust[i] <- paste("Cluster-", i, " size")
}
for(i in c(2:k)){
stats.names[i] <- paste("Test", i-1)
for(j in seq_along(clust.assess)){
output.stats[j, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust.assess])[j]
}
for(d in 1:k) {
cluster.sizes[d, i] <- unlist(cluster.stats(d = dist, clustering = cutree(tree, k = i))[clust.size])[d]
dim(cluster.sizes[d, i]) <- c(length(cluster.sizes[i]), 1)
cluster.sizes[d, i]
}
}
output.stats.df <- data.frame(output.stats)
cluster.sizes <- data.frame(cluster.sizes)
cluster.sizes[is.na(cluster.sizes)] <- 0
rows.all <- c(clust.assess, row.clust)
# rownames(output.stats.df) <- clust.assess
output <- rbind(output.stats.df, cluster.sizes)[ ,-1]
colnames(output) <- stats.names[2:k]
rownames(output) <- rows.all
is.num <- sapply(output, is.numeric)
output[is.num] <- lapply(output[is.num], round, 2)
output
}
# find optimal k - Silhouette method
ggplot(data = data.frame(t(cstats.table(clus_dist, hc, 15))),
aes(x=cluster.number, y=avg.silwidth)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative (complete) - Silhouette") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
# find k
num_k <- find_k(hc)
plot(num_k)
data.frame(t(cstats.table(clus_dist, hc, 15)))
# find optimal k - Silhouette method
ggplot(data = data.frame(t(cstats.table(clus_dist, hc, 15))),
aes(x=cluster.number, y=within,cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative (complete) - Silhouette") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
# find optimal k - Silhouette method
ggplot(data = data.frame(t(cstats.table(clus_dist, hc, 15))),
aes(x=cluster.number, y=within.cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative (complete) - Silhouette") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
# find optimal k - Silhouette method
ggplot(data = data.frame(t(cstats.table(clus_dist, hc, 15))),
aes(x=cluster.number, y=within.cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative (complete) - Elbow") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
# find optimal k - Silhouette
num_k <- find_k(hc)
plot(num_k)
dendro <- as.dendrogram(hc)
dendro
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 7, value =   c("darkslategray", "darkslategray4", "darkslategray3", "gold3", "darkcyan", "cyan3", "gold3")) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
ggd1 <- as.ggdend(dendro.col)
ggplot(ggd1, theme = theme_minimal()) +
labs(x = "Num. observations", y = "Height", title = "Dendrogram, k = 7")
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 7, value =   c("darkslategray", "darkslategray4", "darkslategray3", "gold3", "darkcyan", "cyan3", "cyan")) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
ggd1 <- as.ggdend(dendro.col)
ggplot(ggd1, theme = theme_minimal()) +
labs(x = "Num. observations", y = "Height", title = "Dendrogram, k = 7")
# hierarchical clustering using various methods
# (ward.D, ward.D2, single, complete, average, mcquitty, median, centroid)
# complete
hc <- hclust(clus_dist, method = "complete")
# Dendogram - k is for user to calibrate
plot(hc, label = FALSE, main = "Agglomerative, complete method")
rect.hclust(hc, k=6, border="darkslategray4")
# hierarchical clustering using various methods
# (ward.D, ward.D2, single, complete, average, mcquitty, median, centroid)
# complete
hc <- hclust(clus_dist, method = "complete")
# Dendogram - k is for user to calibrate
plot(hc, label = FALSE, main = "Agglomerative, complete method")
rect.hclust(hc, k=6, border="gold3")
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 6, value =   c("darkslategray", "darkslategray4", "darkslategray3", "gold3", "darkcyan", "cyan3", "cyan")) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
ggd1 <- as.ggdend(dendro.col)
ggplot(ggd1, theme = theme_minimal()) +
labs(x = "Num. observations", y = "Height", title = "Dendrogram, k = 7")
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 6, value =   c("darkslategray4", "cyan", "darkslategray3", "gold3", "darkcyan", "cyan3",)) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 6, value =   c("darkslategray4", "cyan", "darkslategray3", "gold3", "darkcyan", "cyan3")) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
ggd1 <- as.ggdend(dendro.col)
ggplot(ggd1, theme = theme_minimal()) +
labs(x = "Num. observations", y = "Height", title = "Dendrogram, k = 6")
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 6, value =   c("cyan","darkslategray4", "darkslategray3", "gold3", "darkcyan", "cyan3")) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
ggd1 <- as.ggdend(dendro.col)
ggplot(ggd1, theme = theme_minimal()) +
labs(x = "Num. observations", y = "Height", title = "Dendrogram, k = 6")
dendro <- as.dendrogram(hc)
dendro.col <- dendro %>%
set("branches_k_color", k = 6, value =   c("grey20","darkslategray4", "darkslategray3", "gold3", "darkcyan", "cyan3")) %>%
set("branches_lwd", 0.6) %>%
set("labels_colors",
value = c("darkslategray")) %>%
set("labels_cex", 0.5)
ggd1 <- as.ggdend(dendro.col)
ggplot(ggd1, theme = theme_minimal()) +
labs(x = "Num. observations", y = "Height", title = "Dendrogram, k = 6")
# find optimal k - Silhouette
num_k <- find_k(hc)
plot(num_k)
# hierarchical clustering using various methods - average
hc <- hclust(clus_dist, method = "average")
# Dendogram
plot(hc, label = FALSE, main = "Agglomerative, average method")
rect.hclust(hc, k=5, border="blue")
divisive.clust <- diana(as.matrix(clus_dist),
diss = TRUE, keep.diss = TRUE)
plot(divisive.clust, label=FALSE, main = "Divisive Clustering")
# k is for user to calibrate
rect.hclust(divisive.clust, k=5, border="blue")
divisive.clust <- diana(as.matrix(clus_dist),
diss = TRUE, keep.diss = TRUE)
plot(divisive.clust, label=FALSE, main = "Divisive Clustering")
# k is for user to calibrate
rect.hclust(divisive.clust, k=5, border="gold3")
# Find optimal k - elbow method
ggplot(data = data.frame(t(cstats.table(clus_dist, divisive.clust, 15))),
aes(x=cluster.number, y=within.cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Divisive clustering") +
labs(x = "Num.of clusters", y = "Within clusters sum of squares (SS)") +
theme(plot.title = element_text(hjust = 0.5))
# find optimal k - elbow method
ggplot(data = data.frame(t(cstats.table(clus_dist, hc, 15))),
aes(x=cluster.number, y=within.cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative (complete) - Elbow") +
labs(x = "Num.of clusters", y = "Average silhouette width") +
theme(plot.title = element_text(hjust = 0.5))
# find optimal k - elbow method
ggplot(data = data.frame(t(cstats.table(clus_dist, hc, 15))),
aes(x=cluster.number, y=within.cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Agglomerative (complete) - Elbow") +
labs(x = "Num.of clusters", y = "Within clusters sum of squares (SS)") +
theme(plot.title = element_text(hjust = 0.5))
# Find optimal k - elbow method
ggplot(data = data.frame(t(cstats.table(clus_dist, divisive.clust, 15))),
aes(x=cluster.number, y=within.cluster.ss)) +
geom_point()+
geom_line()+
ggtitle("Divisive clustering - elbow") +
labs(x = "Num.of clusters", y = "Within clusters sum of squares (SS)") +
theme(plot.title = element_text(hjust = 0.5))
## choose the number of k and add to dataframe
num_clus <- cutree(divisive.clust, k=6)
clus <- cbind(clus, as.factor(num_clus))
clus
View(clus)
View(clus)
divisive.clust <- diana(as.matrix(clus_dist),
diss = TRUE, keep.diss = TRUE)
plot(divisive.clust, label=FALSE, main = "Divisive Clustering")
# k is for user to calibrate
rect.hclust(divisive.clust, k=6, border="gold3")
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
singapore <- st_transform(mpsz, 4326)
View(clus)
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
singapore <- st_transform(mpsz, 4326)
singapore
View(clus)
## choose the number of k and add to dataframe
num_clus <- cutree(divisive.clust, k=6)
clus <- cbind(clus, cluster = as.factor(num_clus))
View(clus)
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
library(tmap)
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
tmap_options(check.and.fix = TRUE)+
tm_fill("cluster", id=paste("PLN_AREA_N"),
n = 6,
style = "pretty",
palette = "Greens") +
tm_borders(alpha = 0.7)
library(tmap)
# change Description to upper case
clus$cluster <- toupper(clus$cluster)
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
tmap_options(check.and.fix = TRUE)+
tm_fill("cluster", id=paste("PLN_AREA_N"),
n = 6,
style = "pretty",
palette = "Greens") +
tm_borders(alpha = 0.7)
library(tmap)
# change Description to upper case
clus$cluster <- toupper(clus$cluster)
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
tmap_options(check.and.fix = TRUE)+
tm_fill("cluster", id=paste("PLN_AREA_N"),
style = "pretty",
palette = "Greens") +
tm_borders(alpha = 0.7)
library(tmap)
# change Description to upper case
clus$cluster <- toupper(clus$cluster)
clus
# Preparing the choropleth map
# mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
# tmap_mode("view")
# tm_shape(mpsz_clus)+
#   tmap_options(check.and.fix = TRUE)+
#   tm_fill("cluster", id=paste("PLN_AREA_N"),
#           style = "pretty",
#           palette = "Greens") +
#   tm_borders(alpha = 0.7)
library(tmap)
# change Description to upper case
clus$Description <- toupper(clus$Description)
clus
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
tmap_options(check.and.fix = TRUE)+
tm_fill("cluster", id=paste("PLN_AREA_N"),
style = "pretty",
palette = "Greens") +
tm_borders(alpha = 0.7)
library(tmap)
# change Description to upper case
clus$Description <- toupper(clus$Description)
clus
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
tmap_options(check.and.fix = TRUE)+
tm_fill("cluster", id=paste("PLN_AREA_N"),
style = "pretty",
palette = "Blues") +
tm_borders(alpha = 0.7)
## choose the number of k and add to dataframe
num_clus <- cutree(divisive.clust, k=6)
clus_hc <- cbind(clus, cluster = as.factor(num_clus))
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
singapore <- st_transform(mpsz, 4326)
library(tmap)
# change Description to upper case
clus_hc$Description <- toupper(clus_hc$Description)
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus_hc, by = c("PLN_AREA_N" = "Description"))
View(clus_hc)
# Filter the required data for clustering
# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards due to missing data
# exclude "%region" in description
# Exclude Pioneer as data is incomplete
clus_data <- T3.5 %>%
filter(month != "Annual" &
year > 2017 &
dwelling_type != "Overall" &
!str_detect(Description,"Region|Pioneer|Overall"))
# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m"))
# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
arrange(date)
# pivot wider
clus <- clus_data %>%
pivot_wider(names_from=date, values_from=kwh_per_acc)
# omit na
clus <- na.omit(clus)
clus <- clus %>% relocate(Description, .before = dwelling_type)
## choose the number of k and add to dataframe
num_clus <- cutree(divisive.clust, k=6)
clus_hc <- cbind(clus, cluster = as.factor(num_clus))
library(sf)
# reading the map file
mpsz <- st_read(dsn = 'master-plan-2014-subzone-boundary-web-shp',
layer = 'MP14_SUBZONE_WEB_PL',
crs = 3414)
singapore <- st_transform(mpsz, 4326)
library(tmap)
# change Description to upper case
clus_hc$Description <- toupper(clus_hc$Description)
# Preparing the choropleth map
mpsz_clus <- left_join(singapore, clus_hc, by = c("PLN_AREA_N" = "Description"))
tmap_mode("view")
tm_shape(mpsz_clus)+
tmap_options(check.and.fix = TRUE)+
tm_fill("cluster", id=paste("PLN_AREA_N"),
style = "pretty",
palette = "Blues") +
tm_borders(alpha = 0.7)
library(factoextra)
#library(factoextra)
# scale
clus_kmeans <- scale(clus)
install.packages("NbClust")
# library(factoextra)
library(NbClust)
pamgower <- pam(clus_dist, diss = TRUE, k=5)
fviz_silhouette(pamgower)
install.packages("factoextra")
library(factoextra)
library(NbClust)
pamgower <- pam(clus_dist, diss = TRUE, k=5)
fviz_silhouette(pamgower)
install.packages("tidyr")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
install.packages("vctrs")
install.packages("vctrs")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
install.packages("vctrs")
install.packages("vctrs")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
library(vctrs)
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
library(readr)
#T2.3 <- read_csv("data/T2-3.csv")
#saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
# Filter the required data for clustering
# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards due to missing data
# exclude "%region" in description
# Exclude Pioneer as data is incomplete
clus_data <- T3.5 %>%
filter(month != "Annual" &
year > 2017 &
dwelling_type != "Overall" &
!str_detect(Description,"Region|Pioneer|Overall"))
# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m"))
# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
arrange(date)
# pivot wider
clus <- clus_data %>%
pivot_wider(names_from=date, values_from=kwh_per_acc)
# omit na
clus <- na.omit(clus)
clus <- clus %>% relocate(Description, .before = dwelling_type)
# Clustering
library(cluster)
library(dendextend)
# Convert to factor
clus$Description <- factor(clus$Description)
clus$dwelling_type <- factor(clus$dwelling_type)
# calculate distance - can only use "gower" because data has categorical variable
clus_dist <- daisy(clus, metric="gower")
library(factoextra)
library(NbClust)
pamgower <- pam(clus_dist, diss = TRUE, k=5)
fviz_silhouette(pamgower)
library(factoextra)
library(NbClust)
kmeanscat2 <- eclust(clus, "kmeans", hc_metric="euclidean", k=2)
