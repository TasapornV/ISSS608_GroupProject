# parameter 4: seriate (Optimal leaf ordering, Gruvaeus and Wainer, mean, none)
# parameter 5: scale / normalize / percentize (the code for this part is different)
# Remove dwelling type
clus_group1 <- clus[,-c(2)] %>%
group_by(Description) %>%
summarise_each(list(sum))
# making "Description" the row name (index)
row.names(clus_group1) <- clus_group1$Description
# Making it into a matrix
clus_matrix1 <- data.matrix(clus_group1)
# plot
heatmaply(clus_matrix1[,-c(1)],
scale = "column",
dist_method = "euclidean",
hclust_method = "average",
Colv=NA,
seriate = "none",
k_row = 3,
margins = c(NA,200,50,NA),
colors = viridis(
n= 256, alpha=1,
begin=0, end=1,
option="viridis"),
fontsize_row = 5,
fontsize_col = 5,
main="Hierarchical Clustering",
ylab = "Towns",
xlab = "Time")
# parameter: method
# user will need to input the distance calculated method here to determine which clustering method is optimal
library(dendextend)
clustering <- dist(normalize(clus_group1,-c(1)),  method = "maximum")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
library(readr)
T2.3 <- read_csv("data/T2-3.csv")
saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
# Filter the required data for clustering
# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards due to missing data
# exclude "%region" in description
# Exclude Pioneer as data is incomplete
clus_data <- T3.5 %>%
filter(month != "Annual" &
year > 2017 &
dwelling_type != "Overall" &
!str_detect(Description,"Region|Pioneer|Overall"))
# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m"))
# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
arrange(date)
# pivot wider
clus <- clus_data %>%
pivot_wider(names_from=date, values_from=kwh_per_acc)
# omit na
clus <- na.omit(clus)
clus <- clus %>% relocate(Description, .before = dwelling_type)
# clus_data
# clus
library(heatmaply)
# parameter 1: distance method ("euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski")
# parameter 2: hclust method ("ward.D", "ward.D2","single","complete","average", "mcquitty", "median" or "centroid")
# parameter 3: number of clusters
# parameter 4: seriate (Optimal leaf ordering, Gruvaeus and Wainer, mean, none)
# parameter 5: scale / normalize / percentize (the code for this part is different)
# Remove dwelling type
clus_group1 <- clus[,-c(2)] %>%
group_by(Description) %>%
summarise_each(list(sum))
# making "Description" the row name (index)
row.names(clus_group1) <- clus_group1$Description
# Making it into a matrix
clus_matrix1 <- data.matrix(clus_group1)
# plot
heatmaply(clus_matrix1[,-c(1)],
scale = "column",
dist_method = "euclidean",
hclust_method = "average",
Colv=NA,
seriate = "none",
k_row = 3,
margins = c(NA,200,50,NA),
colors = viridis(
n= 256, alpha=1,
begin=0, end=1,
option="viridis"),
fontsize_row = 5,
fontsize_col = 5,
main="Hierarchical Clustering",
ylab = "Towns",
xlab = "Time")
# parameter: method
# user will need to input the distance calculated method here to determine which clustering method is optimal
library(dendextend)
clustering <- dist(normalize(clus_group1,-c(1)),  method = "maximum")
runApp('Shiny_App_G9')
<<<<<<< HEAD
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
=======
library(shiny); runApp('app_ex.R')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
# library(readr)
# Peak System Demand
T2.3 <- read_csv("data/T2-3.csv")
# Total Household Electricity Consumption by Dwelling Type
T3.4 <- read_csv("data/T3-4.csv")
# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
T3.5 <- read_csv("data/T3-5.csv")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
?yearmonth
library(tsibble)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(arima_tsbl)
head(full_arima)
library(timetk)
# arima_tsbl$Date <- as.Date(arima_tsbl$Date)
arima_tsbl %>%
plot_time_series(Date, peak_system_demand_mw, .facet_ncol = 2,.interactive = TRUE)
library(timetk)
arima_tsbl$Date <- as.Date(arima_tsbl$Date)
arima_tsbl %>%
plot_time_series(Date, peak_system_demand_mw, .facet_ncol = 2,.interactive = TRUE)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(arima_tsbl)
head(full_arima)
saveRDS(arima_tsbl, file = "RDS/arima_tsbl.rds")
saveRDS(full_arima, file = "RDS/full_arima.rds")
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' &
Description !='East Region' & Description !='North East Region' &
Description !='North Region' & Description !='West Region' &
kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
dwelling_type != 'Public Housing' & month != 'Annual') %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
View(town)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
View(arima)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima)
View(arima_tsbl)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima, date, 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima, date, month)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima, date, 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, 30)
arima_tsbl  = as_tsibble(arima,index= date)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
View(T2.3)
arima <- town %>%
group_by(date) %>%
mutate(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
mutate(sum = sum(kwh_per_acc)) %>%
select("sum", "date", "month", "year")
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
select("sum", "date", "month", "year")
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima_tsbl  = as_tsibble(arima)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
# arima3 <- arima3 %>%
#   group_by(Date) %>%
#   summarise(avg = mean(kwh_per_acc))
paged_table(arima)
arima <- T2.3
View(T2.3)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima$date <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
View(arima_tsbl)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima$date <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
saveRDS(arima_tsbl, file = "RDS/arima_tsbl.rds")
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(sum, .direction = "down")
head(arima_tsbl)
head(full_arima)
saveRDS(full_arima, file = "RDS/full_arima.rds")
library(timetk)
arima_tsbl$date <- as.Date(arima_tsbl$date)
arima_tsbl %>%
plot_time_series(date, sum, .facet_ncol = 2,.interactive = TRUE)
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
View(full_arima)
full_arima_stl=full_arima %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components()
View(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "consumption")
full_arima_stl=full_arima %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components()
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "consumption")
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
# filter(year==2017) %>%
fill_gaps() %>%
tidyr::fill(sum, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(sum), plot_type='partial')
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()
full_arima_stl=full_arima %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components()
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
# arima3 <- arima3 %>%
#   group_by(Date) %>%
#   summarise(avg = mean(kwh_per_acc))
paged_table(arima)
arima_tsbl  = as_tsibble(arima)
head(arima_tsbl)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(full_arima)
full_arima_mth_agg = full_arima %>%
# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
head(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(a = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = sum(`sum`)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(`sum` = sum(`sum`)) %>%
model(STL(`sum` ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(`sum` = avg(`sum`)) %>%
model(STL(`sum` ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = avg(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = mean(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima$date <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
saveRDS(arima_tsbl, file = "RDS/arima_tsbl.rds")
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(sum, .direction = "down")
head(arima_tsbl)
head(full_arima)
saveRDS(full_arima, file = "RDS/full_arima.rds")
library(timetk)
arima_tsbl$date <- as.Date(arima_tsbl$date)
arima_tsbl %>%
plot_time_series(date, sum, .facet_ncol = 2,.interactive = TRUE)
library(timetk)
arima_tsbl$date <- as.Date(arima_tsbl$date)
arima_tsbl %>%
plot_time_series(date, sum, .facet_ncol = 2,.interactive = TRUE)
full_arima_stl %>%
summarise(sum = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
>>>>>>> d341321295ee2d195fb384f9f9e8f57bf8b1a186
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
