#cycleplot
#Computing year average by months
hline.data <- sysdemand %>%
group_by(mth) %>%
summarise(avg_demand = mean(peak_system_demand_mw))
#Plotting cycleplot
p_cycleplot <-
ggplot() +
geom_line(data = sysdemand,
aes(x=year,y=peak_system_demand_mw, group=mth), colour = "black") +
geom_hline(data = hline.data,
aes(yintercept=avg_demand),
linetype=6,
colour="red",
size=0.5) +
facet_grid(~mth) +
theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
labs(title = "Cycleplot of Peak System Demand (MW), Jan'05 to Jun'22") +
xlab("") +
ylab("MW")
p_cycleplot
#cycleplot
sysdemand21 <- sysdemand %>%
filter(year %in% c(2005:2021))
#Computing year average by months
hline.data <- sysdemand21 %>%
group_by(mth) %>%
summarise(avg_demand = mean(peak_system_demand_mw))
#Plotting cycleplot
p_cycleplot <-
ggplot() +
geom_line(data = sysdemand21,
aes(x=year,y=peak_system_demand_mw, group=mth), colour = "black") +
geom_hline(data = hline.data,
aes(yintercept=avg_demand),
linetype=6,
colour="red",
size=0.5) +
facet_grid(~mth) +
theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
labs(title = "Cycleplot of Peak System Demand (MW), 2005 to 2021") +
xlab("") +
ylab("MW")
p_cycleplot
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
mean_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly(),
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
mean_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.yearly(),
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
mean_sysdemand <- sysdemand %>%
mutate(date = ymd(`date`)) %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.yearly(),
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
mean_sysdemand <- sysdemand %>%
mutate(date = ymd(`date`)) %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
mean_sysdemand
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
mean_sysdemand <- sysdemand %>%
mutate(date = ymd(`date`)) %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
fun_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
fun_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = mean,
na.rm      = TRUE,
col_rename = "mean_mw"
)
fun_sysdemand
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
fun_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = mean,
na.rm      = TRUE,
col_rename = "fun_mw"
)
fun_sysdemand %>%
ggplot(aes(x = date, y = fun_mw)) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
x = "", y = "MW") +
#    facet_wrap(~ package, ncol = 3, scale = "free_y") +
expand_limits(y = 0) +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
#Allow users to choose apply.quarterly or apply.yearly
#Allow users to choose mean, median, sd, min, max
fun_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = mean,
na.rm      = TRUE,
col_rename = "fun_mw"
)
fun_sysdemand %>%
ggplot(aes(x = date, y = fun_mw)) +
geom_point() +
geom_smooth(method = "loess") +
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
x = "", y = "MW") +
#    facet_wrap(~ package, ncol = 3, scale = "free_y") +
#    expand_limits(y = 0) +
scale_color_tq() +
theme_tq() +
theme(legend.position="none")
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs
)
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs()
)
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs
)
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
probs = c(0.25, 0.5, 0.75)
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs
)
stats_sysdemand
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
probs = c(0.25, 0.5, 0.75)
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs
)
stats_sysdemand %>%
ggplot(aes(x = date, y = `50%`)) +
# Ribbon
geom_ribbon(aes(ymin = `25%`, ymax = `75%`),
color = palette_light()[[1]], fill = palette_light()[[1]], alpha = 0.5) +
# Points
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
# Aesthetics
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
x = "", y = "MW",
subtitle = "Range of 1st and 3rd quartile to show volatility") +
scale_color_tq(theme = "dark") +
theme_tq() +
theme(legend.position="none")
stats_sysdemand
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
probs = c(0.25, 0.5, 0.75)
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs
)
#Plotting 1st & 3rd quartile vs median
stats_sysdemand %>%
ggplot(aes(x = date, y = `50%`)) +
# Ribbon
geom_ribbon(aes(ymin = `25%`, ymax = `75%`),
color = palette_light()[[1]], fill = palette_light()[[1]], alpha = 0.5) +
# Points
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
# Aesthetics
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
x = "", y = "MW",
subtitle = "Range of 1st and 3rd quartile to show volatility") +
scale_color_tq(theme = "dark") +
theme_tq() +
theme(legend.position="bottom")
#Allow users to choose apply.quarterly or apply.yearly
# Custom function to return mean, sd, quantiles
custom_stat <- function(x, na.rm = TRUE, ...) {
# x     = numeric vector
# na.rm = boolean, whether or not to remove NA's
# ...   = additional args passed to quantile
c(mean    = mean(x, na.rm = na.rm),
stdev   = sd(x, na.rm = na.rm),
quantile(x, na.rm = na.rm, ...))
}
# Applying the custom function by quarter
probs = c(0.25, 0.5, 0.75)
stats_sysdemand <- sysdemand %>%
tq_transmute(
select     = peak_system_demand_mw,
mutate_fun = apply.quarterly,
FUN        = custom_stat,
na.rm      = TRUE,
probs = probs
)
#Plotting 1st & 3rd quartile vs median
stats_sysdemand %>%
ggplot(aes(x = date, y = `50%`)) +
# Ribbon
geom_ribbon(aes(ymin = `25%`, ymax = `75%`),
color = palette_light()[[1]], fill = palette_light()[[1]], alpha = 0.5) +
# Points
geom_point() +
geom_smooth(method = "loess", se = FALSE) +
# Aesthetics
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
x = "", y = "MW",
subtitle = "Range of 1st and 3rd quartile to show volatility") +
scale_color_tq(theme = "dark") +
theme_tq()
#Plotting mean vs std dev
stats_sysdemand %>%
ggplot(aes(x = stdev, y = mean)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Mean vs standard deviation of Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22") +
scale_color_tq() +
theme_tq()
#Plotting mean vs std dev
stats_sysdemand %>%
ggplot(aes(x = stdev, y = mean)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Mean vs standard deviation of Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22") +
scale_color_tq() +
theme_tq() +
theme(plot.title = element_text(size = 12))
#Plotting mean vs std dev
stats_sysdemand %>%
ggplot(aes(x = stdev, y = mean)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Mean vs Std Dev of Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22") +
scale_color_tq() +
theme_tq() +
theme(plot.title = element_text(size = 12))
#Plotting mean vs std dev
stats_sysdemand %>%
ggplot(aes(x = stdev, y = mean)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
subtitle = "Mean vs Standard Deviation") +
scale_color_tq() +
theme_tq() +
theme(plot.title = element_text(size = 12))
#Plotting mean vs std dev
stats_sysdemand %>%
ggplot(aes(x = stdev, y = mean)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Average Monthly Peak System Demand by Quarter, Jan'05 to Jun'22",
subtitle = "Mean vs Standard Deviation") +
scale_color_tq() +
theme_tq()
View(T3.4)
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others'))
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others'))
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others'))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others'))
dwelling
View(dwelling)
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others'))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
View(T3.4)
View(dwelling)
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", mth,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b'%Y"))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly')
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", mth,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b'%Y"))
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", mth,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b'%Y"))
packages = c('tidyverse','tidyquant','tsibbledata','tsibble','feasts'
,'stats','lubridate','data.table','rmarkdown','knitr')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
install.packages("rmarkdown")
packages = c('tidyverse','tidyquant','tsibbledata','tsibble','feasts'
,'stats','lubridate','data.table','rmarkdown','knitr')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", mth,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b'%Y"))
