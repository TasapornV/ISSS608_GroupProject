<<<<<<< HEAD
=======
# parameter 4: seriate (Optimal leaf ordering, Gruvaeus and Wainer, mean, none)
# parameter 5: scale / normalize / percentize (the code for this part is different)
# Remove dwelling type
clus_group1 <- clus[,-c(2)] %>%
group_by(Description) %>%
summarise_each(list(sum))
# making "Description" the row name (index)
row.names(clus_group1) <- clus_group1$Description
# Making it into a matrix
clus_matrix1 <- data.matrix(clus_group1)
# plot
heatmaply(clus_matrix1[,-c(1)],
scale = "column",
dist_method = "euclidean",
hclust_method = "average",
Colv=NA,
seriate = "none",
k_row = 3,
margins = c(NA,200,50,NA),
colors = viridis(
n= 256, alpha=1,
begin=0, end=1,
option="viridis"),
fontsize_row = 5,
fontsize_col = 5,
main="Hierarchical Clustering",
ylab = "Towns",
xlab = "Time")
# parameter: method
# user will need to input the distance calculated method here to determine which clustering method is optimal
library(dendextend)
clustering <- dist(normalize(clus_group1,-c(1)),  method = "maximum")
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
library(readr)
T2.3 <- read_csv("data/T2-3.csv")
saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
# Filter the required data for clustering
# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards due to missing data
# exclude "%region" in description
# Exclude Pioneer as data is incomplete
clus_data <- T3.5 %>%
filter(month != "Annual" &
year > 2017 &
dwelling_type != "Overall" &
!str_detect(Description,"Region|Pioneer|Overall"))
# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m"))
# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
arrange(date)
# pivot wider
clus <- clus_data %>%
pivot_wider(names_from=date, values_from=kwh_per_acc)
# omit na
clus <- na.omit(clus)
clus <- clus %>% relocate(Description, .before = dwelling_type)
# clus_data
# clus
library(heatmaply)
# parameter 1: distance method ("euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski")
# parameter 2: hclust method ("ward.D", "ward.D2","single","complete","average", "mcquitty", "median" or "centroid")
# parameter 3: number of clusters
# parameter 4: seriate (Optimal leaf ordering, Gruvaeus and Wainer, mean, none)
# parameter 5: scale / normalize / percentize (the code for this part is different)
# Remove dwelling type
clus_group1 <- clus[,-c(2)] %>%
group_by(Description) %>%
summarise_each(list(sum))
# making "Description" the row name (index)
row.names(clus_group1) <- clus_group1$Description
# Making it into a matrix
clus_matrix1 <- data.matrix(clus_group1)
# plot
heatmaply(clus_matrix1[,-c(1)],
scale = "column",
dist_method = "euclidean",
hclust_method = "average",
Colv=NA,
seriate = "none",
k_row = 3,
margins = c(NA,200,50,NA),
colors = viridis(
n= 256, alpha=1,
begin=0, end=1,
option="viridis"),
fontsize_row = 5,
fontsize_col = 5,
main="Hierarchical Clustering",
ylab = "Towns",
xlab = "Time")
# parameter: method
# user will need to input the distance calculated method here to determine which clustering method is optimal
library(dendextend)
clustering <- dist(normalize(clus_group1,-c(1)),  method = "maximum")
runApp('Shiny_App_G9')
<<<<<<< HEAD
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
=======
library(shiny); runApp('app_ex.R')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
# library(readr)
# Peak System Demand
T2.3 <- read_csv("data/T2-3.csv")
# Total Household Electricity Consumption by Dwelling Type
T3.4 <- read_csv("data/T3-4.csv")
# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
T3.5 <- read_csv("data/T3-5.csv")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
?yearmonth
library(tsibble)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(arima_tsbl)
head(full_arima)
library(timetk)
# arima_tsbl$Date <- as.Date(arima_tsbl$Date)
arima_tsbl %>%
plot_time_series(Date, peak_system_demand_mw, .facet_ncol = 2,.interactive = TRUE)
library(timetk)
arima_tsbl$Date <- as.Date(arima_tsbl$Date)
arima_tsbl %>%
plot_time_series(Date, peak_system_demand_mw, .facet_ncol = 2,.interactive = TRUE)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(arima_tsbl)
head(full_arima)
saveRDS(arima_tsbl, file = "RDS/arima_tsbl.rds")
saveRDS(full_arima, file = "RDS/full_arima.rds")
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' &
Description !='East Region' & Description !='North East Region' &
Description !='North Region' & Description !='West Region' &
kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
dwelling_type != 'Public Housing' & month != 'Annual') %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
View(town)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
View(arima)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima)
View(arima_tsbl)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima, date, 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima, date, month)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima, date, 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, 30)
arima_tsbl  = as_tsibble(arima,index= date)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
View(T2.3)
arima <- town %>%
group_by(date) %>%
mutate(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
mutate(sum = sum(kwh_per_acc)) %>%
select("sum", "date", "month", "year")
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
select("sum", "date", "month", "year")
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
>>>>>>> parent of d409dc5 (Tidy up)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima_tsbl  = as_tsibble(arima,index= date, interval = 30)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima_tsbl  = as_tsibble(arima)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
# arima3 <- arima3 %>%
#   group_by(Date) %>%
#   summarise(avg = mean(kwh_per_acc))
paged_table(arima)
arima <- T2.3
View(T2.3)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima$date <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
View(arima_tsbl)
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima$date <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
saveRDS(arima_tsbl, file = "RDS/arima_tsbl.rds")
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(sum, .direction = "down")
head(arima_tsbl)
head(full_arima)
saveRDS(full_arima, file = "RDS/full_arima.rds")
library(timetk)
arima_tsbl$date <- as.Date(arima_tsbl$date)
arima_tsbl %>%
plot_time_series(date, sum, .facet_ncol = 2,.interactive = TRUE)
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
View(full_arima)
full_arima_stl=full_arima %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components()
View(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "consumption")
full_arima_stl=full_arima %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components()
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "consumption")
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
# filter(year==2017) %>%
fill_gaps() %>%
tidyr::fill(sum, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(sum), plot_type='partial')
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()
full_arima_stl=full_arima %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components()
full_arima_stl %>%
# summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
# arima3 <- arima3 %>%
#   group_by(Date) %>%
#   summarise(avg = mean(kwh_per_acc))
paged_table(arima)
arima_tsbl  = as_tsibble(arima)
head(arima_tsbl)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(full_arima)
full_arima_mth_agg = full_arima %>%
# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
head(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(a = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = sum(`sum`)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(`sum` = sum(`sum`)) %>%
model(STL(`sum` ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(`sum` = avg(`sum`)) %>%
model(STL(`sum` ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = avg(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl %>%
summarise(sum = mean(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
arima <- town %>%
group_by(date) %>%
summarise(sum = sum(kwh_per_acc)) %>%
mutate(month = month(date)) %>%
mutate(year = year(date))
arima$date <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
arima_tsbl  = as_tsibble(arima)
saveRDS(arima_tsbl, file = "RDS/arima_tsbl.rds")
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(sum, .direction = "down")
head(arima_tsbl)
head(full_arima)
saveRDS(full_arima, file = "RDS/full_arima.rds")
library(timetk)
arima_tsbl$date <- as.Date(arima_tsbl$date)
arima_tsbl %>%
plot_time_series(date, sum, .facet_ncol = 2,.interactive = TRUE)
library(timetk)
arima_tsbl$date <- as.Date(arima_tsbl$date)
arima_tsbl %>%
plot_time_series(date, sum, .facet_ncol = 2,.interactive = TRUE)
full_arima_stl %>%
summarise(sum = sum(sum)) %>%
model(STL(sum ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
>>>>>>> d341321295ee2d195fb384f9f9e8f57bf8b1a186
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
<<<<<<< HEAD
shiny::runApp('Shiny_App_G9')
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
library(gtExtras)
library(svglite)
#Preparing the data for report
d_report <- chosendata %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Category`= type) %>%
group_by(`Category`) %>%
summarise("Min" = min(consumption, na.rm = T),
"Max" = max(consumption, na.rm = T),
"Average" = mean(consumption, na.rm = T))
library(gtExtras)
library(svglite)
#Preparing the data for report
d_report <- chosendata %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Category`= type) %>%
group_by(`Category`) %>%
summarise("Min" = min(consumption, na.rm = T),
"Max" = max(consumption, na.rm = T),
"Average" = mean(consumption, na.rm = T))
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
# library(readr)
# Peak System Demand
T2.3 <- read_csv("data/T2-3.csv")
# Total Household Electricity Consumption by Dwelling Type
T3.4 <- read_csv("data/T3-4.csv")
# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
T3.5 <- read_csv("data/T3-5.csv")
#| fig-width: 10
head(T2.3, 5)
#| fig-width: 10
head(T3.4, 5)
#| fig-width: 10
head(T3.5, 5)
library(shiny)
library(shinydashboard)
introtext = "Singapore has progressively moved towards an open electricity market since 2001
to ensure a reliable energy supply and promote effective competition in the energy market.
However, it is challenging to analyze the energy market and make informed decisions due to
several variable components that could influence the market. First, the price of electricity
in the wholesale market fluctuates depending on the electricity demand and supply, which are
dependent on consumption patterns as well as gas industry respectively. About 95% of electricity
is generated using natural gas. Next, there are also multiple parties (Electricity Market Authority,
Power generation companies, Electricity Retailers, etc) involved in the electricity market.
To address this challenge, we build this RShinny app to provide relevant stakeholders with means
to analyse and understand the data with applicable analytics models. Also, we want to help the
users explore more information about the Singapore energy market easily through visualizations."
ui = dashboardPage(
dashboardHeader(title = 'Singapore Energy Consumption', titleWidth = 400),
dashboardSidebar(width = 210,
sidebarMenu(
menuItem(" OVERVIEW", tabName = 'overview',    icon = icon("chalkboard-user"))
)),
dashboardBody(
tabItems(
tabItem(
tabName = "overview",
navbarPage( "OVERVIEW",
tabPanel("Introduction",introtext)
)
)
)
)
)
server = function(input, output, session) {}
shinyApp(ui = ui, server = server)
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
# library(readr)
# Peak System Demand
T2.3 <- read_csv("data/T2-3.csv")
# Total Household Electricity Consumption by Dwelling Type
T3.4 <- read_csv("data/T3-4.csv")
# Average Monthly Household Electricity Consumption by Planning Area & Dwelling Type
T3.5 <- read_csv("data/T3-5.csv")
#| fig-width: 10
head(T2.3, 5)
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
#Add Private vs Public Classification
dwelling$class <- case_when(
dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
saveRDS(dwelling, file = "RDS/dwelling.rds")
dwelling <- readRDS(file = "RDS/dwelling.rds") # intro
head(dwelling, 5)
dwelling_tog <- dwelling %>%
mutate(type = DWELLING_TYPE) %>%
mutate(consumption = consumption_GWh) %>%
mutate(title = 'Dwelling Type') %>%
select(c('year','month','date','type','consumption','class', 'title'))
# saveRDS(dwelling_tog, file = "RDS/dwelling_tog.rds")
town_tog <- town_final %>%
mutate(type = Description) %>%
mutate(title = 'Town') %>%
mutate(year = year(date)) %>%
mutate (month = month(date)) %>%
select(c('year','month','date','type','consumption','title'))
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
#Add Private vs Public Classification
dwelling$class <- case_when(
dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
saveRDS(dwelling, file = "RDS/dwelling.rds")
dwelling <- readRDS(file = "RDS/dwelling.rds") # intro
head(dwelling, 5)
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' &
Description !='East Region' & Description !='North East Region' &
Description !='North Region' & Description !='West Region' &
kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
dwelling_type != 'Public Housing' & month != 'Annual') %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
town_final <- town %>%
group_by(date, Description) %>%
summarise(consumption = sum(kwh_per_acc)/1000)
region <- town %>%
group_by(date, Region) %>%
summarise(consumption = sum(kwh_per_acc)/1000)
chosendata <- town_final %>%
mutate(type = Description) %>%
mutate(title = 'Town') %>%
mutate(year = year(date)) %>%
mutate (month = month(date)) %>%
select(c('year','month','date','type','consumption','title'))
saveRDS(chosendata, file = "RDS/chosendata.rds")
head(chosendata, 5)
dwelling_tog <- dwelling %>%
mutate(type = DWELLING_TYPE) %>%
mutate(consumption = consumption_GWh) %>%
mutate(title = 'Dwelling Type') %>%
select(c('year','month','date','type','consumption','class', 'title'))
# saveRDS(dwelling_tog, file = "RDS/dwelling_tog.rds")
town_tog <- town_final %>%
mutate(type = Description) %>%
mutate(title = 'Town') %>%
mutate(year = year(date)) %>%
mutate (month = month(date)) %>%
select(c('year','month','date','type','consumption','title'))
# saveRDS(town_tog, file = "RDS/town_tog.rds")
region_tog <- region %>%
mutate(type = Region) %>%
mutate(title = 'Region') %>%
mutate(year = year(date)) %>%
mutate (month = month(date)) %>%
mutate(unit = 'kWh') %>%
select(c('year','month','date','type','consumption','title'))
# saveRDS(region_tog, file = "RDS/region_tog.rds")
chosendata <- readRDS(file = "RDS/chosendata.rds") # intro
ggplot(data = chosendata, aes(x = date)) +
geom_line(aes(y = consumption, colour = type)) +
labs(title = paste0("Electricity Consumption by ",chosendata[1,6]),
x = "Year", y = paste0("Consumption, GWh ")) +
scale_color_discrete(name="") +
theme(legend.position="bottom")
#choose between dwelling_tog, town_tog, region_tog
chosendata <- town_tog
#choosing the time period
startyear <- 2005
endyear <- 2021
library(ggstatsplot)
town <- readRDS(file = "RDS/town.rds")
ggbetweenstats(
data = town |> filter(town$Region %in% c("Central Region")),
x = Description,
y = kwh_per_acc,
type = "nonparametric",
p.adjust.method = "fdr",
messages = FALSE
)
select_type <- 'Bishan'
select_cycle <- chosendata %>%
filter(type %in% c(select_type)) %>%
mutate(year = factor(year, levels = 2005:2022),
month = factor(month, levels = 1:12))
#Computing year average by months
hline.data <- select_cycle %>%
group_by(month) %>%
summarise(avg_cons = mean(consumption))
#Plotting cycle plot for electricity consumption per dwelling type
ggplot() +
geom_line(data = select_cycle,
aes(x=year,y=consumption, group=month), colour = "black") +
geom_hline(data = hline.data,
aes(yintercept=avg_cons),
linetype=6,
colour="red",
linewidth=0.5) +
facet_grid(~month) +
theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
labs(title = paste0("Cycleplot for Chosen ",chosendata[1,6],"'s Consumption (GWh) , Jan 2005-Jun 2022"),
subtitle = paste0(chosendata[1,6],": ",select_type)) +
scale_x_discrete(breaks=c("2005","2010","2015","2020")) +
xlab("") +
ylab("Consumption, GWh")
library(gtExtras)
library(svglite)
#Preparing the data for report
d_report <- chosendata %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Category`= type) %>%
group_by(`Category`) %>%
summarise("Min" = min(consumption, na.rm = T),
"Max" = max(consumption, na.rm = T),
"Average" = mean(consumption, na.rm = T))
d_sparks <- chosendata %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Category`= type) %>%
group_by(`Category`) %>%
summarize(`Monthly Consumption` = list(consumption))
saveRDS(d_sparks, file = "RDS/d_sparks.rds")
report_data = left_join(d_report, d_sparks)
report_data$Average <- round(report_data$Average , 2)
report_data$Min <- round(report_data$Min , 2)
report_data$Max <- round(report_data$Max , 2)
saveRDS(report_data, file = "RDS/report_data.rds")
head(report_data, 5)
runApp('Shiny_App_G9')
=======
>>>>>>> parent of d409dc5 (Tidy up)
