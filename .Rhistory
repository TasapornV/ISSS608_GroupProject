# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima_mth_agg = full_arima %>%
# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima %>%
gg_season(peak_system_demand_mw, period = "weak")+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima %>%
gg_season(peak_system_demand_mw, period = "week")+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima %>%
gg_season(peak_system_demand_mw, period = "month")+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima %>%
gg_season(peak_system_demand_mw, period = "mth")+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_weather %>%
filter(year == "2019") %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 = full_weather %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 = full_weather %>%
filter(year = 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 = full_weather %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2013 %>% ACF(peak_system_demand_mw, lag_max = 36)
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
head(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
packages = c('tidyverse','tidyquant','tsibble','timetk','feasts','ggplot2','stats','lubridate'
,'data.table','rmarkdown','knitr','nycflights13')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('tidyverse','tidyquant','tsibble','timetk','feasts','ggplot2','stats','lubridate'
,'data.table','rmarkdown','knitr','nycflights13')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
summarise_by_time(
time_hour, .by = "mth",
peak_system_demand_mw = SUM(peak_system_demand_mw)
) %>%
plot_time_series(time_hour, peak_system_demand_mw, .facet_ncol = 2, .interactive = FALSE, .y_intercept = 0)
packages = c('tidyverse','tidyquant','tsibble','timetk','feasts','ggplot2','stats','lubridate'
,'data.table','rmarkdown','knitr','nycflights13')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
summarise_by_time(
time_hour, .by = "mth",
peak_system_demand_mw = SUM(peak_system_demand_mw)
) %>%
plot_time_series(time_hour, peak_system_demand_mw, .facet_ncol = 2, .interactive = FALSE, .y_intercept = 0)
View(arima)
arima %>%
summarise_by_time(
time_hour, .by = "Date",
peak_system_demand_mw = SUM(peak_system_demand_mw)
) %>%
plot_time_series(time_hour, peak_system_demand_mw, .facet_ncol = 2, .interactive = FALSE, .y_intercept = 0)
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
stock_data_daily %>%
group_by(symbol) %>%
mutate(adjusted_edit = 100*adjusted/first(adjusted)) %>%
ggplot(aes(x = date, y = adjusted_edit, color=symbol)) +
geom_line(size = 1)+
labs(title = "Normalized adjusted stock prices of the selected Asia pacific airline") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima %>%
ggplot(aes(x = date, y = peak_system_demand_mw)) +
geom_line(size = 1)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima %>%
ggplot(aes(x = date, y = peak_system_demand_mw)) +
geom_line(size = 1)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 1)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima_ts <- ts(data=arima$peak_system_demand_mw)
plot.ts(arima_ts, plot.type=('single'))
plot.ts(arima_ts, plot.type=('single'), differences =2)
plot.ts(arima_ts, plot.type=('single'))
arima_ds = diff(arima_ts, differences = 2)
plot(arima_ds)
arima_arima
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
head(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima_ts <- ts(data=arima$peak_system_demand_mw)
plot.ts(arima_ts, plot.type=('single'))
arima_ds = diff(arima_ts, differences = 2)
plot(arima_ds)
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_full %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
View(arima_tsbl)
p0 = plotly_key_tree(system_peak_demand_mw, height = 600, width
p0 = plotly_key_tree(system_peak_demand_mw, height = 600, width = 300)
shared_Sq_stock = arima_tsbl
p0 = plotly_key_tree(system_peak_demand_mw, height = 600, width = 300)
p0 = plotly_key_tree(system_peak_demand_mw, height = 600, width = 300)
shared_Sq_stock = arima_tsbl
p0 = plotly_key_tree(shared_Sq_stock, height = 600, width = 300)
shared_Sq_stock = arima_tsbl
p0 = plotly_key_tree(shared_Sq_stock, height = 600, width = 300)
shared_Sq_stock = arima_tsbl
p0 = plotly_key_tree(shared_Sq_stock, height = 600, width = 300)
Sq_stock_feat = shared_Sq_stock %>%
features(adjusted, feat_stl)
shared_Sq_stock = arima_tsbl
p0 = plotly_key_tree(shared_Sq_stock, height = 600, width = 300)
shared_Sq_stock = full_arima
p0 = plotly_key_tree(shared_Sq_stock, height = 600, width = 300)
shared_Sq_stock = full_arima
p0 = plotly_key_tree(shared_Sq_stock, height = 600, width = 300)
consumption <- read_csv("data/T3-5.csv")
consumption <- consumption %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(year = as.character(year))
energycost <- read_csv("data/T5-3.csv")
energycost <- energycost %>%
mutate(year = as.character(year))
#merge
a <- consumption %>%
select("year", "kwh_per_acc") %>%
group_by(year) %>%
na.omit() %>%
summarize(kwh_per_acc=mean(kwh_per_acc))
#b <- b %>%
#  data.frame(energycost,a) %>%
#  select("year", "kwh_per_acc", "energy_costs_cent_per_kwh")
consumption %>%
group_by(year) %>%
# filter(year == "2022") %>%
ggplot(mapping = aes(x = year, y = kwh_per_acc)) +
# Make grouped boxplot
geom_boxplot(aes(fill = as.factor(Region)), color = "grey") +
theme_minimal() +
theme(legend.position = "top") +
scale_fill_viridis_d(option = "C") +
labs(title = "Average consumption per year by Region", y="kwh per acc", fill = "Region")
set.seed(1234)
ggbetweenstats(
data = consumption,
x = Region,
y = kwh_per_acc,
# type = "np",
messages = FALSE
)
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
packages = c('tidyverse','tidyquant','tsibbledata','tsibble','feasts'
,'stats','lubridate','data.table','rmarkdown','knitr','nycflights13')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
#paged_table(arima)
paged_table(arima)
arima_tsbl = as_tsibble(arima)
head(arima_tsbl)
arima <- T2.3
arima <- T2.3
paged_table(arima)
View(T3.4)
View(T3.5)
arima  <- T2.3
arima2 <- T3.4
arima3 <- T3.5
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima_tsbl = as_tsibble(arima, index = Date)
arima_tsbl = as_tsibble(arima)
arima_tsbl = as_tsibble(arima)
arima  <- T2.3
arima2 <- T3.4
arima3 <- T3.5
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima_tsbl = as_tsibble(arima)
arima_tsbl = as_tsibble(arima)
arima  <- T2.3
arima2 <- T3.4
arima3 <- T3.5
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima_tsbl = as_tsibble(arima)
arima_tsbl = as_tsibble(arima)
View(area_grid)
View(arima)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima3 <- T3.5
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima_tsbl = as_tsibble(arima)
head(arima_tsbl)
full_arima = arima_tsbl %>%
fill_gaps() %>%
# group_by_key() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(full_arima)
full_arima_mth_agg = full_arima %>%
# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
```{r timeseries_data, warning=FALSE}
```{r timeseries_data, warning=FALSE, message=FALSE}
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima_tsbl  = as_tsibble(arima)
arima2_tsbl = as_tsibble(arima2)
arima_tsbl  = as_tsibble(arima)
arima2_tsbl = as_tsibble(arima2)
View(arima2)
arima_tsbl  = as_tsibble(arima)
arima2_tsbl = as_tsibble(arima2)
arima_tsbl  = as_tsibble(arima)
#arima2_tsbl = as_tsibble(arima2)
head(arima_tsbl)
head(arima2_tsbl)
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima_tsbl  = as_tsibble(arima)
arima2_tsbl = as_tsibble(arima2)
