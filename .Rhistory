x="Date") +
theme_light()
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
ETS(arima$peak_system_demand_mw)
ARIMA(arima$peak_system_demand_mw)
# arima %>%
#         model(ETS= ETS('peak_system_demand_mw'),
#               ARIMA = ARIMA('peak_system_demand_mw')) %>%
#         forecast(h = paste0(input$ahead," years")) %>%
#         autoplot(arima)
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
# ETS(arima$peak_system_demand_mw)
# ARIMA(arima$peak_system_demand_mw)
model(ETS= ETS('peak_system_demand_mw'),
ARIMA = ARIMA('peak_system_demand_mw'))
?model
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
# ETS(arima$peak_system_demand_mw)
# ARIMA(arima$peak_system_demand_mw)
model(ETS= ETS('peak_system_demand_mw'),
ARIMA = ARIMA('peak_system_demand_mw'))
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
# ETS(arima$peak_system_demand_mw)
# ARIMA(arima$peak_system_demand_mw)
model(ETS= ETS(arima$peak_system_demand_mw),
ARIMA = ARIMA(arima$peak_system_demand_mw))
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
# ETS(arima$peak_system_demand_mw)
# ARIMA(arima$peak_system_demand_mw)
model(ETS= ETS(arima$peak_system_demand_mw),
ARIMA = ARIMA(arima$peak_system_demand_mw))
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
getDataset <- reactive({
if (input$dataset=="arima")
{
return(arima)
}
else if (input$dataset=="arima")
{
return(arima)
}
else
{
return(arima)
}
})
getDataset() %>%
model(ETS= ETS(price),
ARIMA = ARIMA(price)) %>%
forecast(h = paste0(input$ahead," years")) %>%
autoplot(getDataset()) +
labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
y="Price",
x="Date") +
theme_light()
#| code-fold : TRUE
# call library used
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
## Set up parameter
ui = fluidPage(
theme = shinytheme("slate"),
headerPanel(title = "Singapore Energy Consumption"),
navlistPanel(
widths = c(3, 9),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction",
fluidPage(
fluidRow(
column(3, wellPanel(
numericInput("ahead", "Years to Forecast Ahead:", 2),
submitButton("Update View"))),
column(9, plotOutput("ForecastPlot"))
)
))
)
)
)
)
server = function(input, output, session) {
getDataset <- reactive({
if (input$dataset=="arima")
{
return(arima)
}
else if (input$dataset=="arima")
{
return(arima)
}
else
{
return(arima)
}
})
output$ForecastPlot <- renderPlot({
getDataset() %>%
model(ETS= ETS(peak_system_demand_mw),
ARIMA = ARIMA(peak_system_demand_mw)) %>%
forecast(h = paste0(input$ahead," years")) %>%
autoplot(getDataset()) +
labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
y="Price",
x="Date") +
theme_light()
})
}
shinyApp(ui , server )
#| code-fold : TRUE
# call library used
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
## Set up parameter
ui = fluidPage(
theme = shinytheme("slate"),
headerPanel(title = "Singapore Energy Consumption"),
navlistPanel(
widths = c(3, 9),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction",
fluidPage(
fluidRow(
column(3, wellPanel(
selectInput("dataset", "Dataset:",
list("arima" = "arima",
"Bread" = "Bread",
"Flour" = "Flour")),
numericInput("ahead", "Years to Forecast Ahead:", 2),
submitButton("Update View"))),
column(9, plotOutput("ForecastPlot"))
)
))
)
)
)
)
server = function(input, output, session) {
getDataset <- reactive({
if (input$dataset=="arima")
{
return(arima)
}
else if (input$dataset=="arima")
{
return(arima)
}
else
{
return(arima)
}
})
output$ForecastPlot <- renderPlot({
getDataset() %>%
model(ETS= ETS(peak_system_demand_mw),
ARIMA = ARIMA(peak_system_demand_mw)) %>%
forecast(h = paste0(input$ahead," years")) %>%
autoplot(getDataset()) +
labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
y="Price",
x="Date") +
theme_light()
})
}
shinyApp(ui , server )
selectInput("dataset", "Dataset:",
list("Chocolate Chip Cookies" = "Cookies",
"Bread" = "Bread",
"Flour" = "Flour")),
#| code-fold : TRUE
# call library used
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
arima <- T2.3
arima$Date <- as.Date(paste(arima$year, arima$mth), "%Y %m")
## Set up parameter
ui = fluidPage(
theme = shinytheme("slate"),
headerPanel(title = "Singapore Energy Consumption"),
navlistPanel(
widths = c(3, 9),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction",
fluidPage(
fluidRow(
column(3, wellPanel(
selectInput("dataset", "Dataset:",
list("arima" = "arima",
"Bread" = "Bread",
"Flour" = "Flour")),
numericInput("ahead", "Years to Forecast Ahead:", 2),
submitButton("Update View"))),
column(9, plotOutput("ForecastPlot"))
)
))
)
)
)
)
server = function(input, output, session) {
getDataset <- reactive({
if (input$dataset=="arima")
{
return(arima)
}
else if (input$dataset=="arima")
{
return(arima)
}
else
{
return(arima)
}
})
output$ForecastPlot <- renderPlot({
getDataset() %>%
model(ETS= ETS(peak_system_demand_mw),
ARIMA = ARIMA(peak_system_demand_mw)) %>%
forecast(h = paste0(input$ahead," years")) %>%
autoplot(getDataset()) +
labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
y="Price",
x="Date") +
theme_light()
})
}
shinyApp(ui , server )
selectInput("dataset", "Dataset:",
list("Chocolate Chip Cookies" = "Cookies",
"Bread" = "Bread",
"Flour" = "Flour")),
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- as.Date(paste(arima$year, arima$mth), "%Y %m")
# getDataset <- reactive({
#   if (input$dataset=="arima")
#   {
#     return(arima)
#   }
#   else if (input$dataset=="arima")
#   {
#     return(arima)
#   }
#   else
#   {
#     return(arima)
#   }
#
# })
#
#
#
#   getDataset() %>%
#     model(ETS= ETS(price),
#           ARIMA = ARIMA(price)) %>%
#     forecast(h = paste0(input$ahead," years")) %>%
#     autoplot(getDataset()) +
#     labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
#          y="Price",
#          x="Date") +
#     theme_light()
# arima %>%
#         model(ETS= ETS('peak_system_demand_mw'),
#               ARIMA = ARIMA('peak_system_demand_mw')) %>%
#         forecast(h = paste0(input$ahead," years")) %>%
#         autoplot(arima)
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- as.yearmon(paste(arima$year, arima$mth), "%Y %m")
#
#   getDataset <- reactive({
#     if (input$dataset=="arima")
#     {
#       return(arima)
#     }
#     else if (input$dataset=="arima")
#     {
#       return(arima)
#     }
#     else
#     {
#       return(arima)
#     }
#
#   })
#
#
#
#     getDataset() %>%
#       model(ETS= ETS(price),
#             ARIMA = ARIMA(price)) %>%
#       forecast(h = paste0(input$ahead," years")) %>%
#       autoplot(getDataset()) +
#       labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
#            y="Price",
#            x="Date") +
#       theme_light()
# arima %>%
#         model(ETS= ETS('peak_system_demand_mw'),
#               ARIMA = ARIMA('peak_system_demand_mw')) %>%
#         forecast(h = paste0(input$ahead," years")) %>%
#         autoplot(arima)
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- as.Date(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
#
#   getDataset <- reactive({
#     if (input$dataset=="arima")
#     {
#       return(arima)
#     }
#     else if (input$dataset=="arima")
#     {
#       return(arima)
#     }
#     else
#     {
#       return(arima)
#     }
#
#   })
#
#
#
#     getDataset() %>%
#       model(ETS= ETS(price),
#             ARIMA = ARIMA(price)) %>%
#       forecast(h = paste0(input$ahead," years")) %>%
#       autoplot(getDataset()) +
#       labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
#            y="Price",
#            x="Date") +
#       theme_light()
# arima %>%
#         model(ETS= ETS('peak_system_demand_mw'),
#               ARIMA = ARIMA('peak_system_demand_mw')) %>%
#         forecast(h = paste0(input$ahead," years")) %>%
#         autoplot(arima)
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
library(fabletools)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
#
#   getDataset <- reactive({
#     if (input$dataset=="arima")
#     {
#       return(arima)
#     }
#     else if (input$dataset=="arima")
#     {
#       return(arima)
#     }
#     else
#     {
#       return(arima)
#     }
#
#   })
#
#
#
#     getDataset() %>%
#       model(ETS= ETS(price),
#             ARIMA = ARIMA(price)) %>%
#       forecast(h = paste0(input$ahead," years")) %>%
#       autoplot(getDataset()) +
#       labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
#            y="Price",
#            x="Date") +
#       theme_light()
# arima %>%
#         model(ETS= ETS('peak_system_demand_mw'),
#               ARIMA = ARIMA('peak_system_demand_mw')) %>%
#         forecast(h = paste0(input$ahead," years")) %>%
#         autoplot(arima)
#| code-fold : TRUE
# call library used
library(shiny)
library(shinythemes)
library(fpp3)
library(forecast)
library(zoo)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
## Set up parameter
ui = fluidPage(
theme = shinytheme("slate"),
headerPanel(title = "Singapore Energy Consumption"),
navlistPanel(
widths = c(3, 9),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction",
fluidPage(
fluidRow(
column(3, wellPanel(
selectInput("dataset", "Dataset:",
list("arima" = "arima",
"Bread" = "Bread",
"Flour" = "Flour")),
numericInput("ahead", "Years to Forecast Ahead:", 2),
submitButton("Update View"))),
column(9, plotOutput("ForecastPlot"))
)
))
)
)
)
)
server = function(input, output, session) {
getDataset <- reactive({
if (input$dataset=="arima")
{
return(arima)
}
else if (input$dataset=="arima")
{
return(arima)
}
else
{
return(arima)
}
})
output$ForecastPlot <- renderPlot({
getDataset() %>%
model(ETS= ETS(peak_system_demand_mw),
ARIMA = ARIMA(peak_system_demand_mw)) %>%
forecast(h = paste0(input$ahead," years")) %>%
autoplot(getDataset()) +
labs(title = paste0(input$ahead, " year forcasts for price of ", input$dataset),
y="Price",
x="Date") +
theme_light()
})
}
shinyApp(ui , server )
