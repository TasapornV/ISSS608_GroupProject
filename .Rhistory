navbarPage("CLUSTERING",
tabPanel("Hierachical Clustering"),
tabPanel("DTW"),
tabPanel("Time Series Clustering")
)
),
# ========================== INFERENTIAL ========================== #
tabPanel("INFERENTIAL STATISTICS", tabName = "inferential", icon = icon("magnifying-glass-chart"),
navbarPage("INFERENTIAL STATISTICS",
tabPanel("ANOVA"),
tabPanel("Correlation Analysis")
)
),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction"),
tabPanel("Slope Graph")
)
),
# =============================== DATA =============================== #
tabPanel("DATA", tabName = "data", icon = icon("table"),
navbarPage("DATA" )),
# =============================== ABOUT =============================== #
tabPanel("ABOUT", tabName = "about", icon = icon("info")),
# ============================== CO.MMON USER INPUT =============================== #
tabPanel(wellPanel(
sliderInput("slider_time", "Select date range",min = as.Date("2021-02-24"),
max = as.Date("2021-04-24"),
value =  c(as.Date("2021-02-24"),as.Date("2021-03-03") )),
dateRangeInput("daterange", "Input date range",
start = as.Date("2021-02-24"),end = as.Date("2021-03-03") )
))
)
)
server = function(input, output, session) {
# output$piechart <- renderPlot({
# ec_data %>%
#     filter(Sale_Year == input$Year) %>%
#     group_by(`Planning Region`) %>%
#     summarise(#region_value = mean(`Unit Price ($ psm)`, na.rm = T),
#         count = n()) %>%
#     ggplot(aes(x="", y=count, fill=`Planning Region`)) +
#         geom_bar(stat="identity", width=1, color="white") +
#         coord_polar("y", start=0)+
#         theme_void() +
#         labs(title = 'The proportion of sale counts for differnet Planning Regions',
#              x = 'Planning Region') +
#         theme(plot.title = element_text(color = "Black", size = 14))
# })
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
# merge table with town name
geofacet_gas_consump <- inner_join(geofacet, area_grid,
by = c("Description" = "name"))
common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
geom_line(aes(color = as.factor(dwelling_type))) +
# scale_x_date(date_labels = "%b") +
facet_geo(~Description, grid = common_grid) +
# labs(title = "Singapore Resale flat price trends") +
# scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
theme(plot.title = element_text(size=22),
axis.text.x = element_text(size = 10, angle = 45),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10),
legend.position = "top")
})
}
shinyApp(ui , server )
#| code-fold : TRUE
# call library used
library(shiny)
library(shinythemes)
library(geofacet)
## Set up parameter
# Import data
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
ui = fluidPage(
theme = shinytheme("slate"),
headerPanel(title = "Singapore Energy Consumption"),
navlistPanel(
widths = c(3, 9),
tabPanel("OVERVIEW",tabName = "overview",icon = icon("chalkboard-user"),
navbarPage("OVERVIEW",
tabPanel("Introduction"),
tabPanel("Boxplot"),
tabPanel("Geofacet",
fluidPage(
fluidRow(
column(3,wellPanel(
awesomeRadio(
inputId = "geoyear",
label = "Select Year",
choices = c("2005" = 2005,
"2006" = 2006,
"2007" = 2007,
"2008" = 2008,
"2009" = 2009,
"2010" = 2010,
"2011" = 2011,
"2012" = 2012,
"2013" = 2013,
"2014" = 2014,
"2015" = 2015,
"2016" = 2016,
"2017" = 2017,
"2018" = 2018,
"2019" = 2019,
"2020" = 2020,
"2021" = 2021,
"2022" = 2022
)
)
# ,
#
#       checkboxGroupInput("GeoRegion",
#                          label = "Select Region",
#                          choices = regions,
#                          selected = regions)
)),
column(9,
box(plotOutput("geo", height = 800), width = "100%")
)
)
)
),
tabPanel("Lineplot"),
tabPanel("Barchart")
)
),
# ========================== CLUSTERING ========================== #
tabPanel("CLUSTERING", tabName = "clustering", icon = icon("circle-nodes"),
navbarPage("CLUSTERING",
tabPanel("Hierachical Clustering"),
tabPanel("DTW"),
tabPanel("Time Series Clustering")
)
),
# ========================== INFERENTIAL ========================== #
tabPanel("INFERENTIAL STATISTICS", tabName = "inferential", icon = icon("magnifying-glass-chart"),
navbarPage("INFERENTIAL STATISTICS",
tabPanel("ANOVA"),
tabPanel("Correlation Analysis")
)
),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction"),
tabPanel("Slope Graph")
)
),
# =============================== DATA =============================== #
tabPanel("DATA", tabName = "data", icon = icon("table"),
navbarPage("DATA" )),
# =============================== ABOUT =============================== #
tabPanel("ABOUT", tabName = "about", icon = icon("info")),
# ============================== CO.MMON USER INPUT =============================== #
tabPanel(wellPanel(
sliderInput("slider_time", "Select date range",min = as.Date("2021-02-24"),
max = as.Date("2021-04-24"),
value =  c(as.Date("2021-02-24"),as.Date("2021-03-03") )),
dateRangeInput("daterange", "Input date range",
start = as.Date("2021-02-24"),end = as.Date("2021-03-03") )
))
)
)
server = function(input, output, session) {
# output$piechart <- renderPlot({
# ec_data %>%
#     filter(Sale_Year == input$Year) %>%
#     group_by(`Planning Region`) %>%
#     summarise(#region_value = mean(`Unit Price ($ psm)`, na.rm = T),
#         count = n()) %>%
#     ggplot(aes(x="", y=count, fill=`Planning Region`)) +
#         geom_bar(stat="identity", width=1, color="white") +
#         coord_polar("y", start=0)+
#         theme_void() +
#         labs(title = 'The proportion of sale counts for differnet Planning Regions',
#              x = 'Planning Region') +
#         theme(plot.title = element_text(color = "Black", size = 14))
# })
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
# merge table with town name
geofacet_gas_consump <- inner_join(geofacet, area_grid,
by = c("Description" = "name"))
common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
geom_line(aes(color = as.factor(dwelling_type))) +
# scale_x_date(date_labels = "%b") +
facet_geo(~Description, grid = common_grid) +
# labs(title = "Singapore Resale flat price trends") +
# scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
theme(plot.title = element_text(size=22),
axis.text.x = element_text(size = 10, angle = 45),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10),
legend.position = "top")
})
}
shinyApp(ui , server )
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
mutate(date <- as.Date(month, year))
#| code-fold : TRUE
# call library used
library(shiny)
library(shinythemes)
library(geofacet)
## Set up parameter
# Import data
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
ui = fluidPage(
theme = shinytheme("slate"),
headerPanel(title = "Singapore Energy Consumption"),
navlistPanel(
widths = c(3, 9),
tabPanel("OVERVIEW",tabName = "overview",icon = icon("chalkboard-user"),
navbarPage("OVERVIEW",
tabPanel("Introduction"),
tabPanel("Boxplot"),
tabPanel("Geofacet",
fluidPage(
fluidRow(
column(3,wellPanel(
awesomeRadio(
inputId = "geoyear",
label = "Select Year",
choices = c("2005" = 2005,
"2006" = 2006,
"2007" = 2007,
"2008" = 2008,
"2009" = 2009,
"2010" = 2010,
"2011" = 2011,
"2012" = 2012,
"2013" = 2013,
"2014" = 2014,
"2015" = 2015,
"2016" = 2016,
"2017" = 2017,
"2018" = 2018,
"2019" = 2019,
"2020" = 2020,
"2021" = 2021,
"2022" = 2022
)
)
# ,
#
#       checkboxGroupInput("GeoRegion",
#                          label = "Select Region",
#                          choices = regions,
#                          selected = regions)
)),
column(9,
box(plotOutput("geo", height = 800), width = "100%")
)
)
)
),
tabPanel("Lineplot"),
tabPanel("Barchart")
)
),
# ========================== CLUSTERING ========================== #
tabPanel("CLUSTERING", tabName = "clustering", icon = icon("circle-nodes"),
navbarPage("CLUSTERING",
tabPanel("Hierachical Clustering"),
tabPanel("DTW"),
tabPanel("Time Series Clustering")
)
),
# ========================== INFERENTIAL ========================== #
tabPanel("INFERENTIAL STATISTICS", tabName = "inferential", icon = icon("magnifying-glass-chart"),
navbarPage("INFERENTIAL STATISTICS",
tabPanel("ANOVA"),
tabPanel("Correlation Analysis")
)
),
# ========================== TIME SERIES ========================== #
tabPanel("TIME SERIES FORECASTING", tabName = "time_series", icon = icon("chart-line"),
navbarPage("TIME SERIES FORECASTING",
tabPanel("Trend Prediction"),
tabPanel("Slope Graph")
)
),
# =============================== DATA =============================== #
tabPanel("DATA", tabName = "data", icon = icon("table"),
navbarPage("DATA" )),
# =============================== ABOUT =============================== #
tabPanel("ABOUT", tabName = "about", icon = icon("info")),
# ============================== CO.MMON USER INPUT =============================== #
tabPanel(wellPanel(
sliderInput("slider_time", "Select date range",min = as.Date("2021-02-24"),
max = as.Date("2021-04-24"),
value =  c(as.Date("2021-02-24"),as.Date("2021-03-03") )),
dateRangeInput("daterange", "Input date range",
start = as.Date("2021-02-24"),end = as.Date("2021-03-03") )
))
)
)
server = function(input, output, session) {
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
unite('date', 'month':'year', remove = FALSE) %>%
mutate(date <- as.Date(month, year))
# merge table with town name
geofacet_gas_consump <- inner_join(geofacet, area_grid,
by = c("Description" = "name"))
common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
geom_line(aes(color = as.factor(dwelling_type))) +
# scale_x_date(date_labels = "%b") +
facet_geo(~Description, grid = common_grid) +
# labs(title = "Singapore Resale flat price trends") +
# scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
theme(plot.title = element_text(size=22),
axis.text.x = element_text(size = 10, angle = 45),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10),
legend.position = "top")
})
}
shinyApp(ui , server )
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
unite('date', 'month':'year', remove = FALSE) %>%
mutate(date <- as.Date(date))
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
unite('date', 'month':'year', remove = FALSE)
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
# Import data
geofacet <- T3.5
geofacet <- geofacet %>%
mutate(date <- as.Date(month))
geofacet <- geofacet %>%
mutate(date <- as.Date(year))
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
mutate(date <- as.Date(year))
geofacet <- geofacet %>%
mutate(year <- as.Date(year))
geofacet <- geofacet %>%
mutate(year <- as.Date(year))
View(geofacet)
geofacet$year <- as.Date(geofacet$year)
geofacet$year <- as.Date(geofacet$year)
geofacet$year <- as_date(geofacet$year)
library(shiny)
library(shinythemes)
library(geofacet)
# Import data
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
# merge table with town name
geofacet_gas_consump <- inner_join(geofacet, area_grid,
by = c("Description" = "name"))
common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
geom_line(aes(color = as.factor(dwelling_type))) +
# scale_x_date(date_labels = "%b") +
facet_geo(~Description, grid = common_grid) +
# labs(title = "Singapore Resale flat price trends") +
# scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
theme(plot.title = element_text(size=22),
axis.text.x = element_text(size = 10, angle = 45),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10),
legend.position = "top")
library(shiny)
library(shinythemes)
library(geofacet)
# Import data
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
# Import the area grid data.
area_grid <- read_csv("data/areagrid.csv")
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
# merge table with town name
geofacet_gas_consump <- inner_join(geofacet, area_grid,
by = c("Description" = "name"))
common_grid <- area_grid[area_grid$name %in% unique(geofacet$Description),]
ggplot(geofacet_gas_consump, aes(x = year, y = avgprice)) +
geom_line(aes(color = as.factor(dwelling_type))) +
# scale_x_date(date_labels = "%b") +
facet_geo(~Description, grid = common_grid) +
# labs(title = "Singapore Resale flat price trends") +
# scale_y_continuous(breaks = c(250000, 500000, 750000, 1000000, 1250000)) +
theme(plot.title = element_text(size=22),
axis.text.x = element_text(size = 10, angle = 45),
axis.text.y = element_text(size = 10),
strip.text = element_text(size = 10),
legend.position = "top")
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet$year <- as_date(geofacet$year)
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet$year <- as_date(geofacet$year)
View(geofacet)
View(geofacet)
output$geo <- renderPlot ({
geofacet <- geofacet %>%
group_by(year, dwelling_type, Description ) %>%
summarise(avgprice = mean(kwh_per_acc, na.rm = TRUE),
medprice = median(kwh_per_acc, na.rm = TRUE))%>%
ungroup()
geofacet$year <- as_date(geofacet$year)
geofacet$year <- as.Date(geofacet$year)
geofacet$year <- as.Date(geofacet$year)
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
View(geofacet)
geofacet <- T3.5
geofacet$kwh_per_acc <- as.numeric(geofacet$kwh_per_acc)
geofacet$year <- as.Date(geofacet$year)
