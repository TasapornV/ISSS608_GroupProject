type = "h",
k=2,
distance="diagonal",
control = hierarchical_control(method = "complete"),
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
library(dtwclust)
library(tibble)
library(ggdendro)
# Parameter 1: Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".)
# parameter 2: Number of cluster (k)
# parameter 3: Distance function (distance) (dtw_basic, dtw, , )
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "h",
k=2,
distance="mean",
control = hierarchical_control(method = "complete"),
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
library(dtwclust)
library(tibble)
library(ggdendro)
# Parameter 1: Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".)
# parameter 2: Number of cluster (k)
# parameter 3: Distance function (distance) (dtw_basic, dtw, dtw2, dtw_lb,, )
# parameter 4: method
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "h",
k=2,
distance="dtw_lb",
control = hierarchical_control(method = "complete"),
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
hclus_dtw <- cutree(cluster_dtw, k=4) %>%
as.data.frame(.) %>%
rename(.,cluster_group = .) %>%
rownames_to_column("type_col")
# hcdata <- dendro_data(cluster_dtw)
# names_order <- hcdata$labels$label
library(dtwclust)
library(tibble)
library(ggdendro)
# Parameter 1: Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".)
# parameter 2: Number of cluster (k)
# parameter 3: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 4: method
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "p",
k=2,
distance="dtw_lb",
control = hierarchical_control(method = "complete"),
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
library(dtwclust)
library(tibble)
library(ggdendro)
# Parameter 1: Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".)
# parameter 2: Number of cluster (k)
# parameter 3: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 4: method
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "p",
k=2,
distance="dtw_lb",
control = partitional_control(method = "complete"),
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
library(dtwclust)
library(tibble)
library(ggdendro)
# Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods
# parameter 1: Number of cluster (k)
# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 3: method
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "h",
k=2,
distance="dtw_lb",
control = hierarchical_control(method = "complete"),
centroid="x",
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
hclus_dtw <- cutree(cluster_dtw, k=4) %>%
as.data.frame(.) %>%
rename(.,cluster_group = .) %>%
rownames_to_column("type_col")
# hcdata <- dendro_data(cluster_dtw)
# names_order <- hcdata$labels$label
library(dtwclust)
library(tibble)
library(ggdendro)
# Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods
# parameter 1: Number of cluster (k)
# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 3: method
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "h",
k=2,
distance="dtw",
control = hierarchical_control(method = "complete"),
centroid="x",
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
hclus_dtw <- cutree(cluster_dtw, k=4) %>%
as.data.frame(.) %>%
rename(.,cluster_group = .) %>%
rownames_to_column("type_col")
# hcdata <- dendro_data(cluster_dtw)
# names_order <- hcdata$labels$label
library(dtwclust)
library(tibble)
library(ggdendro)
# Clustering Method (type) ("partitional", "hierarchical", "tadpole", "fuzzy".) - fixed at hierarchical, otherwise need to change the quote because some parameters apply only to certain methods
# parameter 1: Number of cluster (k)
# parameter 2: Distance function (distance) (dtw_basic, dtw, dtw2, lbk, lbi, sbd, gak, sdtw) - full form can be found https://www.rdocumentation.org/packages/dtwclust/versions/5.5.12/topics/tsclust
# parameter 3: hierarchical clustering method ("ward.D", "ward.D2", "single", "complete", "average", "mcquitty", "median" or "centroid" .)
cluster_dtw <- tsclust(clus_matrix1[,-c(1)],
type = "h",
k=2,
distance="dtw",
control = hierarchical_control(method = "ward.D"),
preproc = NULL,
args=tsclust_args(dist = list(window.size = 5L)))
hclus_dtw <- cutree(cluster_dtw, k=4) %>%
as.data.frame(.) %>%
rename(.,cluster_group = .) %>%
rownames_to_column("type_col")
# hcdata <- dendro_data(cluster_dtw)
# names_order <- hcdata$labels$label
#Display rate of change using Slopegraph
#User can choose any 2 years for comparison
startyear <- 2005
endyear <- 2021
cons_yr <- dwelling
#load lib
pacman::p_load(scales, viridis, hrbrthemes, lubridate, gridExtra, knitr, data.table, ggthemes, CGPfunctions, ggHoriPlot, gapminder, gganimate, ggbraid, ggstatsplot, ggiraph, plotly, performance, nortest, patchwork, ggdist, ggridges, tidyverse)
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b %Y"))
#Add Private vs Public Classification
dwelling$class <- case_when(
dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
#Display rate of change using Slopegraph
#User can choose any 2 years for comparison
startyear <- 2005
endyear <- 2021
cons_yr <- dwelling
cons_year <- cons_yr %>%
group_by(DWELLING_TYPE, year) %>%
summarise(mean_cons=round(mean(consumption_GWh),2))
p_slopegraph <- cons_year %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear)) %>%
newggslopegraph(year, mean_cons, DWELLING_TYPE)
p_slopegraph1 <- p_slopegraph + labs(title = "Monthly Household Electricity Consumption between 2 years",
subtitle = "",
caption = "Source:ema.gov.sg")
p_slopegraph1
remotes::install_github("timelyportfolio/dataui")
library(dataui)
library(dataui)
#Display rate of change using Slopegraph
#User can choose any 2 years for comparison
startyear <- 2005
endyear <- 2021
cons_yr <- dwelling
cons_year <- cons_yr %>%
group_by(DWELLING_TYPE, year) %>%
summarise(mean_cons=round(mean(consumption_GWh),2))
p_slopegraph <- cons_year %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear)) %>%
newggslopegraph(year, mean_cons, DWELLING_TYPE)
p_slopegraph1 <- p_slopegraph + labs(title = "Monthly Household Electricity Consumption between 2 years",
subtitle = "",
caption = "Source:ema.gov.sg")
p_slopegraph1
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear))
View(d_sparks)
#data formatting
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
report,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
pacman::p_load(reactable, reactablefmtr, gt, gtExtras)
#data formatting
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
Product = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
report,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
report,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear)) %>%
select(c('DWELLING_TYPE','consumption_GWh'))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
mutate(year = factor(year)) %>%
filter(year %in% c(endyear)) %>%
select(c('DWELLING_TYPE','consumption_GWh'))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(endyear)) %>%
select(c('DWELLING_TYPE','consumption_GWh'))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
class(dwelling$consumption_GWh)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(endyear)) %>%
group_by(DWELLING_TYPE) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`consumption_GWh` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(endyear)) %>%
group_by(DWELLING_TYPE) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
start_year
startyear
endyear
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
group_by(DWELLING_TYPE) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
DWELLING_TYPE = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(Dwelling_Type = DWELLING_TYPE)
group_by(Dwelling_Type) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(Dwelling_Type = DWELLING_TYPE) %>%
group_by(Dwelling_Type) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
Dwelling_Type = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#Allow users to switch between bandline and mean statline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
statline = "mean"
)
)
)
)
#Preparing the data for report
d_report <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
group_by(DWELLING_TYPE) %>%
summarise("Min" = min(consumption_GWh, na.rm = T),
"Max" = max(consumption_GWh, na.rm = T),
"Average" = mean(consumption_GWh, na.rm = T)
) %>%
gt() %>%
fmt_number(columns = 4,
decimals = 2)
#Preparing the data for report
dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
group_by(DWELLING_TYPE) %>%
summarise("Min" = min(consumption_GWh, na.rm = T),
"Max" = max(consumption_GWh, na.rm = T),
"Average" = mean(consumption_GWh, na.rm = T)
) %>%
gt() %>%
fmt_number(columns = 4,
decimals = 2)
