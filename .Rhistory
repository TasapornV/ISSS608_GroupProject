# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(a$avgcon, h =10))
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10))
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
arima_ts
runApp('Shiny_App_G9')
auto.arima(arima_ts, d=1, D=1)
auto.arima(arima_ts, d=1)
auto.arima(arima_ts)
plot(arima_ts)
plot(forecast(arima_ts))
plot(forecast(arima_arima))
plot(forecast(a$avgcon))
plot(forecast(arima.ts))
plot(forecast(arima_ts))
plot(forecast(arima_ts, fit = fit))
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
fit <- arfima(x)
tsdisplay(residuals(fit))
library(fracdiff)
x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
plot(forecast(arima_ts, fit=fit))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
plot(forecast(arfima(arima_ts), fit=fit))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
forecast(arfima(arima_ts))
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
forecast(fit)
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
forecast(arima_ts)
library(fracdiff)
fit <- arfima(arima_ts)
tsdisplay(residuals(fit))
plot(forecast(fit,h=30))
library(fracdiff)
m <- modelAR(arima_ts)
m <- modelAR(arima_ts)
modelAR(arima_ts)
library(fracdiff)
m <- modelAR(arima_ts, FUN)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
fit <- ets(window(arima_ts))
fit2 <- arima(window(arima_ts))
# fit3 <- tslm(window(arima_ts))
# Generate forecasts using the ARIMA method
plot(forecast(arima_ts, h =10))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
forecast(arima_ts)
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
forecast(arima_ts, fit = arima(window(arima_ts)))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
forecast(arima_ts, fit = arima(window(arima_ts)))
n <- auto.arima(arima_ts)
plot(forecast(n))
arima_ts <- ts(data=a$avgcon, start = c(2005,1), end = c(2022,6), frequency=12)
n <- auto.arima(arima_ts)
n <- auto.arima(arima_ts)
plot(forecast(n))
plot(n)
n <- auto.arima(arima_ts)
n <- auto.arima(arima_ts)
p
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
arima_ts <- ts(data=a$avgcon)
arima_arima = auto.arima(arima_ts, d = 1, D = 1)
plot(forecast(arima_arima))
arima <- T2.3
library(readr)
T2.3 <- read_csv("data/T2-3.csv")
saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_ts))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =2, D =1, seasonal = FALSE, trace=TRUE)
plot(forecast(arima_ts, fit=arfima(arima_ts)))
library(forecast)
library(tsibble)
library(zoo)
arima <- town
arima$ym <- yearmonth(as.yearmon(paste(arima$year, arima$month), "%Y %m"))
a <- arima %>%
group_by(ym) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE)) %>%
ungroup()
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('tidyverse', 'ggstatsplot', 'psych', 'lubridate', 'ggrepel', 'plotly', "tidyr", "readr")
for(p in packages){
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
library(readr)
T2.3 <- read_csv("data/T2-3.csv")
saveRDS(T2.3, file = "RDS/T2-3.rds")
#T2.6 <- read_csv("data/T2-6.csv")
#saveRDS(T2.6, file = "RDS/T2-6.rds")
T3.4 <- read_csv("data/T3-4.csv")
saveRDS(T3.4, file = "RDS/T3-4.rds")
T3.5 <- read_csv("data/T3-5.csv")
saveRDS(T3.5, file = "RDS/T3-5.rds")
T3.6 <- read_csv("data/T3-6.csv")
saveRDS(T3.6, file = "RDS/T3-6.rds")
T3.7 <- read_csv("data/T3-7.csv")
saveRDS(T3.7, file = "RDS/T3-7.rds")
T3.8 <- read_csv("data/T3-8.csv")
saveRDS(T3.8, file = "RDS/T3-8.rds")
T3.9 <- read_csv("data/T3-9.csv")
saveRDS(T3.9, file = "RDS/T3-9.rds")
# T5.1 <- read_csv("data/T5-1.csv")
# saveRDS(T5.1, file = "RDS/T5-1.rds")
#
# T5.2 <- read_csv("data/T5-2.csv")
# saveRDS(T5.2, file = "RDS/T5-2.rds")
#T5.3 <- read_csv("data/T5-3.csv")
#saveRDS(T5.3, file = "RDS/T5-3.rds")
# T5.4 <- read_csv("data/T5-4.csv")
# saveRDS(T5.4, file = "RDS/T5-4.rds")
#
# T5.5 <- read_csv("data/T5-5.csv")
# saveRDS(T5.4, file = "RDS/T5-5.rds")
packages = c('tidyverse','tidyquant','tsibbledata','tsibble','feasts'
,'stats','lubridate','data.table','rmarkdown','knitr')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima2 <- T3.4
arima2$Date <- yearmonth(as.yearmon(paste(arima2$year, arima2$month), "%Y %m"))
arima3 <- T3.5
arima3$Date <- yearmonth(as.yearmon(paste(arima3$year, arima3$month), "%Y %m"))
paged_table(arima)
paged_table(arima2)
paged_table(arima3)
arima_tsbl  = as_tsibble(arima)
head(arima_tsbl)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(full_arima)
full_arima_mth_agg = full_arima %>%
# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
head(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima_ts <- ts(data=arima$peak_system_demand_mw)
plot.ts(arima_ts, plot.type=('single'))
arima_ds = diff(arima_ts, differences = 2)
ggplotly(plot(arima_ds))
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_arima))
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
arima_ts <- ts(data=arima$peak_system_demand_mw)
plot.ts(arima_ts, plot.type=('single'))
arima_ts
arima_ts <- ts(data=arima$peak_system_demand_mw, start = (2005,1), end = (2022, 6))
arima_ts <- ts(data=arima$peak_system_demand_mw, start = c(2005,1), end = c(2022, 6))
plot.ts(arima_ts, plot.type=('single'))
arima_ds = diff(arima_ts, differences = 2)
ggplotly(plot(arima_ds))
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
arima_ts <- ts(data=arima$peak_system_demand_mw, start = c(2005,1), end = c(2022, 6), frequency=12)
plot.ts(arima_ts, plot.type=('single'))
arima_ds = diff(arima_ts, differences = 2)
ggplotly(plot(arima_ds))
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_arima))
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_ts))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_arima))
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
# filter(year==2017) %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima$peak_system_demand_mw))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
plot(forecast(arima_ts))
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
# plot(forecast(arima_ts))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
# plot(forecast(arima_ts))
shiny::runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
# Filter the required data for clustering
# remove month = "Annual"
# remove dewlling_type/description = Overall
# year 2018 and onwards due to missing data
# exclude "%region" in description
# Exclude Pioneer as data is incomplete
clus_data <- T3.5 %>%
filter(month != "Annual" &
year > 2017 &
dwelling_type != "Overall" &
!str_detect(Description,"Region|Pioneer|Overall"))
# transform dataset
# convert kwh into numbers
clus_data$kwh_per_acc <- as.numeric(clus_data$kwh_per_acc)
# join month and year into a date
clus_data$date <- parse_date_time(paste(clus_data$year, clus_data$month), orders=c("%Y %m"))
# drop month and year column
clus_data <- subset(clus_data, select=-c(month, year, Region)) %>%
arrange(date)
# pivot wider
clus <- clus_data %>%
pivot_wider(names_from=date, values_from=kwh_per_acc)
# omit na
clus <- na.omit(clus)
clus <- clus %>% relocate(Description, .before = dwelling_type)
# parameter 1: distance method ("euclidean", "maximum", "manhattan", "canberra", "binary" or "minkowski")
# parameter 2: hclust method ("ward.D", "ward.D2","single","complete","average", "mcquitty", "median" or "centroid")
# parameter 3: number of clusters
# parameter 4: seriate (Optimal leaf ordering, Gruvaeus and Wainer, mean, none)
# parameter 5: scale / normalize / percentize (the code for this part is different)
# Remove dwelling type
clus_group1 <- clus[,-c(2)] %>%
group_by(Description) %>%
summarise_each(list(sum))
# making "Description" the row name (index)
row.names(clus_group1) <- clus_group1$Description
# Making it into a matrix
clus_matrix1 <- data.matrix(clus_group1)
# plot
heatmaply(clus_matrix1[,-c(1)],
scale = "column",
dist_method = "euclidean",
hclust_method = "average",
Colv=NA,
seriate = "none",
k_row = 3,
margins = c(NA,200,50,NA),
colors = viridis(
n= 256, alpha=1,
begin=0, end=1,
option="viridis"),
fontsize_row = 5,
fontsize_col = 5,
main="Hierarchical Clustering",
ylab = "Towns",
xlab = "Time")
# parameter: method
# user will need to input the distance calculated method here to determine which clustering method is optimal
library(dendextend)
clustering <- dist(normalize(clus_group1,-c(1)), method="euclidean")
dend_expend(clustering)[[3]]
# once user have gotten the clustering method from above, they need to input that to find the optimal number of k
clust2 <- hclust(clustering, method = "mcquitty")
num_k <- find_k(clust2)
plot(num_k)
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
