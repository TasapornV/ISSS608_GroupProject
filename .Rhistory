low = "red",
high = "green",
midpoint = 0.5,
limits = c(0, 1)),
fontsize_row = 5,
fontsize_col = 5,
main="Hierarchical Clustering")
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b %Y"))
#Add Private vs Public Classification
dwelling$class <- case_when(
dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#load lib
pacman::p_load(scales, viridis, hrbrthemes, lubridate, gridExtra, knitr, data.table, ggthemes, CGPfunctions, ggHoriPlot, gapminder, gganimate, ggbraid, ggstatsplot, ggiraph, plotly, performance, nortest, patchwork, ggdist, ggridges, tidyverse)
dwelling <- T3.4 %>%
filter(year %in% c(2005:2022)) %>%
filter(month %in% c(1:12)) %>%
filter(DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive',
'Private Apartments and Condominiums',
'Landed Properties', 'Others')) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd")) %>%
mutate(monthyear = format(as.Date(date), "%b %Y"))
#Add Private vs Public Classification
dwelling$class <- case_when(
dwelling$DWELLING_TYPE %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
dwelling$DWELLING_TYPE %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
dwelling_bar <- dwelling %>%
select('date','DWELLING_TYPE','consumption_GWh')
dwelling_bar <- as.Date(dwelling_bar$date, format="%d-%m,-%Y")
pacman::p_load(reactable, reactablefmtr, gt, gtExtras)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#Display rate of change using Slopegraph
#User can choose any 2 years for comparison
startyear <- 2005
endyear <- 2021
cons_yr <- dwelling
cons_year <- cons_yr %>%
group_by(DWELLING_TYPE, year) %>%
summarise(mean_cons=round(mean(consumption_GWh),2))
p_slopegraph <- cons_year %>%
mutate(year = factor(year)) %>%
filter(year %in% c(startyear,endyear)) %>%
newggslopegraph(year, mean_cons, DWELLING_TYPE)
p_slopegraph1 <- p_slopegraph + labs(title = "Monthly Household Electricity Consumption between 2 years",
subtitle = "",
caption = "Source:ema.gov.sg")
p_slopegraph1
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#Allow users to switch between bandline and mean statline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
statline = "mean"
)
)
)
)
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima_ts <- ts(data=arima$peak_system_demand_mw, start = c(2005,1), end = c(2022, 6), frequency=12)
plot.ts(arima_ts, plot.type=('single'))
arima_ds = diff(arima_ts, differences = 2)
ggplotly(plot(arima_ds))
arima_arima = auto.arima(arima_ts)
arima_arima
plot(forecast(arima_ts))
arima_tsbl  = as_tsibble(arima)
head(arima_tsbl)
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
head(full_arima)
full_arima_mth_agg = full_arima %>%
# index_by(Date = ~ Date(.)) %>%
summarise(
avg_demand = mean(peak_system_demand_mw, na.rm = TRUE)
)
head(full_arima_mth_agg)
full_arima %>%
gg_season(peak_system_demand_mw)+
labs(title = "",
subtitle = "",
y = "peak_system_demand_mw")
full_arima_2019 = full_arima %>%
filter(year == 2019) %>%
mutate(quarter= case_when(
mth >= 1 & mth <= 3 ~ 'Q1'
, mth >= 4 & mth <= 6 ~ 'Q2'
, mth >= 7 & mth <= 9 ~ 'Q3'
, mth >= 10 & mth <= 12 ~ 'Q4')) %>%
select(year, mth, peak_system_demand_mw, Date)
full_arima_2019 %>%
gg_lag(peak_system_demand_mw, geom = "point")+
labs(title = "Lag plot of the time plot of the humidity level of hourly meterological data",
y = "Humidity level")
full_arima_acf=full_arima_2019 %>% ACF(peak_system_demand_mw, lag_max = 36)
head(full_arima_acf)
full_arima_2019 %>%
ACF(peak_system_demand_mw) %>%
autoplot() + labs(title="")
full_arima_stl=full_arima %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components()
head(full_arima_stl)
full_arima_stl %>%
summarise(peak_system_demand_mw = sum(peak_system_demand_mw)) %>%
model(STL(peak_system_demand_mw ~ season(window = 5))) %>%
components() %>%
autoplot()+
labs(title = "",
y = "peak_system_demand_mw")
packages = c('dplyr','tidyquant','tidyverse','tsibble','feasts','forecast','fable'
,'tsibbletalk','tidymodels','earth'
,'stats','lubridate','data.table','ggplot2','plotly'
,'rmarkdown','knitr','devtools','tseries')
for (p in packages) {
if(!require(p,character.only = T)){
install.packages(p)
}
library(p,character.only = T)
}
arima %>%
ggplot(aes(x = Date, y = peak_system_demand_mw)) +
geom_line(size = 0.5)+
labs(title = "") +
theme(text = element_text(color = "#444444", family = 'Helvetica Neue')
,plot.title = element_text(size = 35, color = '#333333')
,axis.title = element_text(size = 14, color = '#333333')
,axis.title.y = element_text(angle = 0, vjust = .5)
) +
theme_tq() +
scale_color_tq()
arima_ts <- ts(data=arima$peak_system_demand_mw, start = c(2005,1), end = c(2022, 6), frequency=12)
plot.ts(arima_ts, plot.type=('single'))
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
# plot(forecast(arima_ts))
arima <- T2.3
arima$Date <- yearmonth(as.yearmon(paste(arima$year, arima$mth), "%Y %m"))
arima_ts <- ts(data=arima$peak_system_demand_mw)
arima_arima = auto.arima(arima_ts, d =1, D =1, allowdrift = FALSE)
# plot(forecast(arima_ts))
arima_tsbl  = as_tsibble(arima)
full_arima = arima_tsbl %>%
# filter(year==2017) %>%
fill_gaps() %>%
tidyr::fill(peak_system_demand_mw, .direction = "down")
full_arima %>%
gg_tsdisplay(difference(peak_system_demand_mw), plot_type='partial')
runApp('Shiny_App_G9')
town <- subset(T3.5, Description != 'Overall' & Description !='Central Region' &
Description !='East Region' & Description !='North East Region' &
Description !='North Region' & Description !='West Region' &
kwh_per_acc != 's' & dwelling_type != 'Private Housing' &
dwelling_type != 'Public Housing' & month != 'Annual') %>%
mutate(kwh_per_acc = as.numeric(kwh_per_acc)) %>%
mutate(date = parse_date_time(paste0(year, "-", month,"-1"),"ymd"))
#Adding housing type
town$type <- case_when(
town$dwelling_type %in% c('Private Apartments and Condominiums',
'Landed Properties', 'Others') ~ "Private",
town$dwelling_type %in% c('1-room / 2-room','3-room','4-room',
'5-room and Executive') ~ "Public")
View(town)
a <- town
a$Date <- yearmonth(as.yearmon(paste(a$year, a$mth), "%Y %m"))
View(a)
a$Date <- yearmonth(as.yearmon(paste(a$year, a$month), "%Y %m"))
a <- a %>%
group_by(Date) %>%
summarise(avgcon = mean(kwh_per_acc, na.rm = TRUE))
a %>%
gg_tsdisplay(difference(avgcon), plot_type='partial')
output$arima_plot <- renderPlot({
a %>%
gg_tsdisplay(difference(avgcon), plot_type='partial')
})
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
runApp('Shiny_App_G9')
View(arima)
arima_ts
View(arima_arima)
#Allow users to switch between bandline and mean statline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
statline = "mean"
)
)
)
)
#Display rate of change using Slopegraph
#User can choose any 2 years for comparison
startyear <- 2005
endyear <- 2021
cons_yr <- dwelling
cons_year <- cons_yr %>%
group_by(DWELLING_TYPE, year) %>%
summarise(mean_cons=round(mean(consumption_GWh),2))
#load lib
pacman::p_load(scales, viridis, hrbrthemes, lubridate, gridExtra, knitr, data.table, ggthemes, CGPfunctions, ggHoriPlot, gapminder, gganimate, ggbraid, ggstatsplot, ggiraph, plotly, performance, nortest, patchwork, ggdist, ggridges, tidyverse)
#load lib
pacman::p_load(scales, viridis, hrbrthemes, lubridate, gridExtra, knitr, data.table, ggthemes, CGPfunctions, ggHoriPlot, gapminder, gganimate, ggbraid, ggstatsplot, ggiraph, plotly, performance, nortest, patchwork, ggdist, ggridges, tidyverse)
# cycleplot for each dwelling type
select_type <- 'Private Apartments and Condominiums'
select_dwelling <- dwelling %>%
filter(DWELLING_TYPE %in% c(select_type)) %>%
mutate(year = factor(year, levels = 2005:2022),
month = factor(month, levels = 1:12))
#Computing year average by months
hline.data <- select_dwelling %>%
group_by(month) %>%
summarise(avg_cons = mean(consumption_GWh))
#Plotting cycle plot for imports
ggplot() +
geom_line(data = select_dwelling,
aes(x=year,y=consumption_GWh, group=month), colour = "black") +
geom_hline(data = hline.data,
aes(yintercept=avg_cons),
linetype=6,
colour="red",
linewidth=0.5) +
facet_grid(~month) +
theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
labs(title = "Cycleplot for household electricity consumption (GWh), Jan 2005-Jun 2022",
subtitle = paste0('Dwelling Type: ',select_type)) +
scale_x_discrete(breaks=c("2005","2010","2015","2020")) +
xlab("") +
ylab("GWh")
#linechart # backup
ggplot(data = dwelling, aes(x = date)) +
geom_line(aes(y = consumption_GWh, colour = DWELLING_TYPE)) +
labs(title = "Electricity Consumption by Dwelling Type",
x = "Year", y = "Consumption (GWh)") +
scale_color_discrete(name="") +
theme(legend.position="bottom")
# cycleplot for each dwelling type
select_type <- 'Private Apartments and Condominiums'
select_dwelling <- dwelling %>%
filter(DWELLING_TYPE %in% c(select_type)) %>%
mutate(year = factor(year, levels = 2005:2022),
month = factor(month, levels = 1:12))
#Computing year average by months
hline.data <- select_dwelling %>%
group_by(month) %>%
summarise(avg_cons = mean(consumption_GWh))
#Plotting cycle plot for electricity consumption per dwelling type
ggplot() +
geom_line(data = select_dwelling,
aes(x=year,y=consumption_GWh, group=month), colour = "black") +
geom_hline(data = hline.data,
aes(yintercept=avg_cons),
linetype=6,
colour="red",
linewidth=0.5) +
facet_grid(~month) +
theme(axis.text.x = element_text(angle=90, vjust=1, hjust=1)) +
labs(title = "Cycleplot for household electricity consumption (GWh), Jan 2005-Jun 2022",
subtitle = paste0('Dwelling Type: ',select_type)) +
scale_x_discrete(breaks=c("2005","2010","2015","2020")) +
xlab("") +
ylab("GWh")
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
pacman::p_load(reactable, reactablefmtr, gt, gtExtras)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
pacman::p_load(reactable, reactablefmtr, gt, gtExtras)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
#Allow users to switch between bandline and mean statline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
statline = "mean"
)
)
)
)
#Preparing the data for report
dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
group_by(DWELLING_TYPE) %>%
summarise("Min" = min(consumption_GWh, na.rm = T),
"Max" = max(consumption_GWh, na.rm = T),
"Average" = mean(consumption_GWh, na.rm = T)
) %>%
gt() %>%
fmt_number(columns = 4,
decimals = 2)
#data formatting
d_sparks <- dwelling %>%
filter(year %in% c(startyear:endyear)) %>%
mutate(`Dwelling Type` = DWELLING_TYPE) %>%
group_by(`Dwelling Type`) %>%
summarize(`Monthly Consumption` = list(consumption_GWh))
#react_sparkline
reactable(
d_sparks,
defaultPageSize = 13,
columns = list(
`Dwelling Type` = colDef(maxWidth = 200),
`Monthly Consumption` = colDef(
cell = react_sparkline(
d_sparks,
highlight_points = highlight_points(
min = "red", max = "blue"),
line_width = 1,
bandline = "innerquartiles",
bandline_color = "green"
)
)
)
)
